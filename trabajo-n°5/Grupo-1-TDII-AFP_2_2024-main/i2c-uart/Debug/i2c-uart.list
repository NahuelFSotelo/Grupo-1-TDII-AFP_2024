
i2c-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005368  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f8  080057f8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005800  08005800  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005808  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          0000033c  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee5f  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288c  00000000  00000000  00015eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00018778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  00019410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256a8  00000000  00000000  00019dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012be6  00000000  00000000  0003f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e173f  00000000  00000000  00052056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133795  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003868  00000000  00000000  001337d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00137040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005500 	.word	0x08005500

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005500 	.word	0x08005500

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f001 f846 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f934 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fb98 	bl	8000ce0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b0:	f000 fcee 	bl	8000f90 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005b4:	f000 fd8e 	bl	80010d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 fe9c 	bl	80012f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80005bc:	f000 ffe7 	bl	800158e <lcd_init>
  uartSendString((uint8_t *)"Sistema inicializado. Enviá algo por Bluetooth:\n");
 80005c0:	487c      	ldr	r0, [pc, #496]	@ (80007b4 <main+0x214>)
 80005c2:	f000 fecd 	bl	8001360 <uartSendString>
  lcd_clear();
 80005c6:	f000 ffac 	bl	8001522 <lcd_clear>
  lcd_enviar("cargando", 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	487a      	ldr	r0, [pc, #488]	@ (80007b8 <main+0x218>)
 80005d0:	f000 ff96 	bl	8001500 <lcd_enviar>
  adcConversionComplete=true;
 80005d4:	4b79      	ldr	r3, [pc, #484]	@ (80007bc <main+0x21c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
  //ADC_Start();


  HAL_Delay(2000);
 80005da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005de:	f001 f89b 	bl	8001718 <HAL_Delay>
  while (1)
  {
      /* USER CODE END WHILE */
      /* USER CODE BEGIN 3 */
      // Verificar si la conversión está completa
      if (ADC_IsConversionComplete())
 80005e2:	f000 fd3b 	bl	800105c <ADC_IsConversionComplete>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <main+0x66>
      {
          // Procesar el valor del ADC
          uartSendString((uint8_t *)"adc iniciado");
 80005ec:	4874      	ldr	r0, [pc, #464]	@ (80007c0 <main+0x220>)
 80005ee:	f000 feb7 	bl	8001360 <uartSendString>
          photoSensorValue = ADC_GetValue();
 80005f2:	f000 fd63 	bl	80010bc <ADC_GetValue>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a72      	ldr	r2, [pc, #456]	@ (80007c4 <main+0x224>)
 80005fa:	6013      	str	r3, [r2, #0]

          // Resetear la bandera de conversión
          adcConversionComplete = false;
 80005fc:	4b6f      	ldr	r3, [pc, #444]	@ (80007bc <main+0x21c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]

          // Procesamiento del valor del sensor


          // Iniciar la conversión nuevamente para muestreo continuo
          ADC_Start();
 8000602:	f000 fd17 	bl	8001034 <ADC_Start>
      }
      sprintf((char *)uartRxBuffer, "Luz: %lu   ", photoSensorValue);
 8000606:	4b6f      	ldr	r3, [pc, #444]	@ (80007c4 <main+0x224>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	496e      	ldr	r1, [pc, #440]	@ (80007c8 <main+0x228>)
 800060e:	486f      	ldr	r0, [pc, #444]	@ (80007cc <main+0x22c>)
 8000610:	f004 fad6 	bl	8004bc0 <siprintf>
                lcd_clear();
 8000614:	f000 ff85 	bl	8001522 <lcd_clear>
                lcd_enviar((char *)uartRxBuffer, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	486b      	ldr	r0, [pc, #428]	@ (80007cc <main+0x22c>)
 800061e:	f000 ff6f 	bl	8001500 <lcd_enviar>
                uartSendString((uint8_t *)uartRxBuffer);
 8000622:	486a      	ldr	r0, [pc, #424]	@ (80007cc <main+0x22c>)
 8000624:	f000 fe9c 	bl	8001360 <uartSendString>
      // Chequear si hay datos recibidos por UART
      receivedData = uartGetReceivedData();
 8000628:	f000 fef4 	bl	8001414 <uartGetReceivedData>
 800062c:	4603      	mov	r3, r0
 800062e:	4a68      	ldr	r2, [pc, #416]	@ (80007d0 <main+0x230>)
 8000630:	6013      	str	r3, [r2, #0]
      if (strlen((char *)receivedData) > 0)
 8000632:	4b67      	ldr	r3, [pc, #412]	@ (80007d0 <main+0x230>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80b5 	beq.w	80007a8 <main+0x208>
      {
          uartSendString((uint8_t *)"Recibido: ");
 800063e:	4865      	ldr	r0, [pc, #404]	@ (80007d4 <main+0x234>)
 8000640:	f000 fe8e 	bl	8001360 <uartSendString>
          uartSendString((uint8_t *)receivedData);
 8000644:	4b62      	ldr	r3, [pc, #392]	@ (80007d0 <main+0x230>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fe89 	bl	8001360 <uartSendString>
          uartSendString((uint8_t *)"\n");
 800064e:	4862      	ldr	r0, [pc, #392]	@ (80007d8 <main+0x238>)
 8000650:	f000 fe86 	bl	8001360 <uartSendString>

          // Comparar los datos recibidos con los comandos
          if (strcmp((char *)receivedData, "Encender led verde") == 0) {
 8000654:	4b5e      	ldr	r3, [pc, #376]	@ (80007d0 <main+0x230>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4960      	ldr	r1, [pc, #384]	@ (80007dc <main+0x23c>)
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdc8 	bl	80001f0 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d102      	bne.n	800066c <main+0xcc>
              writeLedOn_GPIO(LD1_Pin);
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fc6e 	bl	8000f48 <writeLedOn_GPIO>
          }
          if (strcmp((char *)receivedData, "Encender led rojo") == 0) {
 800066c:	4b58      	ldr	r3, [pc, #352]	@ (80007d0 <main+0x230>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	495b      	ldr	r1, [pc, #364]	@ (80007e0 <main+0x240>)
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fdbc 	bl	80001f0 <strcmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <main+0xe6>
              writeLedOn_GPIO(LD3_Pin);
 800067e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000682:	f000 fc61 	bl	8000f48 <writeLedOn_GPIO>
          }
          if (strcmp((char *)receivedData, "Encender led azul") == 0) {
 8000686:	4b52      	ldr	r3, [pc, #328]	@ (80007d0 <main+0x230>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4956      	ldr	r1, [pc, #344]	@ (80007e4 <main+0x244>)
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fdaf 	bl	80001f0 <strcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d102      	bne.n	800069e <main+0xfe>
              writeLedOn_GPIO(LD2_Pin);
 8000698:	2080      	movs	r0, #128	@ 0x80
 800069a:	f000 fc55 	bl	8000f48 <writeLedOn_GPIO>
          }
          if (strcmp((char *)receivedData, "Apagar led verde") == 0) {
 800069e:	4b4c      	ldr	r3, [pc, #304]	@ (80007d0 <main+0x230>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4951      	ldr	r1, [pc, #324]	@ (80007e8 <main+0x248>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fda3 	bl	80001f0 <strcmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <main+0x116>
              writeLedOff_GPIO(LD1_Pin);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fc5b 	bl	8000f6c <writeLedOff_GPIO>
          }
          if (strcmp((char *)receivedData, "Apagar led rojo") == 0) {
 80006b6:	4b46      	ldr	r3, [pc, #280]	@ (80007d0 <main+0x230>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	494c      	ldr	r1, [pc, #304]	@ (80007ec <main+0x24c>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd97 	bl	80001f0 <strcmp>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <main+0x130>
              writeLedOff_GPIO(LD3_Pin);
 80006c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80006cc:	f000 fc4e 	bl	8000f6c <writeLedOff_GPIO>
          }
          if (strcmp((char *)receivedData, "Apagar led azul") == 0) {
 80006d0:	4b3f      	ldr	r3, [pc, #252]	@ (80007d0 <main+0x230>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4946      	ldr	r1, [pc, #280]	@ (80007f0 <main+0x250>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd8a 	bl	80001f0 <strcmp>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <main+0x148>
              writeLedOff_GPIO(LD2_Pin);
 80006e2:	2080      	movs	r0, #128	@ 0x80
 80006e4:	f000 fc42 	bl	8000f6c <writeLedOff_GPIO>
          }
          if (strcmp((char *)receivedData, "RaN") == 0) {
 80006e8:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <main+0x230>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4941      	ldr	r1, [pc, #260]	@ (80007f4 <main+0x254>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd7e 	bl	80001f0 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d106      	bne.n	8000708 <main+0x168>
              writeLedOn_GPIO(Rele1_Pin);
 80006fa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80006fe:	f000 fc23 	bl	8000f48 <writeLedOn_GPIO>
              uartSendString((uint8_t *)"rele activado");
 8000702:	483d      	ldr	r0, [pc, #244]	@ (80007f8 <main+0x258>)
 8000704:	f000 fe2c 	bl	8001360 <uartSendString>
          }
          if (strcmp((char *)receivedData, "RbN") == 0) {
 8000708:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <main+0x230>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	493b      	ldr	r1, [pc, #236]	@ (80007fc <main+0x25c>)
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd6e 	bl	80001f0 <strcmp>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d103      	bne.n	8000722 <main+0x182>
              writeLedOn_GPIO(Rele2_Pin);
 800071a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800071e:	f000 fc13 	bl	8000f48 <writeLedOn_GPIO>
          }
          if (strcmp((char *)receivedData, "RcN") == 0) {
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <main+0x230>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4936      	ldr	r1, [pc, #216]	@ (8000800 <main+0x260>)
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fd61 	bl	80001f0 <strcmp>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <main+0x19c>
              writeLedOn_GPIO(Rele3_Pin);
 8000734:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000738:	f000 fc06 	bl	8000f48 <writeLedOn_GPIO>
          }
          if (strcmp((char *)receivedData, "RaFF") == 0) {
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <main+0x230>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4930      	ldr	r1, [pc, #192]	@ (8000804 <main+0x264>)
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd54 	bl	80001f0 <strcmp>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d108      	bne.n	8000760 <main+0x1c0>
              uartSendString((uint8_t *)"rele activado");
 800074e:	482a      	ldr	r0, [pc, #168]	@ (80007f8 <main+0x258>)
 8000750:	f000 fe06 	bl	8001360 <uartSendString>
              HAL_GPIO_WritePin(GPIOB, Rele1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	482b      	ldr	r0, [pc, #172]	@ (8000808 <main+0x268>)
 800075c:	f001 ffdc 	bl	8002718 <HAL_GPIO_WritePin>
          }
          if (strcmp((char *)receivedData, "RbFF") == 0) {
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <main+0x230>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4929      	ldr	r1, [pc, #164]	@ (800080c <main+0x26c>)
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd42 	bl	80001f0 <strcmp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d108      	bne.n	8000784 <main+0x1e4>
              uartSendString((uint8_t *)"rele activado");
 8000772:	4821      	ldr	r0, [pc, #132]	@ (80007f8 <main+0x258>)
 8000774:	f000 fdf4 	bl	8001360 <uartSendString>
              HAL_GPIO_WritePin(GPIOB, Rele2_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800077e:	4822      	ldr	r0, [pc, #136]	@ (8000808 <main+0x268>)
 8000780:	f001 ffca 	bl	8002718 <HAL_GPIO_WritePin>
          }
          if (strcmp((char *)receivedData, "RcFF") == 0) {
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <main+0x230>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4921      	ldr	r1, [pc, #132]	@ (8000810 <main+0x270>)
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd30 	bl	80001f0 <strcmp>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d108      	bne.n	80007a8 <main+0x208>
              uartSendString((uint8_t *)"rele activado");
 8000796:	4818      	ldr	r0, [pc, #96]	@ (80007f8 <main+0x258>)
 8000798:	f000 fde2 	bl	8001360 <uartSendString>
              HAL_GPIO_WritePin(GPIOB, Rele3_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a2:	4819      	ldr	r0, [pc, #100]	@ (8000808 <main+0x268>)
 80007a4:	f001 ffb8 	bl	8002718 <HAL_GPIO_WritePin>
          }
      }

      HAL_Delay(500);  // Espera breve para evitar uso excesivo de CPU
 80007a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ac:	f000 ffb4 	bl	8001718 <HAL_Delay>
      if (ADC_IsConversionComplete())
 80007b0:	e717      	b.n	80005e2 <main+0x42>
 80007b2:	bf00      	nop
 80007b4:	08005518 	.word	0x08005518
 80007b8:	0800554c 	.word	0x0800554c
 80007bc:	20000098 	.word	0x20000098
 80007c0:	08005558 	.word	0x08005558
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	08005568 	.word	0x08005568
 80007cc:	20000078 	.word	0x20000078
 80007d0:	20000088 	.word	0x20000088
 80007d4:	08005574 	.word	0x08005574
 80007d8:	08005580 	.word	0x08005580
 80007dc:	08005584 	.word	0x08005584
 80007e0:	08005598 	.word	0x08005598
 80007e4:	080055ac 	.word	0x080055ac
 80007e8:	080055c0 	.word	0x080055c0
 80007ec:	080055d4 	.word	0x080055d4
 80007f0:	080055e4 	.word	0x080055e4
 80007f4:	080055f4 	.word	0x080055f4
 80007f8:	080055f8 	.word	0x080055f8
 80007fc:	08005608 	.word	0x08005608
 8000800:	0800560c 	.word	0x0800560c
 8000804:	08005610 	.word	0x08005610
 8000808:	40020400 	.word	0x40020400
 800080c:	08005618 	.word	0x08005618
 8000810:	08005620 	.word	0x08005620

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f004 f9ec 	bl	8004c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <SystemClock_Config+0xb8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <SystemClock_Config+0xb8>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <SystemClock_Config+0xb8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <SystemClock_Config+0xbc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <SystemClock_Config+0xbc>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <SystemClock_Config+0xbc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fc77 	bl	800317c <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000894:	f000 f81e 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fed9 	bl	800366c <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008c0:	f000 f808 	bl	80008d4 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	@ 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  writeLedOn_GPIO(LD1_Pin);
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fb33 	bl	8000f48 <writeLedOn_GPIO>
	  writeLedOn_GPIO(LD2_Pin);
 80008e2:	2080      	movs	r0, #128	@ 0x80
 80008e4:	f000 fb30 	bl	8000f48 <writeLedOn_GPIO>
	  writeLedOn_GPIO(LD2_Pin);
 80008e8:	2080      	movs	r0, #128	@ 0x80
 80008ea:	f000 fb2d 	bl	8000f48 <writeLedOn_GPIO>
	  writeLedOn_GPIO(LD1_Pin);
 80008ee:	bf00      	nop
 80008f0:	e7f4      	b.n	80008dc <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	@ 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <HAL_ADC_MspInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12f      	bne.n	80009c6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <HAL_ADC_MspInit+0x90>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a19      	ldr	r2, [pc, #100]	@ (80009d4 <HAL_ADC_MspInit+0x90>)
 8000970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <HAL_ADC_MspInit+0x90>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <HAL_ADC_MspInit+0x90>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <HAL_ADC_MspInit+0x90>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <HAL_ADC_MspInit+0x90>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800099e:	2309      	movs	r3, #9
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	2303      	movs	r3, #3
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4809      	ldr	r0, [pc, #36]	@ (80009d8 <HAL_ADC_MspInit+0x94>)
 80009b2:	f001 fd05 	bl	80023c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2012      	movs	r0, #18
 80009bc:	f001 fc37 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009c0:	2012      	movs	r0, #18
 80009c2:	f001 fc50 	bl	8002266 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	@ 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012000 	.word	0x40012000
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a19      	ldr	r2, [pc, #100]	@ (8000a60 <HAL_I2C_MspInit+0x84>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12c      	bne.n	8000a58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a17      	ldr	r2, [pc, #92]	@ (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a1a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a20:	2312      	movs	r3, #18
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <HAL_I2C_MspInit+0x8c>)
 8000a38:	f001 fcc2 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_I2C_MspInit+0x88>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	@ 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a36      	ldr	r2, [pc, #216]	@ (8000b64 <HAL_UART_MspInit+0xf8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d134      	bne.n	8000af8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a34      	ldr	r2, [pc, #208]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ac6:	2360      	movs	r3, #96	@ 0x60
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <HAL_UART_MspInit+0x100>)
 8000ae2:	f001 fc6d 	bl	80023c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2026      	movs	r0, #38	@ 0x26
 8000aec:	f001 fb9f 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af0:	2026      	movs	r0, #38	@ 0x26
 8000af2:	f001 fbb8 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000af6:	e031      	b.n	8000b5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <HAL_UART_MspInit+0x104>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12c      	bne.n	8000b5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_UART_MspInit+0xfc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <HAL_UART_MspInit+0x100>)
 8000b58:	f001 fc32 	bl	80023c0 <HAL_GPIO_Init>
}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	@ 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40004800 	.word	0x40004800

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 fd85 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <ADC_IRQHandler+0x10>)
 8000bda:	f000 fee3 	bl	80019a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000009c 	.word	0x2000009c

08000be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <USART2_IRQHandler+0x10>)
 8000bee:	f003 f85d 	bl	8003cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000138 	.word	0x20000138

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f003 fff0 	bl	8004c10 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20030000 	.word	0x20030000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	20000090 	.word	0x20000090
 8000c64:	20000398 	.word	0x20000398

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c90:	f7ff ffea 	bl	8000c68 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f003 ffaf 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc6f 	bl	80005a0 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd0:	08005808 	.word	0x08005808
  ldr r2, =_sbss
 8000cd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cd8:	20000398 	.word	0x20000398

08000cdc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <CAN1_RX0_IRQHandler>
	...

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	@ 0x30
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a8c      	ldr	r2, [pc, #560]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b8a      	ldr	r3, [pc, #552]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	4b86      	ldr	r3, [pc, #536]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a85      	ldr	r2, [pc, #532]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b83      	ldr	r3, [pc, #524]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b7f      	ldr	r3, [pc, #508]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a7e      	ldr	r2, [pc, #504]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b78      	ldr	r3, [pc, #480]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b75      	ldr	r3, [pc, #468]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b71      	ldr	r3, [pc, #452]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a70      	ldr	r2, [pc, #448]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b6e      	ldr	r3, [pc, #440]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b6a      	ldr	r3, [pc, #424]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a69      	ldr	r2, [pc, #420]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b67      	ldr	r3, [pc, #412]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b63      	ldr	r3, [pc, #396]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a62      	ldr	r2, [pc, #392]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b60      	ldr	r3, [pc, #384]	@ (8000f30 <MX_GPIO_Init+0x250>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000dc0:	485c      	ldr	r0, [pc, #368]	@ (8000f34 <MX_GPIO_Init+0x254>)
 8000dc2:	f001 fca9 	bl	8002718 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, Rele3_Pin|Rele1_Pin|Rele2_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000dcc:	485a      	ldr	r0, [pc, #360]	@ (8000f38 <MX_GPIO_Init+0x258>)
 8000dce:	f001 fca3 	bl	8002718 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	4859      	ldr	r0, [pc, #356]	@ (8000f3c <MX_GPIO_Init+0x25c>)
 8000dd8:	f001 fc9e 	bl	8002718 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4853      	ldr	r0, [pc, #332]	@ (8000f40 <MX_GPIO_Init+0x260>)
 8000df4:	f001 fae4 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000df8:	2332      	movs	r3, #50	@ 0x32
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e08:	230b      	movs	r3, #11
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	484b      	ldr	r0, [pc, #300]	@ (8000f40 <MX_GPIO_Init+0x260>)
 8000e14:	f001 fad4 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e18:	2386      	movs	r3, #134	@ 0x86
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e28:	230b      	movs	r3, #11
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4844      	ldr	r0, [pc, #272]	@ (8000f44 <MX_GPIO_Init+0x264>)
 8000e34:	f001 fac4 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e38:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4838      	ldr	r0, [pc, #224]	@ (8000f34 <MX_GPIO_Init+0x254>)
 8000e52:	f001 fab5 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : Rele3_Pin Rele1_Pin Rele2_Pin */
    GPIO_InitStruct.Pin = Rele3_Pin|Rele1_Pin|Rele2_Pin;
 8000e56:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4832      	ldr	r0, [pc, #200]	@ (8000f38 <MX_GPIO_Init+0x258>)
 8000e70:	f001 faa6 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : RMII_TXD1_Pin */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e86:	230b      	movs	r3, #11
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4828      	ldr	r0, [pc, #160]	@ (8000f34 <MX_GPIO_Init+0x254>)
 8000e92:	f001 fa95 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e96:	2340      	movs	r3, #64	@ 0x40
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4823      	ldr	r0, [pc, #140]	@ (8000f3c <MX_GPIO_Init+0x25c>)
 8000eae:	f001 fa87 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eb2:	2380      	movs	r3, #128	@ 0x80
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481d      	ldr	r0, [pc, #116]	@ (8000f3c <MX_GPIO_Init+0x25c>)
 8000ec6:	f001 fa7b 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eca:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000edc:	230a      	movs	r3, #10
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4817      	ldr	r0, [pc, #92]	@ (8000f44 <MX_GPIO_Init+0x264>)
 8000ee8:	f001 fa6a 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_VBUS_Pin */
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <MX_GPIO_Init+0x264>)
 8000f02:	f001 fa5d 	bl	80023c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f06:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f18:	230b      	movs	r3, #11
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <MX_GPIO_Init+0x25c>)
 8000f24:	f001 fa4c 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3730      	adds	r7, #48	@ 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020400 	.word	0x40020400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020000 	.word	0x40020000

08000f48 <writeLedOn_GPIO>:
/**
 * @brief GPIO Led on Function
 * @param led_t LDx
 * @retval none
 */
void writeLedOn_GPIO(led_t LDx) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_SET);
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <writeLedOn_GPIO+0x20>)
 8000f5a:	f001 fbdd 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020400 	.word	0x40020400

08000f6c <writeLedOff_GPIO>:
/*
 * @brief GPIO led off Function
 * @param led_t LDx
 * @retval none
 */
void writeLedOff_GPIO(led_t LDx) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <writeLedOff_GPIO+0x20>)
 8000f7e:	f001 fbcb 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020400 	.word	0x40020400

08000f90 <MX_ADC1_Init>:

/**
 * @brief Inicialización del ADC1.
 * @note Configura el ADC con un solo canal y habilita las interrupciones.
 */
void MX_ADC1_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <MX_ADC1_Init+0x9c>)
 8000fa6:	601a      	str	r2, [r3, #0]
      hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
      hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
      hadc1.Init.ScanConvMode = DISABLE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
      hadc1.Init.ContinuousConvMode = ENABLE;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	761a      	strb	r2, [r3, #24]
      hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
      hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fd0:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <MX_ADC1_Init+0xa0>)
 8000fd2:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
      hadc1.Init.NbrOfConversion = 1;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	61da      	str	r2, [r3, #28]
      hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	615a      	str	r2, [r3, #20]

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fee:	480e      	ldr	r0, [pc, #56]	@ (8001028 <MX_ADC1_Init+0x98>)
 8000ff0:	f000 fbb6 	bl	8001760 <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x6e>
        Error_Handler();
 8000ffa:	f7ff fc6b 	bl	80008d4 <Error_Handler>
    }

    // Configuración del canal del ADC
    sConfig.Channel = ADC_CHANNEL_0;  // Ejemplo de canal
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	@ (8001028 <MX_ADC1_Init+0x98>)
 8001010:	f000 fdfa 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0x8e>
        Error_Handler();
 800101a:	f7ff fc5b 	bl	80008d4 <Error_Handler>
    }
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000009c 	.word	0x2000009c
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <ADC_Start>:
 */

/**
 * @brief Inicia la conversión del ADC en modo interrupción.
 */
void ADC_Start(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    adcConversionComplete = false;  // Reinicia la bandera
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <ADC_Start+0x20>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
    if (HAL_ADC_Start_IT(&hadc1) != HAL_OK) {
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <ADC_Start+0x24>)
 8001040:	f000 fbd2 	bl	80017e8 <HAL_ADC_Start_IT>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <ADC_Start+0x1a>
        Error_Handler();
 800104a:	f7ff fc43 	bl	80008d4 <Error_Handler>
    }
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000098 	.word	0x20000098
 8001058:	2000009c 	.word	0x2000009c

0800105c <ADC_IsConversionComplete>:

/**
 * @brief Verifica si la conversión ha finalizado.
 * @return true si la conversión está completa, false de lo contrario.
 */
bool ADC_IsConversionComplete(void) {
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
    return adcConversionComplete;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <ADC_IsConversionComplete+0x14>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000098 	.word	0x20000098

08001074 <HAL_ADC_ConvCpltCallback>:

/**
 * @brief Callback de conversión completa del ADC.
 * @param hadc Handler del ADC que generó la interrupción.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    if (hadc1->Instance == ADC1) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d110      	bne.n	80010a8 <HAL_ADC_ConvCpltCallback+0x34>
        adcValue = HAL_ADC_GetValue(hadc1);  // Obtiene el valor de conversión
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fd9c 	bl	8001bc4 <HAL_ADC_GetValue>
 800108c:	4603      	mov	r3, r0
 800108e:	4a09      	ldr	r2, [pc, #36]	@ (80010b4 <HAL_ADC_ConvCpltCallback+0x40>)
 8001090:	6013      	str	r3, [r2, #0]
        adcConversionComplete = true;      // Marca la conversión como completa
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_ADC_ConvCpltCallback+0x44>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
        if (HAL_ADC_Start_IT(hadc1) != HAL_OK) {
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fba5 	bl	80017e8 <HAL_ADC_Start_IT>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_ADC_ConvCpltCallback+0x34>
            Error_Handler();               // Si falla, maneja el error
 80010a4:	f7ff fc16 	bl	80008d4 <Error_Handler>
        }
    }
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40012000 	.word	0x40012000
 80010b4:	20000094 	.word	0x20000094
 80010b8:	20000098 	.word	0x20000098

080010bc <ADC_GetValue>:
/**
 * @brief Retorna el valor leído del ADC.
 * @return Valor ADC (12 bits).
 */
uint32_t ADC_GetValue(void) {
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
    return adcValue;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <ADC_GetValue+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000094 	.word	0x20000094

080010d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <MX_I2C1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <MX_I2C1_Init+0x7c>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001112:	f001 fb1b 	bl	800274c <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f7ff fbda 	bl	80008d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4809      	ldr	r0, [pc, #36]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001124:	f001 ffaf 	bl	8003086 <HAL_I2CEx_ConfigAnalogFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800112e:	f7ff fbd1 	bl	80008d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001136:	f001 ffe2 	bl	80030fe <HAL_I2CEx_ConfigDigitalFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001140:	f7ff fbc8 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000e4 	.word	0x200000e4
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0

08001154 <uartSendConfig>:

/* USER CODE END PV */
/* Private function prototypes -----------------------------------------------*/
//void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void uartSendConfig(UART_InitTypeDef *config) {
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	b0dd      	sub	sp, #372	@ 0x174
 8001158:	af0e      	add	r7, sp, #56	@ 0x38
 800115a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800115e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001162:	6018      	str	r0, [r3, #0]
	char configMsg[300];

	// Construir mensaje con desplazamiento de puntero en cada salto
	snprintf(configMsg, sizeof(configMsg),
 8001164:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001168:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6818      	ldr	r0, [r3, #0]
					"        %-15s : %s\n"
					"        %-15s : %s\n"
					"        %-15s : %s\n"
					"        %-15s : %s\n", "BaudRate", config->BaudRate,
			"WordLength",
			(config->WordLength == UART_WORDLENGTH_8B) ? "8 bits" : "9 bits",
 8001170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001174:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
	snprintf(configMsg, sizeof(configMsg),
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <uartSendConfig+0x30>
 8001180:	4c45      	ldr	r4, [pc, #276]	@ (8001298 <uartSendConfig+0x144>)
 8001182:	e000      	b.n	8001186 <uartSendConfig+0x32>
 8001184:	4c45      	ldr	r4, [pc, #276]	@ (800129c <uartSendConfig+0x148>)
			"StopBits",
			(config->StopBits == UART_STOPBITS_1) ? "1 bit" : "2 bits",
 8001186:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800118a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
	snprintf(configMsg, sizeof(configMsg),
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <uartSendConfig+0x46>
 8001196:	4d42      	ldr	r5, [pc, #264]	@ (80012a0 <uartSendConfig+0x14c>)
 8001198:	e000      	b.n	800119c <uartSendConfig+0x48>
 800119a:	4d42      	ldr	r5, [pc, #264]	@ (80012a4 <uartSendConfig+0x150>)
			"Parity",
			(config->Parity == UART_PARITY_NONE) ? "None" :
 800119c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
	snprintf(configMsg, sizeof(configMsg),
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00c      	beq.n	80011c6 <uartSendConfig+0x72>
			(config->Parity == UART_PARITY_EVEN) ? "Even" : "Odd", "Mode",
 80011ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011bc:	d101      	bne.n	80011c2 <uartSendConfig+0x6e>
 80011be:	4a3a      	ldr	r2, [pc, #232]	@ (80012a8 <uartSendConfig+0x154>)
 80011c0:	e002      	b.n	80011c8 <uartSendConfig+0x74>
 80011c2:	4a3a      	ldr	r2, [pc, #232]	@ (80012ac <uartSendConfig+0x158>)
 80011c4:	e000      	b.n	80011c8 <uartSendConfig+0x74>
	snprintf(configMsg, sizeof(configMsg),
 80011c6:	4a3a      	ldr	r2, [pc, #232]	@ (80012b0 <uartSendConfig+0x15c>)
			(config->Mode == UART_MODE_TX_RX) ? "TX/RX" :
 80011c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	691b      	ldr	r3, [r3, #16]
	snprintf(configMsg, sizeof(configMsg),
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d00b      	beq.n	80011f0 <uartSendConfig+0x9c>
			(config->Mode == UART_MODE_TX) ? "TX Only" : "RX Only", "HwFlowCtl",
 80011d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d101      	bne.n	80011ec <uartSendConfig+0x98>
 80011e8:	4932      	ldr	r1, [pc, #200]	@ (80012b4 <uartSendConfig+0x160>)
 80011ea:	e002      	b.n	80011f2 <uartSendConfig+0x9e>
 80011ec:	4932      	ldr	r1, [pc, #200]	@ (80012b8 <uartSendConfig+0x164>)
 80011ee:	e000      	b.n	80011f2 <uartSendConfig+0x9e>
	snprintf(configMsg, sizeof(configMsg),
 80011f0:	4932      	ldr	r1, [pc, #200]	@ (80012bc <uartSendConfig+0x168>)
			(config->HwFlowCtl == UART_HWCONTROL_NONE) ? "None" :
 80011f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
	snprintf(configMsg, sizeof(configMsg),
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d017      	beq.n	8001232 <uartSendConfig+0xde>
			(config->HwFlowCtl == UART_HWCONTROL_RTS) ? "RTS" :
 8001202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001206:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001212:	d00c      	beq.n	800122e <uartSendConfig+0xda>
			(config->HwFlowCtl == UART_HWCONTROL_CTS) ? "CTS" : "RTS/CTS",
 8001214:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001218:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001224:	d101      	bne.n	800122a <uartSendConfig+0xd6>
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <uartSendConfig+0x16c>)
 8001228:	e004      	b.n	8001234 <uartSendConfig+0xe0>
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <uartSendConfig+0x170>)
 800122c:	e002      	b.n	8001234 <uartSendConfig+0xe0>
			(config->HwFlowCtl == UART_HWCONTROL_RTS) ? "RTS" :
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <uartSendConfig+0x174>)
 8001230:	e000      	b.n	8001234 <uartSendConfig+0xe0>
	snprintf(configMsg, sizeof(configMsg),
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <uartSendConfig+0x15c>)
			"OverSampling",
			(config->OverSampling == UART_OVERSAMPLING_16) ? "16" : "8");
 8001234:	f507 769c 	add.w	r6, r7, #312	@ 0x138
 8001238:	f5a6 769a 	sub.w	r6, r6, #308	@ 0x134
 800123c:	6836      	ldr	r6, [r6, #0]
 800123e:	69b6      	ldr	r6, [r6, #24]
	snprintf(configMsg, sizeof(configMsg),
 8001240:	2e00      	cmp	r6, #0
 8001242:	d101      	bne.n	8001248 <uartSendConfig+0xf4>
 8001244:	4e21      	ldr	r6, [pc, #132]	@ (80012cc <uartSendConfig+0x178>)
 8001246:	e000      	b.n	800124a <uartSendConfig+0xf6>
 8001248:	4e21      	ldr	r6, [pc, #132]	@ (80012d0 <uartSendConfig+0x17c>)
 800124a:	f107 0c0c 	add.w	ip, r7, #12
 800124e:	960c      	str	r6, [sp, #48]	@ 0x30
 8001250:	4e20      	ldr	r6, [pc, #128]	@ (80012d4 <uartSendConfig+0x180>)
 8001252:	960b      	str	r6, [sp, #44]	@ 0x2c
 8001254:	930a      	str	r3, [sp, #40]	@ 0x28
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <uartSendConfig+0x184>)
 8001258:	9309      	str	r3, [sp, #36]	@ 0x24
 800125a:	9108      	str	r1, [sp, #32]
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <uartSendConfig+0x188>)
 800125e:	9307      	str	r3, [sp, #28]
 8001260:	9206      	str	r2, [sp, #24]
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <uartSendConfig+0x18c>)
 8001264:	9305      	str	r3, [sp, #20]
 8001266:	9504      	str	r5, [sp, #16]
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <uartSendConfig+0x190>)
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	9402      	str	r4, [sp, #8]
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <uartSendConfig+0x194>)
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	9000      	str	r0, [sp, #0]
 8001274:	4b1d      	ldr	r3, [pc, #116]	@ (80012ec <uartSendConfig+0x198>)
 8001276:	4a1e      	ldr	r2, [pc, #120]	@ (80012f0 <uartSendConfig+0x19c>)
 8001278:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800127c:	4660      	mov	r0, ip
 800127e:	f003 fc6b 	bl	8004b58 <sniprintf>

	// Enviar mensaje
	uartSendString((uint8_t*) configMsg);
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f86a 	bl	8001360 <uartSendString>
}
 800128c:	bf00      	nop
 800128e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	08005628 	.word	0x08005628
 800129c:	08005630 	.word	0x08005630
 80012a0:	08005638 	.word	0x08005638
 80012a4:	08005640 	.word	0x08005640
 80012a8:	08005648 	.word	0x08005648
 80012ac:	08005650 	.word	0x08005650
 80012b0:	08005654 	.word	0x08005654
 80012b4:	0800565c 	.word	0x0800565c
 80012b8:	08005664 	.word	0x08005664
 80012bc:	0800566c 	.word	0x0800566c
 80012c0:	08005674 	.word	0x08005674
 80012c4:	08005678 	.word	0x08005678
 80012c8:	08005680 	.word	0x08005680
 80012cc:	08005684 	.word	0x08005684
 80012d0:	08005688 	.word	0x08005688
 80012d4:	08005768 	.word	0x08005768
 80012d8:	08005778 	.word	0x08005778
 80012dc:	08005784 	.word	0x08005784
 80012e0:	0800578c 	.word	0x0800578c
 80012e4:	08005794 	.word	0x08005794
 80012e8:	080057a0 	.word	0x080057a0
 80012ec:	0800568c 	.word	0x0800568c
 80012f0:	08005698 	.word	0x08005698

080012f4 <MX_USART2_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart2.Instance = USART2;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <MX_USART2_UART_Init+0x60>)
 80012fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 8001300:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001304:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800132a:	4809      	ldr	r0, [pc, #36]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 800132c:	f002 fbbe 	bl	8003aac <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001336:	f7ff facd 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */
	// Enviar el mensaje usando uartSendString
	uartSendConfig(&huart2.Init);
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <MX_USART2_UART_Init+0x64>)
 800133c:	f7ff ff0a 	bl	8001154 <uartSendConfig>
	// Inicia la recepción en modo interrupción
	    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	4906      	ldr	r1, [pc, #24]	@ (800135c <MX_USART2_UART_Init+0x68>)
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <MX_USART2_UART_Init+0x5c>)
 8001346:	f002 fc8c 	bl	8003c62 <HAL_UART_Receive_IT>
	/* USER CODE END USART3_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000138 	.word	0x20000138
 8001354:	40004400 	.word	0x40004400
 8001358:	2000013c 	.word	0x2000013c
 800135c:	20000180 	.word	0x20000180

08001360 <uartSendString>:
void uartSendString(uint8_t *pstring) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	uint16_t length = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	81fb      	strh	r3, [r7, #14]
	// Enviar la cadena hasta encontrar el fin de la cadena ('\0')
	while (pstring[length] != '\0') {
 800136c:	e00b      	b.n	8001386 <uartSendString+0x26>
		HAL_UART_Transmit(&huart2, &pstring[length], 1, HAL_MAX_DELAY);
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	18d1      	adds	r1, r2, r3
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	2201      	movs	r2, #1
 800137a:	4808      	ldr	r0, [pc, #32]	@ (800139c <uartSendString+0x3c>)
 800137c:	f002 fbe6 	bl	8003b4c <HAL_UART_Transmit>
		length++;
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	3301      	adds	r3, #1
 8001384:	81fb      	strh	r3, [r7, #14]
	while (pstring[length] != '\0') {
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ed      	bne.n	800136e <uartSendString+0xe>
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000138 	.word	0x20000138

080013a0 <HAL_UART_RxCpltCallback>:
		HAL_UART_Receive(&huart2, &pstring[length], 1, HAL_MAX_DELAY);
		length++;
	}
}
// Callback al recibir datos por UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <HAL_UART_RxCpltCallback+0x60>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d122      	bne.n	80013f8 <HAL_UART_RxCpltCallback+0x58>
        // Almacenar el byte recibido
        if (dataLength < UART_RX_BUFFER_SIZE - 1) {
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_UART_RxCpltCallback+0x64>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b62      	cmp	r3, #98	@ 0x62
 80013b8:	d819      	bhi.n	80013ee <HAL_UART_RxCpltCallback+0x4e>
            if (rxBuffer[0] == '\n' || rxBuffer[0] == '\r') {
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_UART_RxCpltCallback+0x68>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d003      	beq.n	80013ca <HAL_UART_RxCpltCallback+0x2a>
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_UART_RxCpltCallback+0x68>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b0d      	cmp	r3, #13
 80013c8:	d106      	bne.n	80013d8 <HAL_UART_RxCpltCallback+0x38>
                receivedData[dataLength] = '\0'; // Agregar fin de cadena
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_UART_RxCpltCallback+0x64>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_UART_RxCpltCallback+0x6c>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]
 80013d6:	e00a      	b.n	80013ee <HAL_UART_RxCpltCallback+0x4e>
            } else {
                receivedData[dataLength++] = rxBuffer[0];
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_UART_RxCpltCallback+0x64>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	b291      	uxth	r1, r2
 80013e0:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_UART_RxCpltCallback+0x64>)
 80013e2:	8011      	strh	r1, [r2, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_UART_RxCpltCallback+0x68>)
 80013e8:	7819      	ldrb	r1, [r3, #0]
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_UART_RxCpltCallback+0x6c>)
 80013ec:	5499      	strb	r1, [r3, r2]
            }
        }
        // Reinicia la recepción
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4905      	ldr	r1, [pc, #20]	@ (8001408 <HAL_UART_RxCpltCallback+0x68>)
 80013f2:	4807      	ldr	r0, [pc, #28]	@ (8001410 <HAL_UART_RxCpltCallback+0x70>)
 80013f4:	f002 fc35 	bl	8003c62 <HAL_UART_Receive_IT>
    }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40004400 	.word	0x40004400
 8001404:	20000248 	.word	0x20000248
 8001408:	20000180 	.word	0x20000180
 800140c:	200001e4 	.word	0x200001e4
 8001410:	20000138 	.word	0x20000138

08001414 <uartGetReceivedData>:


// Devuelve los datos recibidos
uint8_t *uartGetReceivedData(void) {
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
    receivedData[dataLength] = '\0'; // Agregar fin de cadena
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <uartGetReceivedData+0x24>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <uartGetReceivedData+0x28>)
 8001420:	2100      	movs	r1, #0
 8001422:	5499      	strb	r1, [r3, r2]
    dataLength = 0; // Reinicia la longitud
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <uartGetReceivedData+0x24>)
 8001426:	2200      	movs	r2, #0
 8001428:	801a      	strh	r2, [r3, #0]
    return receivedData;
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <uartGetReceivedData+0x28>)
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000248 	.word	0x20000248
 800143c:	200001e4 	.word	0x200001e4

08001440 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f023 030f 	bic.w	r3, r3, #15
 8001450:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f043 030c 	orr.w	r3, r3, #12
 800145e:	b2db      	uxtb	r3, r3
 8001460:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	b2db      	uxtb	r3, r3
 800146a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	f043 030c 	orr.w	r3, r3, #12
 8001472:	b2db      	uxtb	r3, r3
 8001474:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	b2db      	uxtb	r3, r3
 800147e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	2364      	movs	r3, #100	@ 0x64
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2304      	movs	r3, #4
 800148a:	214e      	movs	r1, #78	@ 0x4e
 800148c:	4803      	ldr	r0, [pc, #12]	@ (800149c <lcd_send_cmd+0x5c>)
 800148e:	f001 faa1 	bl	80029d4 <HAL_I2C_Master_Transmit>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000e4 	.word	0x200000e4

080014a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f043 030d 	orr.w	r3, r3, #13
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	f043 0309 	orr.w	r3, r3, #9
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	f043 030d 	orr.w	r3, r3, #13
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	f043 0309 	orr.w	r3, r3, #9
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	2364      	movs	r3, #100	@ 0x64
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2304      	movs	r3, #4
 80014ea:	214e      	movs	r1, #78	@ 0x4e
 80014ec:	4803      	ldr	r0, [pc, #12]	@ (80014fc <lcd_send_data+0x5c>)
 80014ee:	f001 fa71 	bl	80029d4 <HAL_I2C_Master_Transmit>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000e4 	.word	0x200000e4

08001500 <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f000 f81e 	bl	8001550 <lcd_put_cur>
	lcd_send_string(string);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f877 	bl	8001608 <lcd_send_string>
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <lcd_clear>:

void lcd_clear (void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001528:	2080      	movs	r0, #128	@ 0x80
 800152a:	f7ff ff89 	bl	8001440 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	e005      	b.n	8001540 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001534:	2020      	movs	r0, #32
 8001536:	f7ff ffb3 	bl	80014a0 <lcd_send_data>
	for (int i=0; i<70; i++)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3301      	adds	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b45      	cmp	r3, #69	@ 0x45
 8001544:	ddf6      	ble.n	8001534 <lcd_clear+0x12>
	}
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    switch (row)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <lcd_put_cur+0x18>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d005      	beq.n	8001572 <lcd_put_cur+0x22>
 8001566:	e009      	b.n	800157c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800156e:	603b      	str	r3, [r7, #0]
            break;
 8001570:	e004      	b.n	800157c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001578:	603b      	str	r3, [r7, #0]
            break;
 800157a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5d 	bl	8001440 <lcd_send_cmd>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lcd_init>:


void lcd_init (void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001592:	2032      	movs	r0, #50	@ 0x32
 8001594:	f000 f8c0 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001598:	2030      	movs	r0, #48	@ 0x30
 800159a:	f7ff ff51 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800159e:	2005      	movs	r0, #5
 80015a0:	f000 f8ba 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015a4:	2030      	movs	r0, #48	@ 0x30
 80015a6:	f7ff ff4b 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 f8b4 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x30);
 80015b0:	2030      	movs	r0, #48	@ 0x30
 80015b2:	f7ff ff45 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f000 f8ae 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80015bc:	2020      	movs	r0, #32
 80015be:	f7ff ff3f 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(10);
 80015c2:	200a      	movs	r0, #10
 80015c4:	f000 f8a8 	bl	8001718 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80015c8:	2028      	movs	r0, #40	@ 0x28
 80015ca:	f7ff ff39 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 f8a2 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80015d4:	2008      	movs	r0, #8
 80015d6:	f7ff ff33 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 f89c 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff ff2d 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f000 f896 	bl	8001718 <HAL_Delay>
	HAL_Delay(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 f893 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80015f2:	2006      	movs	r0, #6
 80015f4:	f7ff ff24 	bl	8001440 <lcd_send_cmd>
	HAL_Delay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f000 f88d 	bl	8001718 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80015fe:	200c      	movs	r0, #12
 8001600:	f7ff ff1e 	bl	8001440 <lcd_send_cmd>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001610:	e006      	b.n	8001620 <lcd_send_string+0x18>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff40 	bl	80014a0 <lcd_send_data>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f4      	bne.n	8001612 <lcd_send_string+0xa>
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 fddb 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff f944 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fdf3 	bl	8002282 <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 fdbb 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	2000024c 	.word	0x2000024c

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000024c 	.word	0x2000024c

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e033      	b.n	80017de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff f8e0 	bl	8000944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017a6:	f023 0302 	bic.w	r3, r3, #2
 80017aa:	f043 0202 	orr.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fb5a 	bl	8001e6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ce:	e001      	b.n	80017d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Start_IT+0x1a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e0bd      	b.n	800197e <HAL_ADC_Start_IT+0x196>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d018      	beq.n	800184a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001828:	4b58      	ldr	r3, [pc, #352]	@ (800198c <HAL_ADC_Start_IT+0x1a4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <HAL_ADC_Start_IT+0x1a8>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9a      	lsrs	r2, r3, #18
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	f040 8085 	bne.w	8001964 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001884:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001898:	d106      	bne.n	80018a8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f023 0206 	bic.w	r2, r3, #6
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80018a6:	e002      	b.n	80018ae <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b6:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <HAL_ADC_Start_IT+0x1ac>)
 80018b8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018c2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018d2:	f043 0320 	orr.w	r3, r3, #32
 80018d6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12a      	bne.n	800193a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001998 <HAL_ADC_Start_IT+0x1b0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d015      	beq.n	800191a <HAL_ADC_Start_IT+0x132>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2a      	ldr	r2, [pc, #168]	@ (800199c <HAL_ADC_Start_IT+0x1b4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_Start_IT+0x11c>
 80018f8:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_ADC_Start_IT+0x1ac>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00a      	beq.n	800191a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a25      	ldr	r2, [pc, #148]	@ (80019a0 <HAL_ADC_Start_IT+0x1b8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d136      	bne.n	800197c <HAL_ADC_Start_IT+0x194>
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_ADC_Start_IT+0x1ac>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d130      	bne.n	800197c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d129      	bne.n	800197c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	e020      	b.n	800197c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a16      	ldr	r2, [pc, #88]	@ (8001998 <HAL_ADC_Start_IT+0x1b0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d11b      	bne.n	800197c <HAL_ADC_Start_IT+0x194>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d114      	bne.n	800197c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	e00b      	b.n	800197c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f043 0210 	orr.w	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000
 8001990:	431bde83 	.word	0x431bde83
 8001994:	40012300 	.word	0x40012300
 8001998:	40012000 	.word	0x40012000
 800199c:	40012100 	.word	0x40012100
 80019a0:	40012200 	.word	0x40012200

080019a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d049      	beq.n	8001a6e <HAL_ADC_IRQHandler+0xca>
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d046      	beq.n	8001a6e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d12b      	bne.n	8001a5e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d127      	bne.n	8001a5e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d119      	bne.n	8001a5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0220 	bic.w	r2, r2, #32
 8001a38:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fb08 	bl	8001074 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0212 	mvn.w	r2, #18
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d057      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x190>
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d054      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d139      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d12b      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d124      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11d      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d119      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001afe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fa9d 	bl	8002064 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 020c 	mvn.w	r2, #12
 8001b32:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b42:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d017      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x1d6>
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d014      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10d      	bne.n	8001b7a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f837 	bl	8001bde <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0201 	mvn.w	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b88:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d015      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x218>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d012      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f043 0202 	orr.w	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0220 	mvn.w	r2, #32
 8001baa:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f820 	bl	8001bf2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f06f 0220 	mvn.w	r2, #32
 8001bba:	601a      	str	r2, [r3, #0]
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1c>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e113      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x244>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d925      	bls.n	8001c80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43da      	mvns	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	400a      	ands	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4403      	add	r3, r0
 8001c72:	3b1e      	subs	r3, #30
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	e022      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	2207      	movs	r2, #7
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6919      	ldr	r1, [r3, #16]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4403      	add	r3, r0
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d824      	bhi.n	8001d18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b05      	subs	r3, #5
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b05      	subs	r3, #5
 8001d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d16:	e04c      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d824      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b23      	subs	r3, #35	@ 0x23
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	400a      	ands	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b23      	subs	r3, #35	@ 0x23
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d68:	e023      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b41      	subs	r3, #65	@ 0x41
 8001d7c:	221f      	movs	r2, #31
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	400a      	ands	r2, r1
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b41      	subs	r3, #65	@ 0x41
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db2:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <HAL_ADC_ConfigChannel+0x250>)
 8001db4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a28      	ldr	r2, [pc, #160]	@ (8001e5c <HAL_ADC_ConfigChannel+0x254>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d10f      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d8>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d10b      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_ADC_ConfigChannel+0x254>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_ADC_ConfigChannel+0x258>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d003      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x1f4>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b11      	cmp	r3, #17
 8001dfa:	d122      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <HAL_ADC_ConfigChannel+0x258>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_ADC_ConfigChannel+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <HAL_ADC_ConfigChannel+0x260>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9a      	lsrs	r2, r3, #18
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	40012000 	.word	0x40012000
 8001e60:	10000012 	.word	0x10000012
 8001e64:	20000000 	.word	0x20000000
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e74:	4b79      	ldr	r3, [pc, #484]	@ (800205c <ADC_Init+0x1f0>)
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	4a58      	ldr	r2, [pc, #352]	@ (8002060 <ADC_Init+0x1f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e00f      	b.n	8001f6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0202 	bic.w	r2, r2, #2
 8001f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fa6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	035a      	lsls	r2, r3, #13
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e007      	b.n	8001fe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fde:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	051a      	lsls	r2, r3, #20
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002022:	025a      	lsls	r2, r3, #9
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	029a      	lsls	r2, r3, #10
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	0f000001 	.word	0x0f000001

08002064 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	@ (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	@ (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	@ (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff fa2a 	bl	8001700 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d008      	beq.n	80022cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2280      	movs	r2, #128	@ 0x80
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e052      	b.n	8002372 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0216 	bic.w	r2, r2, #22
 80022da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <HAL_DMA_Abort+0x62>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0208 	bic.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231c:	e013      	b.n	8002346 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231e:	f7ff f9ef 	bl	8001700 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b05      	cmp	r3, #5
 800232a:	d90c      	bls.n	8002346 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e015      	b.n	8002372 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e4      	bne.n	800231e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	223f      	movs	r2, #63	@ 0x3f
 800235a:	409a      	lsls	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d004      	beq.n	8002398 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2280      	movs	r2, #128	@ 0x80
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e00c      	b.n	80023b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2205      	movs	r2, #5
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e177      	b.n	80026cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8166 	bne.w	80026c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80c0 	beq.w	80026c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b66      	ldr	r3, [pc, #408]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a65      	ldr	r2, [pc, #404]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a61      	ldr	r2, [pc, #388]	@ (80026e8 <HAL_GPIO_Init+0x328>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a58      	ldr	r2, [pc, #352]	@ (80026ec <HAL_GPIO_Init+0x32c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d037      	beq.n	80025fe <HAL_GPIO_Init+0x23e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a57      	ldr	r2, [pc, #348]	@ (80026f0 <HAL_GPIO_Init+0x330>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d031      	beq.n	80025fa <HAL_GPIO_Init+0x23a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a56      	ldr	r2, [pc, #344]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x236>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a55      	ldr	r2, [pc, #340]	@ (80026f8 <HAL_GPIO_Init+0x338>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x232>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a54      	ldr	r2, [pc, #336]	@ (80026fc <HAL_GPIO_Init+0x33c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x22e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a53      	ldr	r2, [pc, #332]	@ (8002700 <HAL_GPIO_Init+0x340>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x22a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_GPIO_Init+0x344>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a51      	ldr	r2, [pc, #324]	@ (8002708 <HAL_GPIO_Init+0x348>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a50      	ldr	r2, [pc, #320]	@ (800270c <HAL_GPIO_Init+0x34c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002710 <HAL_GPIO_Init+0x350>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x21a>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e012      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025da:	230a      	movs	r3, #10
 80025dc:	e010      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025de:	2308      	movs	r3, #8
 80025e0:	e00e      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x240>
 80025fe:	2300      	movs	r3, #0
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002610:	4935      	ldr	r1, [pc, #212]	@ (80026e8 <HAL_GPIO_Init+0x328>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261e:	4b3d      	ldr	r3, [pc, #244]	@ (8002714 <HAL_GPIO_Init+0x354>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002642:	4a34      	ldr	r2, [pc, #208]	@ (8002714 <HAL_GPIO_Init+0x354>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002648:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <HAL_GPIO_Init+0x354>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800266c:	4a29      	ldr	r2, [pc, #164]	@ (8002714 <HAL_GPIO_Init+0x354>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_GPIO_Init+0x354>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002696:	4a1f      	ldr	r2, [pc, #124]	@ (8002714 <HAL_GPIO_Init+0x354>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <HAL_GPIO_Init+0x354>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <HAL_GPIO_Init+0x354>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f67f ae84 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40013800 	.word	0x40013800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	40020400 	.word	0x40020400
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020c00 	.word	0x40020c00
 80026fc:	40021000 	.word	0x40021000
 8002700:	40021400 	.word	0x40021400
 8002704:	40021800 	.word	0x40021800
 8002708:	40021c00 	.word	0x40021c00
 800270c:	40022000 	.word	0x40022000
 8002710:	40022400 	.word	0x40022400
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002734:	e003      	b.n	800273e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e12b      	b.n	80029b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe f932 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	@ 0x24
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b0:	f001 f954 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 80027b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a81      	ldr	r2, [pc, #516]	@ (80029c0 <HAL_I2C_Init+0x274>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d807      	bhi.n	80027d0 <HAL_I2C_Init+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a80      	ldr	r2, [pc, #512]	@ (80029c4 <HAL_I2C_Init+0x278>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e006      	b.n	80027de <HAL_I2C_Init+0x92>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a7d      	ldr	r2, [pc, #500]	@ (80029c8 <HAL_I2C_Init+0x27c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0e7      	b.n	80029b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a78      	ldr	r2, [pc, #480]	@ (80029cc <HAL_I2C_Init+0x280>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0c9b      	lsrs	r3, r3, #18
 80027f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a6a      	ldr	r2, [pc, #424]	@ (80029c0 <HAL_I2C_Init+0x274>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d802      	bhi.n	8002820 <HAL_I2C_Init+0xd4>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3301      	adds	r3, #1
 800281e:	e009      	b.n	8002834 <HAL_I2C_Init+0xe8>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	4a69      	ldr	r2, [pc, #420]	@ (80029d0 <HAL_I2C_Init+0x284>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	3301      	adds	r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002846:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	495c      	ldr	r1, [pc, #368]	@ (80029c0 <HAL_I2C_Init+0x274>)
 8002850:	428b      	cmp	r3, r1
 8002852:	d819      	bhi.n	8002888 <HAL_I2C_Init+0x13c>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e59      	subs	r1, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002868:	400b      	ands	r3, r1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_I2C_Init+0x138>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e59      	subs	r1, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fbb1 f3f3 	udiv	r3, r1, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	e051      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002884:	2304      	movs	r3, #4
 8002886:	e04f      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_I2C_Init+0x168>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e012      	b.n	80028da <HAL_I2C_Init+0x18e>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x196>
 80028de:	2301      	movs	r3, #1
 80028e0:	e022      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <HAL_I2C_Init+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e58      	subs	r0, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6809      	ldr	r1, [r1, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002956:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6911      	ldr	r1, [r2, #16]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	000186a0 	.word	0x000186a0
 80029c4:	001e847f 	.word	0x001e847f
 80029c8:	003d08ff 	.word	0x003d08ff
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7fe fe8a 	bl	8001700 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	f040 80e0 	bne.w	8002bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2319      	movs	r3, #25
 8002a02:	2201      	movs	r2, #1
 8002a04:	4970      	ldr	r1, [pc, #448]	@ (8002bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f964 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0d3      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x50>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0cc      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d007      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2221      	movs	r2, #33	@ 0x21
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2210      	movs	r2, #16
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	893a      	ldrh	r2, [r7, #8]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a50      	ldr	r2, [pc, #320]	@ (8002bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f89c 	bl	8002bd0 <I2C_MasterRequestWrite>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e08d      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab8:	e066      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	6a39      	ldr	r1, [r7, #32]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa22 	bl	8002f08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_I2C_Master_Transmit+0x188>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6a39      	ldr	r1, [r7, #32]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa19 	bl	8002f98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e01a      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d194      	bne.n	8002aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d006      	beq.n	8002bfa <I2C_MasterRequestWrite+0x2a>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d003      	beq.n	8002bfa <I2C_MasterRequestWrite+0x2a>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bf8:	d108      	bne.n	8002c0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e00b      	b.n	8002c24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	2b12      	cmp	r3, #18
 8002c12:	d107      	bne.n	8002c24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f84f 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4a:	d103      	bne.n	8002c54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e035      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c60:	d108      	bne.n	8002c74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	e01b      	b.n	8002cac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c74:	897b      	ldrh	r3, [r7, #10]
 8002c76:	11db      	asrs	r3, r3, #7
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f063 030f 	orn	r3, r3, #15
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	490e      	ldr	r1, [pc, #56]	@ (8002ccc <I2C_MasterRequestWrite+0xfc>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f898 	bl	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e010      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4907      	ldr	r1, [pc, #28]	@ (8002cd0 <I2C_MasterRequestWrite+0x100>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f888 	bl	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	00010008 	.word	0x00010008
 8002cd0:	00010002 	.word	0x00010002

08002cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	e048      	b.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d044      	beq.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe fd07 	bl	8001700 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d139      	bne.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10d      	bne.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	e00c      	b.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d116      	bne.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e023      	b.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10d      	bne.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	e00c      	b.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d093      	beq.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dd6:	e071      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de6:	d123      	bne.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e067      	b.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d041      	beq.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fe fc62 	bl	8001700 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d136      	bne.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10c      	bne.n	8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e00b      	b.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e021      	b.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10c      	bne.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e00b      	b.n	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f af6d 	bne.w	8002dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f886 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e034      	b.n	8002f90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d028      	beq.n	8002f80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe fbe7 	bl	8001700 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11d      	bne.n	8002f80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b80      	cmp	r3, #128	@ 0x80
 8002f50:	d016      	beq.n	8002f80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e007      	b.n	8002f90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	d1c3      	bne.n	8002f16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa4:	e034      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f83e 	bl	8003028 <I2C_IsAcknowledgeFailed>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e034      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d028      	beq.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fb9f 	bl	8001700 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11d      	bne.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d016      	beq.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e007      	b.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d1c3      	bne.n	8002fa6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303e:	d11b      	bne.n	8003078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d129      	bne.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	@ 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0210 	bic.w	r2, r2, #16
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	d12a      	bne.n	800316e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	@ 0x24
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b29a      	uxth	r2, r3
 8003144:	89fb      	ldrh	r3, [r7, #14]
 8003146:	4313      	orrs	r3, r2
 8003148:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	89fa      	ldrh	r2, [r7, #14]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e267      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d075      	beq.n	8003286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800319a:	4b88      	ldr	r3, [pc, #544]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b85      	ldr	r3, [pc, #532]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d112      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4b82      	ldr	r3, [pc, #520]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031be:	d10b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	4b7e      	ldr	r3, [pc, #504]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05b      	beq.n	8003284 <HAL_RCC_OscConfig+0x108>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d157      	bne.n	8003284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e242      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCC_OscConfig+0x74>
 80031e2:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a75      	ldr	r2, [pc, #468]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e01d      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b70      	ldr	r3, [pc, #448]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6f      	ldr	r2, [pc, #444]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b6d      	ldr	r3, [pc, #436]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6c      	ldr	r2, [pc, #432]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 8003214:	4b69      	ldr	r3, [pc, #420]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a68      	ldr	r2, [pc, #416]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b66      	ldr	r3, [pc, #408]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a65      	ldr	r2, [pc, #404]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800322a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fa64 	bl	8001700 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe fa60 	bl	8001700 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	@ 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e207      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b5b      	ldr	r3, [pc, #364]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0xc0>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fa50 	bl	8001700 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe fa4c 	bl	8001700 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	@ 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1f3      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003276:	4b51      	ldr	r3, [pc, #324]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0xe8>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d063      	beq.n	800335a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003292:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329e:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d11c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b44      	ldr	r3, [pc, #272]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d116      	bne.n	80032e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_RCC_OscConfig+0x152>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e1c7      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b3b      	ldr	r3, [pc, #236]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4937      	ldr	r1, [pc, #220]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	e03a      	b.n	800335a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ec:	4b34      	ldr	r3, [pc, #208]	@ (80033c0 <HAL_RCC_OscConfig+0x244>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fa05 	bl	8001700 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fe fa01 	bl	8001700 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1a8      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003318:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4925      	ldr	r1, [pc, #148]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	e015      	b.n	800335a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	4b24      	ldr	r3, [pc, #144]	@ (80033c0 <HAL_RCC_OscConfig+0x244>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe f9e4 	bl	8001700 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333c:	f7fe f9e0 	bl	8001700 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e187      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	4b1b      	ldr	r3, [pc, #108]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d036      	beq.n	80033d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_RCC_OscConfig+0x248>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe f9c4 	bl	8001700 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337c:	f7fe f9c0 	bl	8001700 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e167      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338e:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_OscConfig+0x240>)
 8003390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x200>
 800339a:	e01b      	b.n	80033d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <HAL_RCC_OscConfig+0x248>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe f9ad 	bl	8001700 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	e00e      	b.n	80033c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fe f9a9 	bl	8001700 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d907      	bls.n	80033c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e150      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	42470000 	.word	0x42470000
 80033c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	4b88      	ldr	r3, [pc, #544]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ea      	bne.n	80033aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8097 	beq.w	8003510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b81      	ldr	r3, [pc, #516]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	4a7c      	ldr	r2, [pc, #496]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	@ 0x40
 8003402:	4b7a      	ldr	r3, [pc, #488]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b77      	ldr	r3, [pc, #476]	@ (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b74      	ldr	r3, [pc, #464]	@ (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a73      	ldr	r2, [pc, #460]	@ (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe f969 	bl	8001700 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fe f965 	bl	8001700 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e10c      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b6a      	ldr	r3, [pc, #424]	@ (80035f0 <HAL_RCC_OscConfig+0x474>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x2ea>
 8003458:	4b64      	ldr	r3, [pc, #400]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	4a63      	ldr	r2, [pc, #396]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	@ 0x70
 8003464:	e01c      	b.n	80034a0 <HAL_RCC_OscConfig+0x324>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b05      	cmp	r3, #5
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x30c>
 800346e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003472:	4a5e      	ldr	r2, [pc, #376]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	@ 0x70
 800347a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6713      	str	r3, [r2, #112]	@ 0x70
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0x324>
 8003488:	4b58      	ldr	r3, [pc, #352]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	4a57      	ldr	r2, [pc, #348]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	@ 0x70
 8003494:	4b55      	ldr	r3, [pc, #340]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003498:	4a54      	ldr	r2, [pc, #336]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800349a:	f023 0304 	bic.w	r3, r3, #4
 800349e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d015      	beq.n	80034d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fe f92a 	bl	8001700 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe f926 	bl	8001700 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0cb      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	4b49      	ldr	r3, [pc, #292]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ee      	beq.n	80034b0 <HAL_RCC_OscConfig+0x334>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fe f914 	bl	8001700 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fe f910 	bl	8001700 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0b5      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ee      	bne.n	80034dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003504:	4b39      	ldr	r3, [pc, #228]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	4a38      	ldr	r2, [pc, #224]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a1 	beq.w	800365c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351a:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b08      	cmp	r3, #8
 8003524:	d05c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d141      	bne.n	80035b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <HAL_RCC_OscConfig+0x478>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe f8e4 	bl	8001700 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe f8e0 	bl	8001700 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e087      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	4b27      	ldr	r3, [pc, #156]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	491b      	ldr	r1, [pc, #108]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <HAL_RCC_OscConfig+0x478>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe f8b9 	bl	8001700 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe f8b5 	bl	8001700 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e05c      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x416>
 80035b0:	e054      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <HAL_RCC_OscConfig+0x478>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe f8a2 	bl	8001700 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe f89e 	bl	8001700 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e045      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <HAL_RCC_OscConfig+0x470>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
 80035de:	e03d      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e038      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x4ec>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d028      	beq.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d121      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11a      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800362e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	4293      	cmp	r3, r2
 8003632:	d111      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	3b01      	subs	r3, #1
 8003642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0cc      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b68      	ldr	r3, [pc, #416]	@ (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d90c      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b65      	ldr	r3, [pc, #404]	@ (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b63      	ldr	r3, [pc, #396]	@ (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b8      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c0:	4b59      	ldr	r3, [pc, #356]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a58      	ldr	r2, [pc, #352]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d8:	4b53      	ldr	r3, [pc, #332]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a52      	ldr	r2, [pc, #328]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b50      	ldr	r3, [pc, #320]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	494d      	ldr	r1, [pc, #308]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d044      	beq.n	800378c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b47      	ldr	r3, [pc, #284]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d119      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d003      	beq.n	800372a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003726:	2b03      	cmp	r3, #3
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b3f      	ldr	r3, [pc, #252]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e06f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373a:	4b3b      	ldr	r3, [pc, #236]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e067      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374a:	4b37      	ldr	r3, [pc, #220]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4934      	ldr	r1, [pc, #208]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	4313      	orrs	r3, r2
 800375a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fd ffd0 	bl	8001700 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	e00a      	b.n	800377a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003764:	f7fd ffcc 	bl	8001700 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e04f      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	4b2b      	ldr	r3, [pc, #172]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 020c 	and.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	429a      	cmp	r2, r3
 800378a:	d1eb      	bne.n	8003764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800378c:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d20c      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b22      	ldr	r3, [pc, #136]	@ (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b20      	ldr	r3, [pc, #128]	@ (8003824 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c0:	4b19      	ldr	r3, [pc, #100]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4916      	ldr	r1, [pc, #88]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037de:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	490e      	ldr	r1, [pc, #56]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037f2:	f000 f821 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490a      	ldr	r1, [pc, #40]	@ (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a09      	ldr	r2, [pc, #36]	@ (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd ff30 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00
 8003828:	40023800 	.word	0x40023800
 800382c:	080057ac 	.word	0x080057ac
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b094      	sub	sp, #80	@ 0x50
 800383e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003850:	4b79      	ldr	r3, [pc, #484]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	d00d      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x40>
 800385c:	2b08      	cmp	r3, #8
 800385e:	f200 80e1 	bhi.w	8003a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x34>
 8003866:	2b04      	cmp	r3, #4
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x3a>
 800386a:	e0db      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b73      	ldr	r3, [pc, #460]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003870:	e0db      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003872:	4b73      	ldr	r3, [pc, #460]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003874:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003876:	e0d8      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003878:	4b6f      	ldr	r3, [pc, #444]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003880:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003882:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003898:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800389a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a2:	2300      	movs	r3, #0
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038bc:	0150      	lsls	r0, r2, #5
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4621      	mov	r1, r4
 80038c4:	1a51      	subs	r1, r2, r1
 80038c6:	6139      	str	r1, [r7, #16]
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038dc:	4659      	mov	r1, fp
 80038de:	018b      	lsls	r3, r1, #6
 80038e0:	4651      	mov	r1, sl
 80038e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038e6:	4651      	mov	r1, sl
 80038e8:	018a      	lsls	r2, r1, #6
 80038ea:	4651      	mov	r1, sl
 80038ec:	ebb2 0801 	subs.w	r8, r2, r1
 80038f0:	4659      	mov	r1, fp
 80038f2:	eb63 0901 	sbc.w	r9, r3, r1
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	4690      	mov	r8, r2
 800390c:	4699      	mov	r9, r3
 800390e:	4623      	mov	r3, r4
 8003910:	eb18 0303 	adds.w	r3, r8, r3
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	462b      	mov	r3, r5
 8003918:	eb49 0303 	adc.w	r3, r9, r3
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800392a:	4629      	mov	r1, r5
 800392c:	024b      	lsls	r3, r1, #9
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003934:	4621      	mov	r1, r4
 8003936:	024a      	lsls	r2, r1, #9
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003948:	f7fc fcb2 	bl	80002b0 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	e058      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	2200      	movs	r2, #0
 800395e:	4618      	mov	r0, r3
 8003960:	4611      	mov	r1, r2
 8003962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
 800396c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	0159      	lsls	r1, r3, #5
 800397e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003982:	0150      	lsls	r0, r2, #5
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4641      	mov	r1, r8
 800398a:	ebb2 0a01 	subs.w	sl, r2, r1
 800398e:	4649      	mov	r1, r9
 8003990:	eb63 0b01 	sbc.w	fp, r3, r1
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039a8:	ebb2 040a 	subs.w	r4, r2, sl
 80039ac:	eb63 050b 	sbc.w	r5, r3, fp
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	00eb      	lsls	r3, r5, #3
 80039ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039be:	00e2      	lsls	r2, r4, #3
 80039c0:	4614      	mov	r4, r2
 80039c2:	461d      	mov	r5, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	18e3      	adds	r3, r4, r3
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	464b      	mov	r3, r9
 80039cc:	eb45 0303 	adc.w	r3, r5, r3
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039de:	4629      	mov	r1, r5
 80039e0:	028b      	lsls	r3, r1, #10
 80039e2:	4621      	mov	r1, r4
 80039e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039e8:	4621      	mov	r1, r4
 80039ea:	028a      	lsls	r2, r1, #10
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f2:	2200      	movs	r2, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	61fa      	str	r2, [r7, #28]
 80039f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fc:	f7fc fc58 	bl	80002b0 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4613      	mov	r3, r2
 8003a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	3301      	adds	r3, #1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a22:	e002      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3750      	adds	r7, #80	@ 0x50
 8003a30:	46bd      	mov	sp, r7
 8003a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200

08003a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b03      	ldr	r3, [pc, #12]	@ (8003a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff0 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0a9b      	lsrs	r3, r3, #10
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	@ (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	080057bc 	.word	0x080057bc

08003a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a88:	f7ff ffdc 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0b5b      	lsrs	r3, r3, #13
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4903      	ldr	r1, [pc, #12]	@ (8003aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	080057bc 	.word	0x080057bc

08003aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e042      	b.n	8003b44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fc ffca 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	@ 0x24
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fdbd 	bl	8004670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d175      	bne.n	8003c58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Transmit+0x2c>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e06e      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2221      	movs	r2, #33	@ 0x21
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fdb9 	bl	8001700 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_UART_Transmit+0x6c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e003      	b.n	8003bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc0:	e02e      	b.n	8003c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	@ 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fb1f 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e03a      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e007      	b.n	8003c12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cb      	bne.n	8003bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2140      	movs	r1, #64	@ 0x40
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 faeb 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e006      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d112      	bne.n	8003ca2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_UART_Receive_IT+0x26>
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e00b      	b.n	8003ca4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	461a      	mov	r2, r3
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fb12 	bl	80042c2 <UART_Start_Receive_IT>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	e000      	b.n	8003ca4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b0ba      	sub	sp, #232	@ 0xe8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fbf2 	bl	80044f4 <UART_Receive_IT>
      return;
 8003d10:	e25b      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80de 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80d1 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
 8003d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 81f2 	beq.w	80041c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fb7d 	bl	80044f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b40      	cmp	r3, #64	@ 0x40
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_UART_IRQHandler+0x17a>
 8003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04f      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa85 	bl	8004336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	d141      	bne.n	8003ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1d9      	bne.n	8003e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	4a7e      	ldr	r2, [pc, #504]	@ (800408c <HAL_UART_IRQHandler+0x3e0>)
 8003e94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fa6d 	bl	800237a <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00e      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f994 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00a      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f990 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f98c 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ed2:	e175      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	bf00      	nop
    return;
 8003ed6:	e173      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 814f 	bne.w	8004180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8148 	beq.w	8004180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8141 	beq.w	8004180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	f040 80b6 	bne.w	8004090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8145 	beq.w	80041c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f080 813e 	bcs.w	80041c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5a:	f000 8088 	beq.w	800406e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1d9      	bne.n	8003f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e1      	bne.n	8003faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800400a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800400c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800403c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004050:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004052:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004056:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800405e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e3      	bne.n	800402c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe f916 	bl	800229a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800407c:	b29b      	uxth	r3, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8b7 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408a:	e09b      	b.n	80041c4 <HAL_UART_IRQHandler+0x518>
 800408c:	080043fd 	.word	0x080043fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 808e 	beq.w	80041c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8089 	beq.w	80041c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040da:	647a      	str	r2, [r7, #68]	@ 0x44
 80040dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e3      	bne.n	80040b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	623b      	str	r3, [r7, #32]
   return(result);
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004112:	633a      	str	r2, [r7, #48]	@ 0x30
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e3      	bne.n	80040ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	60fb      	str	r3, [r7, #12]
   return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0310 	bic.w	r3, r3, #16
 800414a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004158:	61fa      	str	r2, [r7, #28]
 800415a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e3      	bne.n	8004134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f83d 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800417e:	e023      	b.n	80041c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <HAL_UART_IRQHandler+0x4f4>
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f943 	bl	8004424 <UART_Transmit_IT>
    return;
 800419e:	e014      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <HAL_UART_IRQHandler+0x51e>
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f983 	bl	80044c4 <UART_EndTransmit_IT>
    return;
 80041be:	e004      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
    return;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
      return;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
      return;
 80041c8:	bf00      	nop
  }
}
 80041ca:	37e8      	adds	r7, #232	@ 0xe8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	e03b      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d037      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fd fa69 	bl	8001700 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e03a      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b80      	cmp	r3, #128	@ 0x80
 8004256:	d020      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d01d      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d116      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f857 	bl	8004336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2208      	movs	r2, #8
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0b4      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2222      	movs	r2, #34	@ 0x22
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004306:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0220 	orr.w	r2, r2, #32
 8004326:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004336:	b480      	push	{r7}
 8004338:	b095      	sub	sp, #84	@ 0x54
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800435e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e5      	bne.n	800433e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	61fb      	str	r3, [r7, #28]
   return(result);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d119      	bne.n	80043e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0310 	bic.w	r3, r3, #16
 80043c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ce:	61ba      	str	r2, [r7, #24]
 80043d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e5      	bne.n	80043ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043f0:	bf00      	nop
 80043f2:	3754      	adds	r7, #84	@ 0x54
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fee4 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b21      	cmp	r3, #33	@ 0x21
 8004436:	d13e      	bne.n	80044b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004440:	d114      	bne.n	800446c <UART_Transmit_IT+0x48>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d110      	bne.n	800446c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]
 800446a:	e008      	b.n	800447e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6211      	str	r1, [r2, #32]
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4619      	mov	r1, r3
 800448c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fe73 	bl	80041d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08c      	sub	sp, #48	@ 0x30
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b22      	cmp	r3, #34	@ 0x22
 8004506:	f040 80ae 	bne.w	8004666 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	d117      	bne.n	8004544 <UART_Receive_IT+0x50>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d113      	bne.n	8004544 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	b29a      	uxth	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	629a      	str	r2, [r3, #40]	@ 0x28
 8004542:	e026      	b.n	8004592 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004556:	d007      	beq.n	8004568 <UART_Receive_IT+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <UART_Receive_IT+0x82>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e008      	b.n	8004588 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004582:	b2da      	uxtb	r2, r3
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4619      	mov	r1, r3
 80045a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d15d      	bne.n	8004662 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0220 	bic.w	r2, r2, #32
 80045b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d135      	bne.n	8004658 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	613b      	str	r3, [r7, #16]
   return(result);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004612:	623a      	str	r2, [r7, #32]
 8004614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b10      	cmp	r3, #16
 8004632:	d10a      	bne.n	800464a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff fdd1 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
 8004656:	e002      	b.n	800465e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fc fea1 	bl	80013a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e002      	b.n	8004668 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3730      	adds	r7, #48	@ 0x30
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004674:	b0c0      	sub	sp, #256	@ 0x100
 8004676:	af00      	add	r7, sp, #0
 8004678:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	68d9      	ldr	r1, [r3, #12]
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	ea40 0301 	orr.w	r3, r0, r1
 8004698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046c8:	f021 010c 	bic.w	r1, r1, #12
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046d6:	430b      	orrs	r3, r1
 80046d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ea:	6999      	ldr	r1, [r3, #24]
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	ea40 0301 	orr.w	r3, r0, r1
 80046f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <UART_SetConfig+0x2cc>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d005      	beq.n	8004710 <UART_SetConfig+0xa0>
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b8d      	ldr	r3, [pc, #564]	@ (8004940 <UART_SetConfig+0x2d0>)
 800470c:	429a      	cmp	r2, r3
 800470e:	d104      	bne.n	800471a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7ff f9b8 	bl	8003a84 <HAL_RCC_GetPCLK2Freq>
 8004714:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004718:	e003      	b.n	8004722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471a:	f7ff f99f 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800471e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472c:	f040 810c 	bne.w	8004948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004734:	2200      	movs	r2, #0
 8004736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800473a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800473e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	1891      	adds	r1, r2, r2
 8004748:	65b9      	str	r1, [r7, #88]	@ 0x58
 800474a:	415b      	adcs	r3, r3
 800474c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800474e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004752:	4621      	mov	r1, r4
 8004754:	eb12 0801 	adds.w	r8, r2, r1
 8004758:	4629      	mov	r1, r5
 800475a:	eb43 0901 	adc.w	r9, r3, r1
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004772:	4690      	mov	r8, r2
 8004774:	4699      	mov	r9, r3
 8004776:	4623      	mov	r3, r4
 8004778:	eb18 0303 	adds.w	r3, r8, r3
 800477c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004780:	462b      	mov	r3, r5
 8004782:	eb49 0303 	adc.w	r3, r9, r3
 8004786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004796:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800479a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800479e:	460b      	mov	r3, r1
 80047a0:	18db      	adds	r3, r3, r3
 80047a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047a4:	4613      	mov	r3, r2
 80047a6:	eb42 0303 	adc.w	r3, r2, r3
 80047aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047b4:	f7fb fd7c 	bl	80002b0 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4b61      	ldr	r3, [pc, #388]	@ (8004944 <UART_SetConfig+0x2d4>)
 80047be:	fba3 2302 	umull	r2, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	011c      	lsls	r4, r3, #4
 80047c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047d8:	4642      	mov	r2, r8
 80047da:	464b      	mov	r3, r9
 80047dc:	1891      	adds	r1, r2, r2
 80047de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047e0:	415b      	adcs	r3, r3
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047e8:	4641      	mov	r1, r8
 80047ea:	eb12 0a01 	adds.w	sl, r2, r1
 80047ee:	4649      	mov	r1, r9
 80047f0:	eb43 0b01 	adc.w	fp, r3, r1
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004808:	4692      	mov	sl, r2
 800480a:	469b      	mov	fp, r3
 800480c:	4643      	mov	r3, r8
 800480e:	eb1a 0303 	adds.w	r3, sl, r3
 8004812:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004816:	464b      	mov	r3, r9
 8004818:	eb4b 0303 	adc.w	r3, fp, r3
 800481c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800482c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004834:	460b      	mov	r3, r1
 8004836:	18db      	adds	r3, r3, r3
 8004838:	643b      	str	r3, [r7, #64]	@ 0x40
 800483a:	4613      	mov	r3, r2
 800483c:	eb42 0303 	adc.w	r3, r2, r3
 8004840:	647b      	str	r3, [r7, #68]	@ 0x44
 8004842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800484a:	f7fb fd31 	bl	80002b0 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4611      	mov	r1, r2
 8004854:	4b3b      	ldr	r3, [pc, #236]	@ (8004944 <UART_SetConfig+0x2d4>)
 8004856:	fba3 2301 	umull	r2, r3, r3, r1
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2264      	movs	r2, #100	@ 0x64
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	1acb      	subs	r3, r1, r3
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800486a:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <UART_SetConfig+0x2d4>)
 800486c:	fba3 2302 	umull	r2, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004878:	441c      	add	r4, r3
 800487a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487e:	2200      	movs	r2, #0
 8004880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004884:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800488c:	4642      	mov	r2, r8
 800488e:	464b      	mov	r3, r9
 8004890:	1891      	adds	r1, r2, r2
 8004892:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004894:	415b      	adcs	r3, r3
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800489c:	4641      	mov	r1, r8
 800489e:	1851      	adds	r1, r2, r1
 80048a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80048a2:	4649      	mov	r1, r9
 80048a4:	414b      	adcs	r3, r1
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048b4:	4659      	mov	r1, fp
 80048b6:	00cb      	lsls	r3, r1, #3
 80048b8:	4651      	mov	r1, sl
 80048ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048be:	4651      	mov	r1, sl
 80048c0:	00ca      	lsls	r2, r1, #3
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	4603      	mov	r3, r0
 80048c8:	4642      	mov	r2, r8
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048d0:	464b      	mov	r3, r9
 80048d2:	460a      	mov	r2, r1
 80048d4:	eb42 0303 	adc.w	r3, r2, r3
 80048d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048f0:	460b      	mov	r3, r1
 80048f2:	18db      	adds	r3, r3, r3
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f6:	4613      	mov	r3, r2
 80048f8:	eb42 0303 	adc.w	r3, r2, r3
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004906:	f7fb fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <UART_SetConfig+0x2d4>)
 8004910:	fba3 1302 	umull	r1, r3, r3, r2
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	2164      	movs	r1, #100	@ 0x64
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	3332      	adds	r3, #50	@ 0x32
 8004922:	4a08      	ldr	r2, [pc, #32]	@ (8004944 <UART_SetConfig+0x2d4>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	f003 0207 	and.w	r2, r3, #7
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4422      	add	r2, r4
 8004936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004938:	e106      	b.n	8004b48 <UART_SetConfig+0x4d8>
 800493a:	bf00      	nop
 800493c:	40011000 	.word	0x40011000
 8004940:	40011400 	.word	0x40011400
 8004944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004952:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800495a:	4642      	mov	r2, r8
 800495c:	464b      	mov	r3, r9
 800495e:	1891      	adds	r1, r2, r2
 8004960:	6239      	str	r1, [r7, #32]
 8004962:	415b      	adcs	r3, r3
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
 8004966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496a:	4641      	mov	r1, r8
 800496c:	1854      	adds	r4, r2, r1
 800496e:	4649      	mov	r1, r9
 8004970:	eb43 0501 	adc.w	r5, r3, r1
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	00eb      	lsls	r3, r5, #3
 800497e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004982:	00e2      	lsls	r2, r4, #3
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	4643      	mov	r3, r8
 800498a:	18e3      	adds	r3, r4, r3
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004990:	464b      	mov	r3, r9
 8004992:	eb45 0303 	adc.w	r3, r5, r3
 8004996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049b6:	4629      	mov	r1, r5
 80049b8:	008b      	lsls	r3, r1, #2
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c0:	4621      	mov	r1, r4
 80049c2:	008a      	lsls	r2, r1, #2
 80049c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049c8:	f7fb fc72 	bl	80002b0 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4b60      	ldr	r3, [pc, #384]	@ (8004b54 <UART_SetConfig+0x4e4>)
 80049d2:	fba3 2302 	umull	r2, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	011c      	lsls	r4, r3, #4
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	61b9      	str	r1, [r7, #24]
 80049f4:	415b      	adcs	r3, r3
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fc:	4641      	mov	r1, r8
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	6139      	str	r1, [r7, #16]
 8004a02:	4649      	mov	r1, r9
 8004a04:	414b      	adcs	r3, r1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a14:	4659      	mov	r1, fp
 8004a16:	00cb      	lsls	r3, r1, #3
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1e:	4651      	mov	r1, sl
 8004a20:	00ca      	lsls	r2, r1, #3
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a30:	464b      	mov	r3, r9
 8004a32:	460a      	mov	r2, r1
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a54:	4649      	mov	r1, r9
 8004a56:	008b      	lsls	r3, r1, #2
 8004a58:	4641      	mov	r1, r8
 8004a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a5e:	4641      	mov	r1, r8
 8004a60:	008a      	lsls	r2, r1, #2
 8004a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a66:	f7fb fc23 	bl	80002b0 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4b38      	ldr	r3, [pc, #224]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004a72:	fba3 2301 	umull	r2, r3, r3, r1
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2264      	movs	r2, #100	@ 0x64
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	1acb      	subs	r3, r1, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	3332      	adds	r3, #50	@ 0x32
 8004a84:	4a33      	ldr	r2, [pc, #204]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a90:	441c      	add	r4, r3
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	1851      	adds	r1, r2, r1
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	414b      	adcs	r3, r1
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	00cb      	lsls	r3, r1, #3
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	00ca      	lsls	r2, r1, #3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	4642      	mov	r2, r8
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	eb42 0303 	adc.w	r3, r2, r3
 8004aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004af6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b04:	4649      	mov	r1, r9
 8004b06:	008b      	lsls	r3, r1, #2
 8004b08:	4641      	mov	r1, r8
 8004b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0e:	4641      	mov	r1, r8
 8004b10:	008a      	lsls	r2, r1, #2
 8004b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b16:	f7fb fbcb 	bl	80002b0 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	@ 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	3332      	adds	r3, #50	@ 0x32
 8004b32:	4a08      	ldr	r2, [pc, #32]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4422      	add	r2, r4
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b54:	51eb851f 	.word	0x51eb851f

08004b58 <sniprintf>:
 8004b58:	b40c      	push	{r2, r3}
 8004b5a:	b530      	push	{r4, r5, lr}
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <sniprintf+0x64>)
 8004b5e:	1e0c      	subs	r4, r1, #0
 8004b60:	681d      	ldr	r5, [r3, #0]
 8004b62:	b09d      	sub	sp, #116	@ 0x74
 8004b64:	da08      	bge.n	8004b78 <sniprintf+0x20>
 8004b66:	238b      	movs	r3, #139	@ 0x8b
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	b01d      	add	sp, #116	@ 0x74
 8004b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b74:	b002      	add	sp, #8
 8004b76:	4770      	bx	lr
 8004b78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004b7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b80:	bf14      	ite	ne
 8004b82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b86:	4623      	moveq	r3, r4
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	9307      	str	r3, [sp, #28]
 8004b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b90:	9002      	str	r0, [sp, #8]
 8004b92:	9006      	str	r0, [sp, #24]
 8004b94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004b9a:	ab21      	add	r3, sp, #132	@ 0x84
 8004b9c:	a902      	add	r1, sp, #8
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	f000 f9b5 	bl	8004f10 <_svfiprintf_r>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	bfbc      	itt	lt
 8004baa:	238b      	movlt	r3, #139	@ 0x8b
 8004bac:	602b      	strlt	r3, [r5, #0]
 8004bae:	2c00      	cmp	r4, #0
 8004bb0:	d0dd      	beq.n	8004b6e <sniprintf+0x16>
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e7d9      	b.n	8004b6e <sniprintf+0x16>
 8004bba:	bf00      	nop
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <siprintf>:
 8004bc0:	b40e      	push	{r1, r2, r3}
 8004bc2:	b500      	push	{lr}
 8004bc4:	b09c      	sub	sp, #112	@ 0x70
 8004bc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bc8:	9002      	str	r0, [sp, #8]
 8004bca:	9006      	str	r0, [sp, #24]
 8004bcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bd0:	4809      	ldr	r0, [pc, #36]	@ (8004bf8 <siprintf+0x38>)
 8004bd2:	9107      	str	r1, [sp, #28]
 8004bd4:	9104      	str	r1, [sp, #16]
 8004bd6:	4909      	ldr	r1, [pc, #36]	@ (8004bfc <siprintf+0x3c>)
 8004bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	6800      	ldr	r0, [r0, #0]
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	a902      	add	r1, sp, #8
 8004be4:	f000 f994 	bl	8004f10 <_svfiprintf_r>
 8004be8:	9b02      	ldr	r3, [sp, #8]
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	b01c      	add	sp, #112	@ 0x70
 8004bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf4:	b003      	add	sp, #12
 8004bf6:	4770      	bx	lr
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	ffff0208 	.word	0xffff0208

08004c00 <memset>:
 8004c00:	4402      	add	r2, r0
 8004c02:	4603      	mov	r3, r0
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d100      	bne.n	8004c0a <memset+0xa>
 8004c08:	4770      	bx	lr
 8004c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0e:	e7f9      	b.n	8004c04 <memset+0x4>

08004c10 <__errno>:
 8004c10:	4b01      	ldr	r3, [pc, #4]	@ (8004c18 <__errno+0x8>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	@ (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2600      	movs	r6, #0
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 fc66 	bl	8005500 <_init>
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2600      	movs	r6, #0
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08005800 	.word	0x08005800
 8004c58:	08005800 	.word	0x08005800
 8004c5c:	08005800 	.word	0x08005800
 8004c60:	08005804 	.word	0x08005804

08004c64 <__retarget_lock_acquire_recursive>:
 8004c64:	4770      	bx	lr

08004c66 <__retarget_lock_release_recursive>:
 8004c66:	4770      	bx	lr

08004c68 <_free_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d041      	beq.n	8004cf4 <_free_r+0x8c>
 8004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c74:	1f0c      	subs	r4, r1, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	18e4      	addlt	r4, r4, r3
 8004c7c:	f000 f8e0 	bl	8004e40 <__malloc_lock>
 8004c80:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf8 <_free_r+0x90>)
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	b933      	cbnz	r3, 8004c94 <_free_r+0x2c>
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	6014      	str	r4, [r2, #0]
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c90:	f000 b8dc 	b.w	8004e4c <__malloc_unlock>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d908      	bls.n	8004caa <_free_r+0x42>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	1821      	adds	r1, r4, r0
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf01      	itttt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	1809      	addeq	r1, r1, r0
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	e7ed      	b.n	8004c86 <_free_r+0x1e>
 8004caa:	461a      	mov	r2, r3
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b10b      	cbz	r3, 8004cb4 <_free_r+0x4c>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d9fa      	bls.n	8004caa <_free_r+0x42>
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	1850      	adds	r0, r2, r1
 8004cb8:	42a0      	cmp	r0, r4
 8004cba:	d10b      	bne.n	8004cd4 <_free_r+0x6c>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	1850      	adds	r0, r2, r1
 8004cc2:	4283      	cmp	r3, r0
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	d1e0      	bne.n	8004c8a <_free_r+0x22>
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	6053      	str	r3, [r2, #4]
 8004cce:	4408      	add	r0, r1
 8004cd0:	6010      	str	r0, [r2, #0]
 8004cd2:	e7da      	b.n	8004c8a <_free_r+0x22>
 8004cd4:	d902      	bls.n	8004cdc <_free_r+0x74>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	e7d6      	b.n	8004c8a <_free_r+0x22>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	1821      	adds	r1, r4, r0
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf04      	itt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	6063      	str	r3, [r4, #4]
 8004cea:	bf04      	itt	eq
 8004cec:	1809      	addeq	r1, r1, r0
 8004cee:	6021      	streq	r1, [r4, #0]
 8004cf0:	6054      	str	r4, [r2, #4]
 8004cf2:	e7ca      	b.n	8004c8a <_free_r+0x22>
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000394 	.word	0x20000394

08004cfc <sbrk_aligned>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8004d3c <sbrk_aligned+0x40>)
 8004d00:	460c      	mov	r4, r1
 8004d02:	6831      	ldr	r1, [r6, #0]
 8004d04:	4605      	mov	r5, r0
 8004d06:	b911      	cbnz	r1, 8004d0e <sbrk_aligned+0x12>
 8004d08:	f000 fba6 	bl	8005458 <_sbrk_r>
 8004d0c:	6030      	str	r0, [r6, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fba1 	bl	8005458 <_sbrk_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d103      	bne.n	8004d22 <sbrk_aligned+0x26>
 8004d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d1e:	4620      	mov	r0, r4
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	1cc4      	adds	r4, r0, #3
 8004d24:	f024 0403 	bic.w	r4, r4, #3
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d0f8      	beq.n	8004d1e <sbrk_aligned+0x22>
 8004d2c:	1a21      	subs	r1, r4, r0
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fb92 	bl	8005458 <_sbrk_r>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d1f2      	bne.n	8004d1e <sbrk_aligned+0x22>
 8004d38:	e7ef      	b.n	8004d1a <sbrk_aligned+0x1e>
 8004d3a:	bf00      	nop
 8004d3c:	20000390 	.word	0x20000390

08004d40 <_malloc_r>:
 8004d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d44:	1ccd      	adds	r5, r1, #3
 8004d46:	f025 0503 	bic.w	r5, r5, #3
 8004d4a:	3508      	adds	r5, #8
 8004d4c:	2d0c      	cmp	r5, #12
 8004d4e:	bf38      	it	cc
 8004d50:	250c      	movcc	r5, #12
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	4606      	mov	r6, r0
 8004d56:	db01      	blt.n	8004d5c <_malloc_r+0x1c>
 8004d58:	42a9      	cmp	r1, r5
 8004d5a:	d904      	bls.n	8004d66 <_malloc_r+0x26>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	2000      	movs	r0, #0
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e3c <_malloc_r+0xfc>
 8004d6a:	f000 f869 	bl	8004e40 <__malloc_lock>
 8004d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d72:	461c      	mov	r4, r3
 8004d74:	bb44      	cbnz	r4, 8004dc8 <_malloc_r+0x88>
 8004d76:	4629      	mov	r1, r5
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7ff ffbf 	bl	8004cfc <sbrk_aligned>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	4604      	mov	r4, r0
 8004d82:	d158      	bne.n	8004e36 <_malloc_r+0xf6>
 8004d84:	f8d8 4000 	ldr.w	r4, [r8]
 8004d88:	4627      	mov	r7, r4
 8004d8a:	2f00      	cmp	r7, #0
 8004d8c:	d143      	bne.n	8004e16 <_malloc_r+0xd6>
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d04b      	beq.n	8004e2a <_malloc_r+0xea>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4639      	mov	r1, r7
 8004d96:	4630      	mov	r0, r6
 8004d98:	eb04 0903 	add.w	r9, r4, r3
 8004d9c:	f000 fb5c 	bl	8005458 <_sbrk_r>
 8004da0:	4581      	cmp	r9, r0
 8004da2:	d142      	bne.n	8004e2a <_malloc_r+0xea>
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	1a6d      	subs	r5, r5, r1
 8004da8:	4629      	mov	r1, r5
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7ff ffa6 	bl	8004cfc <sbrk_aligned>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d03a      	beq.n	8004e2a <_malloc_r+0xea>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	442b      	add	r3, r5
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	f8d8 3000 	ldr.w	r3, [r8]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	bb62      	cbnz	r2, 8004e1c <_malloc_r+0xdc>
 8004dc2:	f8c8 7000 	str.w	r7, [r8]
 8004dc6:	e00f      	b.n	8004de8 <_malloc_r+0xa8>
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	1b52      	subs	r2, r2, r5
 8004dcc:	d420      	bmi.n	8004e10 <_malloc_r+0xd0>
 8004dce:	2a0b      	cmp	r2, #11
 8004dd0:	d917      	bls.n	8004e02 <_malloc_r+0xc2>
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	6025      	str	r5, [r4, #0]
 8004dd8:	bf18      	it	ne
 8004dda:	6059      	strne	r1, [r3, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	bf08      	it	eq
 8004de0:	f8c8 1000 	streq.w	r1, [r8]
 8004de4:	5162      	str	r2, [r4, r5]
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	4630      	mov	r0, r6
 8004dea:	f000 f82f 	bl	8004e4c <__malloc_unlock>
 8004dee:	f104 000b 	add.w	r0, r4, #11
 8004df2:	1d23      	adds	r3, r4, #4
 8004df4:	f020 0007 	bic.w	r0, r0, #7
 8004df8:	1ac2      	subs	r2, r0, r3
 8004dfa:	bf1c      	itt	ne
 8004dfc:	1a1b      	subne	r3, r3, r0
 8004dfe:	50a3      	strne	r3, [r4, r2]
 8004e00:	e7af      	b.n	8004d62 <_malloc_r+0x22>
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	bf0c      	ite	eq
 8004e08:	f8c8 2000 	streq.w	r2, [r8]
 8004e0c:	605a      	strne	r2, [r3, #4]
 8004e0e:	e7eb      	b.n	8004de8 <_malloc_r+0xa8>
 8004e10:	4623      	mov	r3, r4
 8004e12:	6864      	ldr	r4, [r4, #4]
 8004e14:	e7ae      	b.n	8004d74 <_malloc_r+0x34>
 8004e16:	463c      	mov	r4, r7
 8004e18:	687f      	ldr	r7, [r7, #4]
 8004e1a:	e7b6      	b.n	8004d8a <_malloc_r+0x4a>
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	42a3      	cmp	r3, r4
 8004e22:	d1fb      	bne.n	8004e1c <_malloc_r+0xdc>
 8004e24:	2300      	movs	r3, #0
 8004e26:	6053      	str	r3, [r2, #4]
 8004e28:	e7de      	b.n	8004de8 <_malloc_r+0xa8>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 f80c 	bl	8004e4c <__malloc_unlock>
 8004e34:	e794      	b.n	8004d60 <_malloc_r+0x20>
 8004e36:	6005      	str	r5, [r0, #0]
 8004e38:	e7d6      	b.n	8004de8 <_malloc_r+0xa8>
 8004e3a:	bf00      	nop
 8004e3c:	20000394 	.word	0x20000394

08004e40 <__malloc_lock>:
 8004e40:	4801      	ldr	r0, [pc, #4]	@ (8004e48 <__malloc_lock+0x8>)
 8004e42:	f7ff bf0f 	b.w	8004c64 <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	2000038c 	.word	0x2000038c

08004e4c <__malloc_unlock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__malloc_unlock+0x8>)
 8004e4e:	f7ff bf0a 	b.w	8004c66 <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	2000038c 	.word	0x2000038c

08004e58 <__ssputs_r>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	688e      	ldr	r6, [r1, #8]
 8004e5e:	461f      	mov	r7, r3
 8004e60:	42be      	cmp	r6, r7
 8004e62:	680b      	ldr	r3, [r1, #0]
 8004e64:	4682      	mov	sl, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4690      	mov	r8, r2
 8004e6a:	d82d      	bhi.n	8004ec8 <__ssputs_r+0x70>
 8004e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e74:	d026      	beq.n	8004ec4 <__ssputs_r+0x6c>
 8004e76:	6965      	ldr	r5, [r4, #20]
 8004e78:	6909      	ldr	r1, [r1, #16]
 8004e7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e7e:	eba3 0901 	sub.w	r9, r3, r1
 8004e82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e86:	1c7b      	adds	r3, r7, #1
 8004e88:	444b      	add	r3, r9
 8004e8a:	106d      	asrs	r5, r5, #1
 8004e8c:	429d      	cmp	r5, r3
 8004e8e:	bf38      	it	cc
 8004e90:	461d      	movcc	r5, r3
 8004e92:	0553      	lsls	r3, r2, #21
 8004e94:	d527      	bpl.n	8004ee6 <__ssputs_r+0x8e>
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7ff ff52 	bl	8004d40 <_malloc_r>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	b360      	cbz	r0, 8004efa <__ssputs_r+0xa2>
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	464a      	mov	r2, r9
 8004ea4:	f000 fae8 	bl	8005478 <memcpy>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	6126      	str	r6, [r4, #16]
 8004eb6:	6165      	str	r5, [r4, #20]
 8004eb8:	444e      	add	r6, r9
 8004eba:	eba5 0509 	sub.w	r5, r5, r9
 8004ebe:	6026      	str	r6, [r4, #0]
 8004ec0:	60a5      	str	r5, [r4, #8]
 8004ec2:	463e      	mov	r6, r7
 8004ec4:	42be      	cmp	r6, r7
 8004ec6:	d900      	bls.n	8004eca <__ssputs_r+0x72>
 8004ec8:	463e      	mov	r6, r7
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4641      	mov	r1, r8
 8004ed0:	f000 faa8 	bl	8005424 <memmove>
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	1b9b      	subs	r3, r3, r6
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4433      	add	r3, r6
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	f000 fad4 	bl	8005494 <_realloc_r>
 8004eec:	4606      	mov	r6, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d1e0      	bne.n	8004eb4 <__ssputs_r+0x5c>
 8004ef2:	6921      	ldr	r1, [r4, #16]
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	f7ff feb7 	bl	8004c68 <_free_r>
 8004efa:	230c      	movs	r3, #12
 8004efc:	f8ca 3000 	str.w	r3, [sl]
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e7e9      	b.n	8004ee2 <__ssputs_r+0x8a>
	...

08004f10 <_svfiprintf_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	4698      	mov	r8, r3
 8004f16:	898b      	ldrh	r3, [r1, #12]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	b09d      	sub	sp, #116	@ 0x74
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	4614      	mov	r4, r2
 8004f22:	d510      	bpl.n	8004f46 <_svfiprintf_r+0x36>
 8004f24:	690b      	ldr	r3, [r1, #16]
 8004f26:	b973      	cbnz	r3, 8004f46 <_svfiprintf_r+0x36>
 8004f28:	2140      	movs	r1, #64	@ 0x40
 8004f2a:	f7ff ff09 	bl	8004d40 <_malloc_r>
 8004f2e:	6028      	str	r0, [r5, #0]
 8004f30:	6128      	str	r0, [r5, #16]
 8004f32:	b930      	cbnz	r0, 8004f42 <_svfiprintf_r+0x32>
 8004f34:	230c      	movs	r3, #12
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b01d      	add	sp, #116	@ 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	2340      	movs	r3, #64	@ 0x40
 8004f44:	616b      	str	r3, [r5, #20]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f54:	2330      	movs	r3, #48	@ 0x30
 8004f56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050f4 <_svfiprintf_r+0x1e4>
 8004f5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f5e:	f04f 0901 	mov.w	r9, #1
 8004f62:	4623      	mov	r3, r4
 8004f64:	469a      	mov	sl, r3
 8004f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6a:	b10a      	cbz	r2, 8004f70 <_svfiprintf_r+0x60>
 8004f6c:	2a25      	cmp	r2, #37	@ 0x25
 8004f6e:	d1f9      	bne.n	8004f64 <_svfiprintf_r+0x54>
 8004f70:	ebba 0b04 	subs.w	fp, sl, r4
 8004f74:	d00b      	beq.n	8004f8e <_svfiprintf_r+0x7e>
 8004f76:	465b      	mov	r3, fp
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f7ff ff6b 	bl	8004e58 <__ssputs_r>
 8004f82:	3001      	adds	r0, #1
 8004f84:	f000 80a7 	beq.w	80050d6 <_svfiprintf_r+0x1c6>
 8004f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f8a:	445a      	add	r2, fp
 8004f8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 809f 	beq.w	80050d6 <_svfiprintf_r+0x1c6>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa2:	f10a 0a01 	add.w	sl, sl, #1
 8004fa6:	9304      	str	r3, [sp, #16]
 8004fa8:	9307      	str	r3, [sp, #28]
 8004faa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fb0:	4654      	mov	r4, sl
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	484e      	ldr	r0, [pc, #312]	@ (80050f4 <_svfiprintf_r+0x1e4>)
 8004fba:	f7fb f929 	bl	8000210 <memchr>
 8004fbe:	9a04      	ldr	r2, [sp, #16]
 8004fc0:	b9d8      	cbnz	r0, 8004ffa <_svfiprintf_r+0xea>
 8004fc2:	06d0      	lsls	r0, r2, #27
 8004fc4:	bf44      	itt	mi
 8004fc6:	2320      	movmi	r3, #32
 8004fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fcc:	0711      	lsls	r1, r2, #28
 8004fce:	bf44      	itt	mi
 8004fd0:	232b      	movmi	r3, #43	@ 0x2b
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fdc:	d015      	beq.n	800500a <_svfiprintf_r+0xfa>
 8004fde:	9a07      	ldr	r2, [sp, #28]
 8004fe0:	4654      	mov	r4, sl
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f04f 0c0a 	mov.w	ip, #10
 8004fe8:	4621      	mov	r1, r4
 8004fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fee:	3b30      	subs	r3, #48	@ 0x30
 8004ff0:	2b09      	cmp	r3, #9
 8004ff2:	d94b      	bls.n	800508c <_svfiprintf_r+0x17c>
 8004ff4:	b1b0      	cbz	r0, 8005024 <_svfiprintf_r+0x114>
 8004ff6:	9207      	str	r2, [sp, #28]
 8004ff8:	e014      	b.n	8005024 <_svfiprintf_r+0x114>
 8004ffa:	eba0 0308 	sub.w	r3, r0, r8
 8004ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8005002:	4313      	orrs	r3, r2
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	46a2      	mov	sl, r4
 8005008:	e7d2      	b.n	8004fb0 <_svfiprintf_r+0xa0>
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	1d19      	adds	r1, r3, #4
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	9103      	str	r1, [sp, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfbb      	ittet	lt
 8005016:	425b      	neglt	r3, r3
 8005018:	f042 0202 	orrlt.w	r2, r2, #2
 800501c:	9307      	strge	r3, [sp, #28]
 800501e:	9307      	strlt	r3, [sp, #28]
 8005020:	bfb8      	it	lt
 8005022:	9204      	strlt	r2, [sp, #16]
 8005024:	7823      	ldrb	r3, [r4, #0]
 8005026:	2b2e      	cmp	r3, #46	@ 0x2e
 8005028:	d10a      	bne.n	8005040 <_svfiprintf_r+0x130>
 800502a:	7863      	ldrb	r3, [r4, #1]
 800502c:	2b2a      	cmp	r3, #42	@ 0x2a
 800502e:	d132      	bne.n	8005096 <_svfiprintf_r+0x186>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9203      	str	r2, [sp, #12]
 8005038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800503c:	3402      	adds	r4, #2
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005104 <_svfiprintf_r+0x1f4>
 8005044:	7821      	ldrb	r1, [r4, #0]
 8005046:	2203      	movs	r2, #3
 8005048:	4650      	mov	r0, sl
 800504a:	f7fb f8e1 	bl	8000210 <memchr>
 800504e:	b138      	cbz	r0, 8005060 <_svfiprintf_r+0x150>
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	eba0 000a 	sub.w	r0, r0, sl
 8005056:	2240      	movs	r2, #64	@ 0x40
 8005058:	4082      	lsls	r2, r0
 800505a:	4313      	orrs	r3, r2
 800505c:	3401      	adds	r4, #1
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005064:	4824      	ldr	r0, [pc, #144]	@ (80050f8 <_svfiprintf_r+0x1e8>)
 8005066:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800506a:	2206      	movs	r2, #6
 800506c:	f7fb f8d0 	bl	8000210 <memchr>
 8005070:	2800      	cmp	r0, #0
 8005072:	d036      	beq.n	80050e2 <_svfiprintf_r+0x1d2>
 8005074:	4b21      	ldr	r3, [pc, #132]	@ (80050fc <_svfiprintf_r+0x1ec>)
 8005076:	bb1b      	cbnz	r3, 80050c0 <_svfiprintf_r+0x1b0>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	3307      	adds	r3, #7
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005086:	4433      	add	r3, r6
 8005088:	9309      	str	r3, [sp, #36]	@ 0x24
 800508a:	e76a      	b.n	8004f62 <_svfiprintf_r+0x52>
 800508c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005090:	460c      	mov	r4, r1
 8005092:	2001      	movs	r0, #1
 8005094:	e7a8      	b.n	8004fe8 <_svfiprintf_r+0xd8>
 8005096:	2300      	movs	r3, #0
 8005098:	3401      	adds	r4, #1
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4619      	mov	r1, r3
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4620      	mov	r0, r4
 80050a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a8:	3a30      	subs	r2, #48	@ 0x30
 80050aa:	2a09      	cmp	r2, #9
 80050ac:	d903      	bls.n	80050b6 <_svfiprintf_r+0x1a6>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0c6      	beq.n	8005040 <_svfiprintf_r+0x130>
 80050b2:	9105      	str	r1, [sp, #20]
 80050b4:	e7c4      	b.n	8005040 <_svfiprintf_r+0x130>
 80050b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ba:	4604      	mov	r4, r0
 80050bc:	2301      	movs	r3, #1
 80050be:	e7f0      	b.n	80050a2 <_svfiprintf_r+0x192>
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <_svfiprintf_r+0x1f0>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4638      	mov	r0, r7
 80050cc:	f3af 8000 	nop.w
 80050d0:	1c42      	adds	r2, r0, #1
 80050d2:	4606      	mov	r6, r0
 80050d4:	d1d6      	bne.n	8005084 <_svfiprintf_r+0x174>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	065b      	lsls	r3, r3, #25
 80050da:	f53f af2d 	bmi.w	8004f38 <_svfiprintf_r+0x28>
 80050de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050e0:	e72c      	b.n	8004f3c <_svfiprintf_r+0x2c>
 80050e2:	ab03      	add	r3, sp, #12
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	462a      	mov	r2, r5
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <_svfiprintf_r+0x1f0>)
 80050ea:	a904      	add	r1, sp, #16
 80050ec:	4638      	mov	r0, r7
 80050ee:	f000 f879 	bl	80051e4 <_printf_i>
 80050f2:	e7ed      	b.n	80050d0 <_svfiprintf_r+0x1c0>
 80050f4:	080057c4 	.word	0x080057c4
 80050f8:	080057ce 	.word	0x080057ce
 80050fc:	00000000 	.word	0x00000000
 8005100:	08004e59 	.word	0x08004e59
 8005104:	080057ca 	.word	0x080057ca

08005108 <_printf_common>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	4616      	mov	r6, r2
 800510e:	4698      	mov	r8, r3
 8005110:	688a      	ldr	r2, [r1, #8]
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005118:	4293      	cmp	r3, r2
 800511a:	bfb8      	it	lt
 800511c:	4613      	movlt	r3, r2
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005124:	4607      	mov	r7, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b10a      	cbz	r2, 800512e <_printf_common+0x26>
 800512a:	3301      	adds	r3, #1
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	0699      	lsls	r1, r3, #26
 8005132:	bf42      	ittt	mi
 8005134:	6833      	ldrmi	r3, [r6, #0]
 8005136:	3302      	addmi	r3, #2
 8005138:	6033      	strmi	r3, [r6, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	f015 0506 	ands.w	r5, r5, #6
 8005140:	d106      	bne.n	8005150 <_printf_common+0x48>
 8005142:	f104 0a19 	add.w	sl, r4, #25
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6832      	ldr	r2, [r6, #0]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ab      	cmp	r3, r5
 800514e:	dc26      	bgt.n	800519e <_printf_common+0x96>
 8005150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	3b00      	subs	r3, #0
 8005158:	bf18      	it	ne
 800515a:	2301      	movne	r3, #1
 800515c:	0692      	lsls	r2, r2, #26
 800515e:	d42b      	bmi.n	80051b8 <_printf_common+0xb0>
 8005160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005164:	4641      	mov	r1, r8
 8005166:	4638      	mov	r0, r7
 8005168:	47c8      	blx	r9
 800516a:	3001      	adds	r0, #1
 800516c:	d01e      	beq.n	80051ac <_printf_common+0xa4>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf02      	ittt	eq
 800517a:	68e5      	ldreq	r5, [r4, #12]
 800517c:	6833      	ldreq	r3, [r6, #0]
 800517e:	1aed      	subeq	r5, r5, r3
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	2600      	movs	r6, #0
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xc8>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xa8>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4641      	mov	r1, r8
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c8      	blx	r9
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xac>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c6      	b.n	8005146 <_printf_common+0x3e>
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	2030      	movs	r0, #48	@ 0x30
 80051be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051c2:	4422      	add	r2, r4
 80051c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051cc:	3302      	adds	r3, #2
 80051ce:	e7c7      	b.n	8005160 <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4641      	mov	r1, r8
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c8      	blx	r9
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa4>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x8e>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	7e0f      	ldrb	r7, [r1, #24]
 80051ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051ec:	2f78      	cmp	r7, #120	@ 0x78
 80051ee:	4691      	mov	r9, r2
 80051f0:	4680      	mov	r8, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	469a      	mov	sl, r3
 80051f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	@ 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d2 	beq.w	80053aa <_printf_i+0x1c6>
 8005206:	2f58      	cmp	r7, #88	@ 0x58
 8005208:	f000 80b9 	beq.w	800537e <_printf_i+0x19a>
 800520c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a101      	add	r1, pc, #4	@ (adr r1, 8005224 <_printf_i+0x40>)
 8005220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	08005391 	.word	0x08005391
 8005254:	080052bb 	.word	0x080052bb
 8005258:	0800534b 	.word	0x0800534b
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053b3 	.word	0x080053b3
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052bb 	.word	0x080052bb
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005353 	.word	0x08005353
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e09d      	b.n	80053cc <_printf_i+0x1e8>
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	6031      	str	r1, [r6, #0]
 8005298:	0606      	lsls	r6, r0, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xbc>
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	e003      	b.n	80052a8 <_printf_i+0xc4>
 80052a0:	0645      	lsls	r5, r0, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xb8>
 80052a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	da03      	bge.n	80052b4 <_printf_i+0xd0>
 80052ac:	232d      	movs	r3, #45	@ 0x2d
 80052ae:	426d      	negs	r5, r5
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b4:	4859      	ldr	r0, [pc, #356]	@ (800541c <_printf_i+0x238>)
 80052b6:	230a      	movs	r3, #10
 80052b8:	e011      	b.n	80052de <_printf_i+0xfa>
 80052ba:	6821      	ldr	r1, [r4, #0]
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	0608      	lsls	r0, r1, #24
 80052c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c4:	d402      	bmi.n	80052cc <_printf_i+0xe8>
 80052c6:	0649      	lsls	r1, r1, #25
 80052c8:	bf48      	it	mi
 80052ca:	b2ad      	uxthmi	r5, r5
 80052cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ce:	4853      	ldr	r0, [pc, #332]	@ (800541c <_printf_i+0x238>)
 80052d0:	6033      	str	r3, [r6, #0]
 80052d2:	bf14      	ite	ne
 80052d4:	230a      	movne	r3, #10
 80052d6:	2308      	moveq	r3, #8
 80052d8:	2100      	movs	r1, #0
 80052da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052de:	6866      	ldr	r6, [r4, #4]
 80052e0:	60a6      	str	r6, [r4, #8]
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	bfa2      	ittt	ge
 80052e6:	6821      	ldrge	r1, [r4, #0]
 80052e8:	f021 0104 	bicge.w	r1, r1, #4
 80052ec:	6021      	strge	r1, [r4, #0]
 80052ee:	b90d      	cbnz	r5, 80052f4 <_printf_i+0x110>
 80052f0:	2e00      	cmp	r6, #0
 80052f2:	d04b      	beq.n	800538c <_printf_i+0x1a8>
 80052f4:	4616      	mov	r6, r2
 80052f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80052fa:	fb03 5711 	mls	r7, r3, r1, r5
 80052fe:	5dc7      	ldrb	r7, [r0, r7]
 8005300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005304:	462f      	mov	r7, r5
 8005306:	42bb      	cmp	r3, r7
 8005308:	460d      	mov	r5, r1
 800530a:	d9f4      	bls.n	80052f6 <_printf_i+0x112>
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10b      	bne.n	8005328 <_printf_i+0x144>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07df      	lsls	r7, r3, #31
 8005314:	d508      	bpl.n	8005328 <_printf_i+0x144>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4299      	cmp	r1, r3
 800531c:	bfde      	ittt	le
 800531e:	2330      	movle	r3, #48	@ 0x30
 8005320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005328:	1b92      	subs	r2, r2, r6
 800532a:	6122      	str	r2, [r4, #16]
 800532c:	f8cd a000 	str.w	sl, [sp]
 8005330:	464b      	mov	r3, r9
 8005332:	aa03      	add	r2, sp, #12
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fee6 	bl	8005108 <_printf_common>
 800533c:	3001      	adds	r0, #1
 800533e:	d14a      	bne.n	80053d6 <_printf_i+0x1f2>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	b004      	add	sp, #16
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	4833      	ldr	r0, [pc, #204]	@ (8005420 <_printf_i+0x23c>)
 8005354:	2778      	movs	r7, #120	@ 0x78
 8005356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6831      	ldr	r1, [r6, #0]
 800535e:	061f      	lsls	r7, r3, #24
 8005360:	f851 5b04 	ldr.w	r5, [r1], #4
 8005364:	d402      	bmi.n	800536c <_printf_i+0x188>
 8005366:	065f      	lsls	r7, r3, #25
 8005368:	bf48      	it	mi
 800536a:	b2ad      	uxthmi	r5, r5
 800536c:	6031      	str	r1, [r6, #0]
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	bf44      	itt	mi
 8005372:	f043 0320 	orrmi.w	r3, r3, #32
 8005376:	6023      	strmi	r3, [r4, #0]
 8005378:	b11d      	cbz	r5, 8005382 <_printf_i+0x19e>
 800537a:	2310      	movs	r3, #16
 800537c:	e7ac      	b.n	80052d8 <_printf_i+0xf4>
 800537e:	4827      	ldr	r0, [pc, #156]	@ (800541c <_printf_i+0x238>)
 8005380:	e7e9      	b.n	8005356 <_printf_i+0x172>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	e7f6      	b.n	800537a <_printf_i+0x196>
 800538c:	4616      	mov	r6, r2
 800538e:	e7bd      	b.n	800530c <_printf_i+0x128>
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	1d18      	adds	r0, r3, #4
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	062e      	lsls	r6, r5, #24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0x1c0>
 80053a0:	6019      	str	r1, [r3, #0]
 80053a2:	e002      	b.n	80053aa <_printf_i+0x1c6>
 80053a4:	0668      	lsls	r0, r5, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0x1bc>
 80053a8:	8019      	strh	r1, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	4616      	mov	r6, r2
 80053b0:	e7bc      	b.n	800532c <_printf_i+0x148>
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	1d1a      	adds	r2, r3, #4
 80053b6:	6032      	str	r2, [r6, #0]
 80053b8:	681e      	ldr	r6, [r3, #0]
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	2100      	movs	r1, #0
 80053be:	4630      	mov	r0, r6
 80053c0:	f7fa ff26 	bl	8000210 <memchr>
 80053c4:	b108      	cbz	r0, 80053ca <_printf_i+0x1e6>
 80053c6:	1b80      	subs	r0, r0, r6
 80053c8:	6060      	str	r0, [r4, #4]
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	e7aa      	b.n	800532c <_printf_i+0x148>
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	4632      	mov	r2, r6
 80053da:	4649      	mov	r1, r9
 80053dc:	4640      	mov	r0, r8
 80053de:	47d0      	blx	sl
 80053e0:	3001      	adds	r0, #1
 80053e2:	d0ad      	beq.n	8005340 <_printf_i+0x15c>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	079b      	lsls	r3, r3, #30
 80053e8:	d413      	bmi.n	8005412 <_printf_i+0x22e>
 80053ea:	68e0      	ldr	r0, [r4, #12]
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	4298      	cmp	r0, r3
 80053f0:	bfb8      	it	lt
 80053f2:	4618      	movlt	r0, r3
 80053f4:	e7a6      	b.n	8005344 <_printf_i+0x160>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4632      	mov	r2, r6
 80053fa:	4649      	mov	r1, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	47d0      	blx	sl
 8005400:	3001      	adds	r0, #1
 8005402:	d09d      	beq.n	8005340 <_printf_i+0x15c>
 8005404:	3501      	adds	r5, #1
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	9903      	ldr	r1, [sp, #12]
 800540a:	1a5b      	subs	r3, r3, r1
 800540c:	42ab      	cmp	r3, r5
 800540e:	dcf2      	bgt.n	80053f6 <_printf_i+0x212>
 8005410:	e7eb      	b.n	80053ea <_printf_i+0x206>
 8005412:	2500      	movs	r5, #0
 8005414:	f104 0619 	add.w	r6, r4, #25
 8005418:	e7f5      	b.n	8005406 <_printf_i+0x222>
 800541a:	bf00      	nop
 800541c:	080057d5 	.word	0x080057d5
 8005420:	080057e6 	.word	0x080057e6

08005424 <memmove>:
 8005424:	4288      	cmp	r0, r1
 8005426:	b510      	push	{r4, lr}
 8005428:	eb01 0402 	add.w	r4, r1, r2
 800542c:	d902      	bls.n	8005434 <memmove+0x10>
 800542e:	4284      	cmp	r4, r0
 8005430:	4623      	mov	r3, r4
 8005432:	d807      	bhi.n	8005444 <memmove+0x20>
 8005434:	1e43      	subs	r3, r0, #1
 8005436:	42a1      	cmp	r1, r4
 8005438:	d008      	beq.n	800544c <memmove+0x28>
 800543a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800543e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005442:	e7f8      	b.n	8005436 <memmove+0x12>
 8005444:	4402      	add	r2, r0
 8005446:	4601      	mov	r1, r0
 8005448:	428a      	cmp	r2, r1
 800544a:	d100      	bne.n	800544e <memmove+0x2a>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005456:	e7f7      	b.n	8005448 <memmove+0x24>

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb fbca 	bl	8000bfc <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000388 	.word	0x20000388

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548e:	4291      	cmp	r1, r2
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <_realloc_r>:
 8005494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	4680      	mov	r8, r0
 800549a:	4615      	mov	r5, r2
 800549c:	460c      	mov	r4, r1
 800549e:	b921      	cbnz	r1, 80054aa <_realloc_r+0x16>
 80054a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	4611      	mov	r1, r2
 80054a6:	f7ff bc4b 	b.w	8004d40 <_malloc_r>
 80054aa:	b92a      	cbnz	r2, 80054b8 <_realloc_r+0x24>
 80054ac:	f7ff fbdc 	bl	8004c68 <_free_r>
 80054b0:	2400      	movs	r4, #0
 80054b2:	4620      	mov	r0, r4
 80054b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b8:	f000 f81a 	bl	80054f0 <_malloc_usable_size_r>
 80054bc:	4285      	cmp	r5, r0
 80054be:	4606      	mov	r6, r0
 80054c0:	d802      	bhi.n	80054c8 <_realloc_r+0x34>
 80054c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054c6:	d8f4      	bhi.n	80054b2 <_realloc_r+0x1e>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fc38 	bl	8004d40 <_malloc_r>
 80054d0:	4607      	mov	r7, r0
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d0ec      	beq.n	80054b0 <_realloc_r+0x1c>
 80054d6:	42b5      	cmp	r5, r6
 80054d8:	462a      	mov	r2, r5
 80054da:	4621      	mov	r1, r4
 80054dc:	bf28      	it	cs
 80054de:	4632      	movcs	r2, r6
 80054e0:	f7ff ffca 	bl	8005478 <memcpy>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fbbe 	bl	8004c68 <_free_r>
 80054ec:	463c      	mov	r4, r7
 80054ee:	e7e0      	b.n	80054b2 <_realloc_r+0x1e>

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
