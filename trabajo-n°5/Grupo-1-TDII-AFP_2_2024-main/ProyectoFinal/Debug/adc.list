
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005edc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c8  080063c8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080063c8  080063c8  000073c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d0  080063d0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063d4  080063d4  000073d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080063d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000340  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000039c  2000039c  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f759  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002916  00000000  00000000  000177e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0001a100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ca  00000000  00000000  0001adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261ed  00000000  00000000  0001b77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ffb  00000000  00000000  00041967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8bd6  00000000  00000000  00054962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d538  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039f8  00000000  00000000  0013d57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00140f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006074 	.word	0x08006074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08006074 	.word	0x08006074

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d84:	f001 f880 	bl	8001e88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d88:	f000 f9be 	bl	8001108 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d8c:	f000 fbe4 	bl	8001558 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d90:	f000 fd4e 	bl	8001830 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d94:	f000 fdc8 	bl	8001928 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8000d98:	f000 fed6 	bl	8001b48 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 8000d9c:	f001 f821 	bl	8001de2 <lcd_init>
	//MENSAJE DE VIENVENIDA
	uartSendString((uint8_t*) "Sistema inicializado. Enviá algo por Bluetooth:\n");
 8000da0:	48b5      	ldr	r0, [pc, #724]	@ (8001078 <main+0x2f8>)
 8000da2:	f000 ff07 	bl	8001bb4 <uartSendString>
	lcd_clear();
 8000da6:	f000 ffe6 	bl	8001d76 <lcd_clear>
	lcd_enviar("cargando", 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	48b3      	ldr	r0, [pc, #716]	@ (800107c <main+0x2fc>)
 8000db0:	f000 ffd0 	bl	8001d54 <lcd_enviar>


	HAL_Delay(2000);
 8000db4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000db8:	f001 f8d8 	bl	8001f6c <HAL_Delay>
	//PARA NO DEJAR LA PANTALLA EN BLANCO
	lcd_clear();
 8000dbc:	f000 ffdb 	bl	8001d76 <lcd_clear>
	lcd_enviar("Luz:0  %pwm:   %", 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	48ae      	ldr	r0, [pc, #696]	@ (8001080 <main+0x300>)
 8000dc6:	f000 ffc5 	bl	8001d54 <lcd_enviar>
	lcd_enviar("R1:  R2:  R3: ", 1, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2101      	movs	r1, #1
 8000dce:	48ad      	ldr	r0, [pc, #692]	@ (8001084 <main+0x304>)
 8000dd0:	f000 ffc0 	bl	8001d54 <lcd_enviar>
		/* USER CODE BEGIN 3 */


		//obtenemos valor del pin analogico
		// Inicia el ADC
		HAL_ADC_Start(&hadc1);
 8000dd4:	48ac      	ldr	r0, [pc, #688]	@ (8001088 <main+0x308>)
 8000dd6:	f001 f931 	bl	800203c <HAL_ADC_Start>

		// Espera la conversión
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000dda:	210a      	movs	r1, #10
 8000ddc:	48aa      	ldr	r0, [pc, #680]	@ (8001088 <main+0x308>)
 8000dde:	f001 fa32 	bl	8002246 <HAL_ADC_PollForConversion>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <main+0x74>
			photoSensorValue = HAL_ADC_GetValue(&hadc1);
 8000de8:	48a7      	ldr	r0, [pc, #668]	@ (8001088 <main+0x308>)
 8000dea:	f001 fca5 	bl	8002738 <HAL_ADC_GetValue>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4aa6      	ldr	r2, [pc, #664]	@ (800108c <main+0x30c>)
 8000df2:	6013      	str	r3, [r2, #0]
			// Usa el valor adcValue
		}

		// Detén el ADC
		HAL_ADC_Stop(&hadc1);
 8000df4:	48a4      	ldr	r0, [pc, #656]	@ (8001088 <main+0x308>)
 8000df6:	f001 f9f3 	bl	80021e0 <HAL_ADC_Stop>


		// Chequear si hay datos recibidos por UART
		receivedData = uartGetReceivedData();
 8000dfa:	f000 ff35 	bl	8001c68 <uartGetReceivedData>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4aa3      	ldr	r2, [pc, #652]	@ (8001090 <main+0x310>)
 8000e02:	6013      	str	r3, [r2, #0]

		//confirmacion de recepcion y comparacion de datos
		if (strlen((char*) receivedData) > 0) {
 8000e04:	4ba2      	ldr	r3, [pc, #648]	@ (8001090 <main+0x310>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80df 	beq.w	8000fce <main+0x24e>
			uartSendString((uint8_t*) "Recibido: ");
 8000e10:	48a0      	ldr	r0, [pc, #640]	@ (8001094 <main+0x314>)
 8000e12:	f000 fecf 	bl	8001bb4 <uartSendString>
			uartSendString((uint8_t*) receivedData);
 8000e16:	4b9e      	ldr	r3, [pc, #632]	@ (8001090 <main+0x310>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 feca 	bl	8001bb4 <uartSendString>
			uartSendString((uint8_t*) "\n");
 8000e20:	489d      	ldr	r0, [pc, #628]	@ (8001098 <main+0x318>)
 8000e22:	f000 fec7 	bl	8001bb4 <uartSendString>

			// Comparar los datos recibidos con los comandos
			if (strcmp((char*) receivedData, "Encender led verde") == 0) {
 8000e26:	4b9a      	ldr	r3, [pc, #616]	@ (8001090 <main+0x310>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	499c      	ldr	r1, [pc, #624]	@ (800109c <main+0x31c>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9df 	bl	80001f0 <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <main+0xbe>
				writeLedOn_GPIO(LD1_Pin);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fcd5 	bl	80017e8 <writeLedOn_GPIO>
			}
			if (strcmp((char*) receivedData, "Encender led rojo") == 0) {
 8000e3e:	4b94      	ldr	r3, [pc, #592]	@ (8001090 <main+0x310>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4997      	ldr	r1, [pc, #604]	@ (80010a0 <main+0x320>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff f9d3 	bl	80001f0 <strcmp>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d103      	bne.n	8000e58 <main+0xd8>
				writeLedOn_GPIO(LD3_Pin);
 8000e50:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e54:	f000 fcc8 	bl	80017e8 <writeLedOn_GPIO>
			}
			if (strcmp((char*) receivedData, "Encender led azul") == 0) {
 8000e58:	4b8d      	ldr	r3, [pc, #564]	@ (8001090 <main+0x310>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4991      	ldr	r1, [pc, #580]	@ (80010a4 <main+0x324>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9c6 	bl	80001f0 <strcmp>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <main+0xf0>
				writeLedOn_GPIO(LD2_Pin);
 8000e6a:	2080      	movs	r0, #128	@ 0x80
 8000e6c:	f000 fcbc 	bl	80017e8 <writeLedOn_GPIO>
			}
			if (strcmp((char*) receivedData, "Apagar led verde") == 0) {
 8000e70:	4b87      	ldr	r3, [pc, #540]	@ (8001090 <main+0x310>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	498c      	ldr	r1, [pc, #560]	@ (80010a8 <main+0x328>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f9ba 	bl	80001f0 <strcmp>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <main+0x108>
				writeLedOff_GPIO(LD1_Pin);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fcc2 	bl	800180c <writeLedOff_GPIO>
			}
			if (strcmp((char*) receivedData, "Apagar led rojo") == 0) {
 8000e88:	4b81      	ldr	r3, [pc, #516]	@ (8001090 <main+0x310>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4987      	ldr	r1, [pc, #540]	@ (80010ac <main+0x32c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f9ae 	bl	80001f0 <strcmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <main+0x122>
				writeLedOff_GPIO(LD3_Pin);
 8000e9a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e9e:	f000 fcb5 	bl	800180c <writeLedOff_GPIO>
			}
			if (strcmp((char*) receivedData, "Apagar led azul") == 0) {
 8000ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8001090 <main+0x310>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4982      	ldr	r1, [pc, #520]	@ (80010b0 <main+0x330>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff f9a1 	bl	80001f0 <strcmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <main+0x13a>
				writeLedOff_GPIO(LD2_Pin);
 8000eb4:	2080      	movs	r0, #128	@ 0x80
 8000eb6:	f000 fca9 	bl	800180c <writeLedOff_GPIO>
			}
			if (strcmp((char*) receivedData, "RaN") == 0) {
 8000eba:	4b75      	ldr	r3, [pc, #468]	@ (8001090 <main+0x310>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	497d      	ldr	r1, [pc, #500]	@ (80010b4 <main+0x334>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f995 	bl	80001f0 <strcmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10d      	bne.n	8000ee8 <main+0x168>
				HAL_GPIO_WritePin(GPIOE, rele1_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed2:	4879      	ldr	r0, [pc, #484]	@ (80010b8 <main+0x338>)
 8000ed4:	f002 f9da 	bl	800328c <HAL_GPIO_WritePin>
				uartSendString((uint8_t*) "rele activado");
 8000ed8:	4878      	ldr	r0, [pc, #480]	@ (80010bc <main+0x33c>)
 8000eda:	f000 fe6b 	bl	8001bb4 <uartSendString>
				lcd_enviar("R1:on", 1, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4877      	ldr	r0, [pc, #476]	@ (80010c0 <main+0x340>)
 8000ee4:	f000 ff36 	bl	8001d54 <lcd_enviar>
			}
			if (strcmp((char*) receivedData, "RbN") == 0) {
 8000ee8:	4b69      	ldr	r3, [pc, #420]	@ (8001090 <main+0x310>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4975      	ldr	r1, [pc, #468]	@ (80010c4 <main+0x344>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f97e 	bl	80001f0 <strcmp>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10d      	bne.n	8000f16 <main+0x196>
				HAL_GPIO_WritePin(GPIOE, rele2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f00:	486d      	ldr	r0, [pc, #436]	@ (80010b8 <main+0x338>)
 8000f02:	f002 f9c3 	bl	800328c <HAL_GPIO_WritePin>
				uartSendString((uint8_t*) "rele activado");
 8000f06:	486d      	ldr	r0, [pc, #436]	@ (80010bc <main+0x33c>)
 8000f08:	f000 fe54 	bl	8001bb4 <uartSendString>
				lcd_enviar("R2:on", 1, 5);
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	2101      	movs	r1, #1
 8000f10:	486d      	ldr	r0, [pc, #436]	@ (80010c8 <main+0x348>)
 8000f12:	f000 ff1f 	bl	8001d54 <lcd_enviar>
			}
			if (strcmp((char*) receivedData, "RcN") == 0) {
 8000f16:	4b5e      	ldr	r3, [pc, #376]	@ (8001090 <main+0x310>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	496c      	ldr	r1, [pc, #432]	@ (80010cc <main+0x34c>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f967 	bl	80001f0 <strcmp>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10d      	bne.n	8000f44 <main+0x1c4>
				HAL_GPIO_WritePin(GPIOE, rele3_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f2e:	4862      	ldr	r0, [pc, #392]	@ (80010b8 <main+0x338>)
 8000f30:	f002 f9ac 	bl	800328c <HAL_GPIO_WritePin>
				uartSendString((uint8_t*) "rele activado");
 8000f34:	4861      	ldr	r0, [pc, #388]	@ (80010bc <main+0x33c>)
 8000f36:	f000 fe3d 	bl	8001bb4 <uartSendString>
				lcd_enviar("R3:on", 1, 10);
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4864      	ldr	r0, [pc, #400]	@ (80010d0 <main+0x350>)
 8000f40:	f000 ff08 	bl	8001d54 <lcd_enviar>
			}
			if (strcmp((char*) receivedData, "RaFF") == 0) {
 8000f44:	4b52      	ldr	r3, [pc, #328]	@ (8001090 <main+0x310>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4962      	ldr	r1, [pc, #392]	@ (80010d4 <main+0x354>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f950 	bl	80001f0 <strcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <main+0x1f2>
				uartSendString((uint8_t*) "rele desactivado");
 8000f56:	4860      	ldr	r0, [pc, #384]	@ (80010d8 <main+0x358>)
 8000f58:	f000 fe2c 	bl	8001bb4 <uartSendString>
				HAL_GPIO_WritePin(GPIOE, rele1_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f62:	4855      	ldr	r0, [pc, #340]	@ (80010b8 <main+0x338>)
 8000f64:	f002 f992 	bl	800328c <HAL_GPIO_WritePin>
				lcd_enviar("R1:of", 1, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	485b      	ldr	r0, [pc, #364]	@ (80010dc <main+0x35c>)
 8000f6e:	f000 fef1 	bl	8001d54 <lcd_enviar>
			}
			if (strcmp((char*) receivedData, "RbFF") == 0) {
 8000f72:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <main+0x310>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	495a      	ldr	r1, [pc, #360]	@ (80010e0 <main+0x360>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff f939 	bl	80001f0 <strcmp>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10d      	bne.n	8000fa0 <main+0x220>
				uartSendString((uint8_t*) "rele desactivado");
 8000f84:	4854      	ldr	r0, [pc, #336]	@ (80010d8 <main+0x358>)
 8000f86:	f000 fe15 	bl	8001bb4 <uartSendString>
				HAL_GPIO_WritePin(GPIOE, rele2_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f90:	4849      	ldr	r0, [pc, #292]	@ (80010b8 <main+0x338>)
 8000f92:	f002 f97b 	bl	800328c <HAL_GPIO_WritePin>
				lcd_enviar("R2:of", 1, 5);
 8000f96:	2205      	movs	r2, #5
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4852      	ldr	r0, [pc, #328]	@ (80010e4 <main+0x364>)
 8000f9c:	f000 feda 	bl	8001d54 <lcd_enviar>
			}
			if (strcmp((char*) receivedData, "RcFF") == 0) {
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8001090 <main+0x310>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4950      	ldr	r1, [pc, #320]	@ (80010e8 <main+0x368>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f922 	bl	80001f0 <strcmp>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10d      	bne.n	8000fce <main+0x24e>
				uartSendString((uint8_t*) "rele desactivado");
 8000fb2:	4849      	ldr	r0, [pc, #292]	@ (80010d8 <main+0x358>)
 8000fb4:	f000 fdfe 	bl	8001bb4 <uartSendString>
				HAL_GPIO_WritePin(GPIOE, rele3_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fbe:	483e      	ldr	r0, [pc, #248]	@ (80010b8 <main+0x338>)
 8000fc0:	f002 f964 	bl	800328c <HAL_GPIO_WritePin>
				lcd_enviar("R3:of", 1, 10);
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4848      	ldr	r0, [pc, #288]	@ (80010ec <main+0x36c>)
 8000fca:	f000 fec3 	bl	8001d54 <lcd_enviar>
			}
		}

		//formamos mensaje en pantalla

		cadena = 100 - (photoSensorValue / 4095.0) * 100;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <main+0x30c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff faae 	bl	8000534 <__aeabi_ui2d>
 8000fd8:	a325      	add	r3, pc, #148	@ (adr r3, 8001070 <main+0x2f0>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fc4d 	bl	800087c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <main+0x370>)
 8000ff0:	f7ff fb1a 	bl	8000628 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	493c      	ldr	r1, [pc, #240]	@ (80010f0 <main+0x370>)
 8000ffe:	f7ff f95b 	bl	80002b8 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fd1f 	bl	8000a4c <__aeabi_d2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b38      	ldr	r3, [pc, #224]	@ (80010f4 <main+0x374>)
 8001014:	701a      	strb	r2, [r3, #0]
		if(abs(cadena - bufferaux) >= 5){
 8001016:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <main+0x374>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <main+0x378>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	bfb8      	it	lt
 8001026:	425b      	neglt	r3, r3
 8001028:	2b04      	cmp	r3, #4
 800102a:	dd1a      	ble.n	8001062 <main+0x2e2>
			        sprintf((char*) uartRxBuffer, "Luz:%u  ", cadena);
 800102c:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <main+0x374>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4932      	ldr	r1, [pc, #200]	@ (80010fc <main+0x37c>)
 8001034:	4832      	ldr	r0, [pc, #200]	@ (8001100 <main+0x380>)
 8001036:	f004 fb7d 	bl	8005734 <siprintf>
					//lcd_clear();
					lcd_enviar((char*) uartRxBuffer, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	4830      	ldr	r0, [pc, #192]	@ (8001100 <main+0x380>)
 8001040:	f000 fe88 	bl	8001d54 <lcd_enviar>
					lcd_enviar((char *)"%", 0, 7);
 8001044:	2207      	movs	r2, #7
 8001046:	2100      	movs	r1, #0
 8001048:	482e      	ldr	r0, [pc, #184]	@ (8001104 <main+0x384>)
 800104a:	f000 fe83 	bl	8001d54 <lcd_enviar>
					uartSendString((uint8_t*) uartRxBuffer);
 800104e:	482c      	ldr	r0, [pc, #176]	@ (8001100 <main+0x380>)
 8001050:	f000 fdb0 	bl	8001bb4 <uartSendString>
					uartSendString((uint8_t *)"\n");
 8001054:	4810      	ldr	r0, [pc, #64]	@ (8001098 <main+0x318>)
 8001056:	f000 fdad 	bl	8001bb4 <uartSendString>
					bufferaux=cadena;
 800105a:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <main+0x374>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <main+0x378>)
 8001060:	701a      	strb	r2, [r3, #0]
		}




		HAL_Delay(500);  // Espera breve para evitar uso excesivo de CPU
 8001062:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001066:	f000 ff81 	bl	8001f6c <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 800106a:	e6b3      	b.n	8000dd4 <main+0x54>
 800106c:	f3af 8000 	nop.w
 8001070:	00000000 	.word	0x00000000
 8001074:	40affe00 	.word	0x40affe00
 8001078:	0800608c 	.word	0x0800608c
 800107c:	080060c0 	.word	0x080060c0
 8001080:	080060cc 	.word	0x080060cc
 8001084:	080060e0 	.word	0x080060e0
 8001088:	200000a0 	.word	0x200000a0
 800108c:	20000090 	.word	0x20000090
 8001090:	2000008c 	.word	0x2000008c
 8001094:	080060f0 	.word	0x080060f0
 8001098:	080060fc 	.word	0x080060fc
 800109c:	08006100 	.word	0x08006100
 80010a0:	08006114 	.word	0x08006114
 80010a4:	08006128 	.word	0x08006128
 80010a8:	0800613c 	.word	0x0800613c
 80010ac:	08006150 	.word	0x08006150
 80010b0:	08006160 	.word	0x08006160
 80010b4:	08006170 	.word	0x08006170
 80010b8:	40021000 	.word	0x40021000
 80010bc:	08006174 	.word	0x08006174
 80010c0:	08006184 	.word	0x08006184
 80010c4:	0800618c 	.word	0x0800618c
 80010c8:	08006190 	.word	0x08006190
 80010cc:	08006198 	.word	0x08006198
 80010d0:	0800619c 	.word	0x0800619c
 80010d4:	080061a4 	.word	0x080061a4
 80010d8:	080061ac 	.word	0x080061ac
 80010dc:	080061c0 	.word	0x080061c0
 80010e0:	080061c8 	.word	0x080061c8
 80010e4:	080061d0 	.word	0x080061d0
 80010e8:	080061d8 	.word	0x080061d8
 80010ec:	080061e0 	.word	0x080061e0
 80010f0:	40590000 	.word	0x40590000
 80010f4:	20000078 	.word	0x20000078
 80010f8:	20000079 	.word	0x20000079
 80010fc:	080061e8 	.word	0x080061e8
 8001100:	2000007c 	.word	0x2000007c
 8001104:	080061f4 	.word	0x080061f4

08001108 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	@ 0x50
 800110c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	@ 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fb2c 	bl	8005774 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <SystemClock_Config+0xb8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	4a22      	ldr	r2, [pc, #136]	@ (80011c0 <SystemClock_Config+0xb8>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	@ 0x40
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <SystemClock_Config+0xb8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <SystemClock_Config+0xbc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <SystemClock_Config+0xbc>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <SystemClock_Config+0xbc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fdb7 	bl	8003cf0 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x84>
		Error_Handler();
 8001188:	f000 f81e 	bl	80011c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 f819 	bl	80041e0 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xb0>
		Error_Handler();
 80011b4:	f000 f808 	bl	80011c8 <Error_Handler>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	@ 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_MspInit+0x4c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_ADC_MspInit+0x8c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12f      	bne.n	80012a6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_ADC_MspInit+0x90>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <HAL_ADC_MspInit+0x90>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <HAL_ADC_MspInit+0x90>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <HAL_ADC_MspInit+0x90>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <HAL_ADC_MspInit+0x90>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_ADC_MspInit+0x90>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800127e:	2309      	movs	r3, #9
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001282:	2303      	movs	r3, #3
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <HAL_ADC_MspInit+0x94>)
 8001292:	f001 fe4f 	bl	8002f34 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2012      	movs	r0, #18
 800129c:	f001 fd81 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012a0:	2012      	movs	r0, #18
 80012a2:	f001 fd9a 	bl	8002dda <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	@ (8001340 <HAL_I2C_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12c      	bne.n	8001338 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012fa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001300:	2312      	movs	r3, #18
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130c:	2304      	movs	r3, #4
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <HAL_I2C_MspInit+0x8c>)
 8001318:	f001 fe0c 	bl	8002f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 8001326:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40005400 	.word	0x40005400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <HAL_UART_MspInit+0x94>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d133      	bne.n	80013d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_UART_MspInit+0x98>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <HAL_UART_MspInit+0x98>)
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_UART_MspInit+0x98>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_UART_MspInit+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <HAL_UART_MspInit+0x98>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_UART_MspInit+0x98>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b6:	2307      	movs	r3, #7
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4809      	ldr	r0, [pc, #36]	@ (80013e8 <HAL_UART_MspInit+0x9c>)
 80013c2:	f001 fdb7 	bl	8002f34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2026      	movs	r0, #38	@ 0x26
 80013cc:	f001 fce9 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d0:	2026      	movs	r0, #38	@ 0x26
 80013d2:	f001 fd02 	bl	8002dda <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	@ 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020c00 	.word	0x40020c00

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <NMI_Handler+0x4>

080013f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <MemManage_Handler+0x4>

08001404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 fd73 	bl	8001f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <ADC_IRQHandler+0x10>)
 8001452:	f001 f861 	bl	8002518 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000a0 	.word	0x200000a0

08001460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <USART2_IRQHandler+0x10>)
 8001466:	f003 f9db 	bl	8004820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000013c 	.word	0x2000013c

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f004 f96e 	bl	8005784 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20030000 	.word	0x20030000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000094 	.word	0x20000094
 80014dc:	200003a0 	.word	0x200003a0

080014e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800153c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001508:	f7ff ffea 	bl	80014e0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	@ (8001544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	@ (8001550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001532:	f004 f92d 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff fc23 	bl	8000d80 <main>
  bx  lr    
 800153a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800153c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001548:	080063d8 	.word	0x080063d8
  ldr r2, =_sbss
 800154c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001550:	2000039c 	.word	0x2000039c

08001554 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <CAN1_RX0_IRQHandler>
	...

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	4b96      	ldr	r3, [pc, #600]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a95      	ldr	r2, [pc, #596]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b93      	ldr	r3, [pc, #588]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b8f      	ldr	r3, [pc, #572]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a8e      	ldr	r2, [pc, #568]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <MX_GPIO_Init+0x274>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a87      	ldr	r2, [pc, #540]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b85      	ldr	r3, [pc, #532]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b81      	ldr	r3, [pc, #516]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a80      	ldr	r2, [pc, #512]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b7e      	ldr	r3, [pc, #504]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b7a      	ldr	r3, [pc, #488]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a79      	ldr	r2, [pc, #484]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b77      	ldr	r3, [pc, #476]	@ (80017cc <MX_GPIO_Init+0x274>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b73      	ldr	r3, [pc, #460]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a72      	ldr	r2, [pc, #456]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b70      	ldr	r3, [pc, #448]	@ (80017cc <MX_GPIO_Init+0x274>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b6c      	ldr	r3, [pc, #432]	@ (80017cc <MX_GPIO_Init+0x274>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a6b      	ldr	r2, [pc, #428]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b69      	ldr	r3, [pc, #420]	@ (80017cc <MX_GPIO_Init+0x274>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001638:	4865      	ldr	r0, [pc, #404]	@ (80017d0 <MX_GPIO_Init+0x278>)
 800163a:	f001 fe27 	bl	800328c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, rele1_Pin|rele2_Pin|rele3_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001644:	4863      	ldr	r0, [pc, #396]	@ (80017d4 <MX_GPIO_Init+0x27c>)
 8001646:	f001 fe21 	bl	800328c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2140      	movs	r1, #64	@ 0x40
 800164e:	4862      	ldr	r0, [pc, #392]	@ (80017d8 <MX_GPIO_Init+0x280>)
 8001650:	f001 fe1c 	bl	800328c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	485c      	ldr	r0, [pc, #368]	@ (80017dc <MX_GPIO_Init+0x284>)
 800166c:	f001 fc62 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001670:	2332      	movs	r3, #50	@ 0x32
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001680:	230b      	movs	r3, #11
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4854      	ldr	r0, [pc, #336]	@ (80017dc <MX_GPIO_Init+0x284>)
 800168c:	f001 fc52 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001690:	2386      	movs	r3, #134	@ 0x86
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a0:	230b      	movs	r3, #11
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	484d      	ldr	r0, [pc, #308]	@ (80017e0 <MX_GPIO_Init+0x288>)
 80016ac:	f001 fc42 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016b0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4841      	ldr	r0, [pc, #260]	@ (80017d0 <MX_GPIO_Init+0x278>)
 80016ca:	f001 fc33 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : rele1_Pin rele2_Pin rele3_Pin */
    GPIO_InitStruct.Pin = rele1_Pin|rele2_Pin|rele3_Pin;
 80016ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	483b      	ldr	r0, [pc, #236]	@ (80017d4 <MX_GPIO_Init+0x27c>)
 80016e8:	f001 fc24 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pin : RMII_TXD1_Pin */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016fe:	230b      	movs	r3, #11
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	4831      	ldr	r0, [pc, #196]	@ (80017d0 <MX_GPIO_Init+0x278>)
 800170a:	f001 fc13 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800170e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001720:	2307      	movs	r3, #7
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	482e      	ldr	r0, [pc, #184]	@ (80017e4 <MX_GPIO_Init+0x28c>)
 800172c:	f001 fc02 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001730:	2340      	movs	r3, #64	@ 0x40
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4824      	ldr	r0, [pc, #144]	@ (80017d8 <MX_GPIO_Init+0x280>)
 8001748:	f001 fbf4 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800174c:	2380      	movs	r3, #128	@ 0x80
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	481e      	ldr	r0, [pc, #120]	@ (80017d8 <MX_GPIO_Init+0x280>)
 8001760:	f001 fbe8 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001764:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001776:	230a      	movs	r3, #10
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4817      	ldr	r0, [pc, #92]	@ (80017e0 <MX_GPIO_Init+0x288>)
 8001782:	f001 fbd7 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_VBUS_Pin */
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4811      	ldr	r0, [pc, #68]	@ (80017e0 <MX_GPIO_Init+0x288>)
 800179c:	f001 fbca 	bl	8002f34 <HAL_GPIO_Init>

    /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017a0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b2:	230b      	movs	r3, #11
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <MX_GPIO_Init+0x280>)
 80017be:	f001 fbb9 	bl	8002f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c2:	bf00      	nop
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020c00 	.word	0x40020c00

080017e8 <writeLedOn_GPIO>:
/**
 * @brief GPIO Led on Function
 * @param led_t LDx
 * @retval none
 */
void writeLedOn_GPIO(led_t LDx) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_SET);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4619      	mov	r1, r3
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <writeLedOn_GPIO+0x20>)
 80017fa:	f001 fd47 	bl	800328c <HAL_GPIO_WritePin>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40020400 	.word	0x40020400

0800180c <writeLedOff_GPIO>:
/*
 * @brief GPIO led off Function
 * @param led_t LDx
 * @retval none
 */
void writeLedOff_GPIO(led_t LDx) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, LDx, GPIO_PIN_RESET);
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <writeLedOff_GPIO+0x20>)
 800181e:	f001 fd35 	bl	800328c <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40020400 	.word	0x40020400

08001830 <MX_ADC1_Init>:

/**
 * @brief Inicialización del ADC1.
 * @note Configura el ADC con un solo canal y habilita las interrupciones.
 */
void MX_ADC1_Init(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

    hadc1.Instance = ADC1;
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001844:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <MX_ADC1_Init+0xa8>)
 8001846:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001848:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 800185c:	2201      	movs	r2, #1
 800185e:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001870:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <MX_ADC1_Init+0xac>)
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 800187c:	2201      	movs	r2, #1
 800187e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 800188a:	2201      	movs	r2, #1
 800188c:	615a      	str	r2, [r3, #20]
      if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800188e:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 8001890:	f000 fb90 	bl	8001fb4 <HAL_ADC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <MX_ADC1_Init+0x7a>

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800189a:	480e      	ldr	r0, [pc, #56]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 800189c:	f000 fb8a 	bl	8001fb4 <HAL_ADC_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_ADC1_Init+0x7a>
        Error_Handler();
 80018a6:	f7ff fc8f 	bl	80011c8 <Error_Handler>
    }

    // Configuración del canal del ADC
    sConfig.Channel = ADC_CHANNEL_0;  // Ejemplo de canal
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80018ae:	2301      	movs	r3, #1
 80018b0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_ADC1_Init+0xa4>)
 80018bc:	f000 ff5e 	bl	800277c <HAL_ADC_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_ADC1_Init+0x9a>
        Error_Handler();
 80018c6:	f7ff fc7f 	bl	80011c8 <Error_Handler>
    }
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000a0 	.word	0x200000a0
 80018d8:	40012000 	.word	0x40012000
 80018dc:	0f000001 	.word	0x0f000001

080018e0 <HAL_ADC_ConvCpltCallback>:

/**
 * @brief Callback de conversión completa del ADC.
 * @param hadc Handler del ADC que generó la interrupción.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    if (hadc1->Instance == ADC1) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_ADC_ConvCpltCallback+0x3c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d110      	bne.n	8001914 <HAL_ADC_ConvCpltCallback+0x34>
        adcValue = HAL_ADC_GetValue(hadc1);  // Obtiene el valor de conversión
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 ff20 	bl	8002738 <HAL_ADC_GetValue>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_ADC_ConvCpltCallback+0x40>)
 80018fc:	6013      	str	r3, [r2, #0]
        adcConversionComplete = true;      // Marca la conversión como completa
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_ADC_ConvCpltCallback+0x44>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
        if (HAL_ADC_Start_IT(hadc1) != HAL_OK) {
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fd29 	bl	800235c <HAL_ADC_Start_IT>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_ADC_ConvCpltCallback+0x34>
            Error_Handler();               // Si falla, maneja el error
 8001910:	f7ff fc5a 	bl	80011c8 <Error_Handler>
        }
    }
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40012000 	.word	0x40012000
 8001920:	20000098 	.word	0x20000098
 8001924:	2000009c 	.word	0x2000009c

08001928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <MX_I2C1_Init+0x74>)
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <MX_I2C1_Init+0x78>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001932:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <MX_I2C1_Init+0x74>)
 8001934:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <MX_I2C1_Init+0x7c>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <MX_I2C1_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b17      	ldr	r3, [pc, #92]	@ (800199c <MX_I2C1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <MX_I2C1_Init+0x74>)
 8001946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <MX_I2C1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	480d      	ldr	r0, [pc, #52]	@ (800199c <MX_I2C1_Init+0x74>)
 8001966:	f001 fcab 	bl	80032c0 <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f7ff fc2a 	bl	80011c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	4809      	ldr	r0, [pc, #36]	@ (800199c <MX_I2C1_Init+0x74>)
 8001978:	f002 f93f 	bl	8003bfa <HAL_I2CEx_ConfigAnalogFilter>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001982:	f7ff fc21 	bl	80011c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <MX_I2C1_Init+0x74>)
 800198a:	f002 f972 	bl	8003c72 <HAL_I2CEx_ConfigDigitalFilter>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001994:	f7ff fc18 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200000e8 	.word	0x200000e8
 80019a0:	40005400 	.word	0x40005400
 80019a4:	000186a0 	.word	0x000186a0

080019a8 <uartSendConfig>:

/* USER CODE END PV */
/* Private function prototypes -----------------------------------------------*/
//void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void uartSendConfig(UART_InitTypeDef *config) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b0dd      	sub	sp, #372	@ 0x174
 80019ac:	af0e      	add	r7, sp, #56	@ 0x38
 80019ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019b6:	6018      	str	r0, [r3, #0]
	char configMsg[300];

	// Construir mensaje con desplazamiento de puntero en cada salto
	snprintf(configMsg, sizeof(configMsg),
 80019b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6818      	ldr	r0, [r3, #0]
					"        %-15s : %s\n"
					"        %-15s : %s\n"
					"        %-15s : %s\n"
					"        %-15s : %s\n", "BaudRate", config->BaudRate,
			"WordLength",
			(config->WordLength == UART_WORDLENGTH_8B) ? "8 bits" : "9 bits",
 80019c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
	snprintf(configMsg, sizeof(configMsg),
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <uartSendConfig+0x30>
 80019d4:	4c45      	ldr	r4, [pc, #276]	@ (8001aec <uartSendConfig+0x144>)
 80019d6:	e000      	b.n	80019da <uartSendConfig+0x32>
 80019d8:	4c45      	ldr	r4, [pc, #276]	@ (8001af0 <uartSendConfig+0x148>)
			"StopBits",
			(config->StopBits == UART_STOPBITS_1) ? "1 bit" : "2 bits",
 80019da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
	snprintf(configMsg, sizeof(configMsg),
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <uartSendConfig+0x46>
 80019ea:	4d42      	ldr	r5, [pc, #264]	@ (8001af4 <uartSendConfig+0x14c>)
 80019ec:	e000      	b.n	80019f0 <uartSendConfig+0x48>
 80019ee:	4d42      	ldr	r5, [pc, #264]	@ (8001af8 <uartSendConfig+0x150>)
			"Parity",
			(config->Parity == UART_PARITY_NONE) ? "None" :
 80019f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80019f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
	snprintf(configMsg, sizeof(configMsg),
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <uartSendConfig+0x72>
			(config->Parity == UART_PARITY_EVEN) ? "Even" : "Odd", "Mode",
 8001a00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a10:	d101      	bne.n	8001a16 <uartSendConfig+0x6e>
 8001a12:	4a3a      	ldr	r2, [pc, #232]	@ (8001afc <uartSendConfig+0x154>)
 8001a14:	e002      	b.n	8001a1c <uartSendConfig+0x74>
 8001a16:	4a3a      	ldr	r2, [pc, #232]	@ (8001b00 <uartSendConfig+0x158>)
 8001a18:	e000      	b.n	8001a1c <uartSendConfig+0x74>
	snprintf(configMsg, sizeof(configMsg),
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b04 <uartSendConfig+0x15c>)
			(config->Mode == UART_MODE_TX_RX) ? "TX/RX" :
 8001a1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
	snprintf(configMsg, sizeof(configMsg),
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d00b      	beq.n	8001a44 <uartSendConfig+0x9c>
			(config->Mode == UART_MODE_TX) ? "TX Only" : "RX Only", "HwFlowCtl",
 8001a2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d101      	bne.n	8001a40 <uartSendConfig+0x98>
 8001a3c:	4932      	ldr	r1, [pc, #200]	@ (8001b08 <uartSendConfig+0x160>)
 8001a3e:	e002      	b.n	8001a46 <uartSendConfig+0x9e>
 8001a40:	4932      	ldr	r1, [pc, #200]	@ (8001b0c <uartSendConfig+0x164>)
 8001a42:	e000      	b.n	8001a46 <uartSendConfig+0x9e>
	snprintf(configMsg, sizeof(configMsg),
 8001a44:	4932      	ldr	r1, [pc, #200]	@ (8001b10 <uartSendConfig+0x168>)
			(config->HwFlowCtl == UART_HWCONTROL_NONE) ? "None" :
 8001a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
	snprintf(configMsg, sizeof(configMsg),
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d017      	beq.n	8001a86 <uartSendConfig+0xde>
			(config->HwFlowCtl == UART_HWCONTROL_RTS) ? "RTS" :
 8001a56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a66:	d00c      	beq.n	8001a82 <uartSendConfig+0xda>
			(config->HwFlowCtl == UART_HWCONTROL_CTS) ? "CTS" : "RTS/CTS",
 8001a68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a78:	d101      	bne.n	8001a7e <uartSendConfig+0xd6>
 8001a7a:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <uartSendConfig+0x16c>)
 8001a7c:	e004      	b.n	8001a88 <uartSendConfig+0xe0>
 8001a7e:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <uartSendConfig+0x170>)
 8001a80:	e002      	b.n	8001a88 <uartSendConfig+0xe0>
			(config->HwFlowCtl == UART_HWCONTROL_RTS) ? "RTS" :
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <uartSendConfig+0x174>)
 8001a84:	e000      	b.n	8001a88 <uartSendConfig+0xe0>
	snprintf(configMsg, sizeof(configMsg),
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <uartSendConfig+0x15c>)
			"OverSampling",
			(config->OverSampling == UART_OVERSAMPLING_16) ? "16" : "8");
 8001a88:	f507 769c 	add.w	r6, r7, #312	@ 0x138
 8001a8c:	f5a6 769a 	sub.w	r6, r6, #308	@ 0x134
 8001a90:	6836      	ldr	r6, [r6, #0]
 8001a92:	69b6      	ldr	r6, [r6, #24]
	snprintf(configMsg, sizeof(configMsg),
 8001a94:	2e00      	cmp	r6, #0
 8001a96:	d101      	bne.n	8001a9c <uartSendConfig+0xf4>
 8001a98:	4e21      	ldr	r6, [pc, #132]	@ (8001b20 <uartSendConfig+0x178>)
 8001a9a:	e000      	b.n	8001a9e <uartSendConfig+0xf6>
 8001a9c:	4e21      	ldr	r6, [pc, #132]	@ (8001b24 <uartSendConfig+0x17c>)
 8001a9e:	f107 0c0c 	add.w	ip, r7, #12
 8001aa2:	960c      	str	r6, [sp, #48]	@ 0x30
 8001aa4:	4e20      	ldr	r6, [pc, #128]	@ (8001b28 <uartSendConfig+0x180>)
 8001aa6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8001aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <uartSendConfig+0x184>)
 8001aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8001aae:	9108      	str	r1, [sp, #32]
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <uartSendConfig+0x188>)
 8001ab2:	9307      	str	r3, [sp, #28]
 8001ab4:	9206      	str	r2, [sp, #24]
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <uartSendConfig+0x18c>)
 8001ab8:	9305      	str	r3, [sp, #20]
 8001aba:	9504      	str	r5, [sp, #16]
 8001abc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <uartSendConfig+0x190>)
 8001abe:	9303      	str	r3, [sp, #12]
 8001ac0:	9402      	str	r4, [sp, #8]
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b3c <uartSendConfig+0x194>)
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	9000      	str	r0, [sp, #0]
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <uartSendConfig+0x198>)
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <uartSendConfig+0x19c>)
 8001acc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001ad0:	4660      	mov	r0, ip
 8001ad2:	f003 fdfb 	bl	80056cc <sniprintf>

	// Enviar mensaje
	uartSendString((uint8_t*) configMsg);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f86a 	bl	8001bb4 <uartSendString>
}
 8001ae0:	bf00      	nop
 8001ae2:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	080061f8 	.word	0x080061f8
 8001af0:	08006200 	.word	0x08006200
 8001af4:	08006208 	.word	0x08006208
 8001af8:	08006210 	.word	0x08006210
 8001afc:	08006218 	.word	0x08006218
 8001b00:	08006220 	.word	0x08006220
 8001b04:	08006224 	.word	0x08006224
 8001b08:	0800622c 	.word	0x0800622c
 8001b0c:	08006234 	.word	0x08006234
 8001b10:	0800623c 	.word	0x0800623c
 8001b14:	08006244 	.word	0x08006244
 8001b18:	08006248 	.word	0x08006248
 8001b1c:	08006250 	.word	0x08006250
 8001b20:	08006254 	.word	0x08006254
 8001b24:	08006258 	.word	0x08006258
 8001b28:	08006338 	.word	0x08006338
 8001b2c:	08006348 	.word	0x08006348
 8001b30:	08006354 	.word	0x08006354
 8001b34:	0800635c 	.word	0x0800635c
 8001b38:	08006364 	.word	0x08006364
 8001b3c:	08006370 	.word	0x08006370
 8001b40:	0800625c 	.word	0x0800625c
 8001b44:	08006268 	.word	0x08006268

08001b48 <MX_USART2_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	  huart2.Instance = USART2;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b4e:	4a16      	ldr	r2, [pc, #88]	@ (8001ba8 <MX_USART2_UART_Init+0x60>)
 8001b50:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 9600;
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b58:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001b7e:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b80:	f002 fd4e 	bl	8004620 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001b8a:	f7ff fb1d 	bl	80011c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */
	// Enviar el mensaje usando uartSendString
	uartSendConfig(&huart2.Init);
 8001b8e:	4807      	ldr	r0, [pc, #28]	@ (8001bac <MX_USART2_UART_Init+0x64>)
 8001b90:	f7ff ff0a 	bl	80019a8 <uartSendConfig>
	// Inicia la recepción en modo interrupción
	    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	4906      	ldr	r1, [pc, #24]	@ (8001bb0 <MX_USART2_UART_Init+0x68>)
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b9a:	f002 fe1c 	bl	80047d6 <HAL_UART_Receive_IT>
	/* USER CODE END USART3_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000013c 	.word	0x2000013c
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	20000140 	.word	0x20000140
 8001bb0:	20000184 	.word	0x20000184

08001bb4 <uartSendString>:
void uartSendString(uint8_t *pstring) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	uint16_t length = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	81fb      	strh	r3, [r7, #14]
	// Enviar la cadena hasta encontrar el fin de la cadena ('\0')
	while (pstring[length] != '\0') {
 8001bc0:	e00b      	b.n	8001bda <uartSendString+0x26>
		HAL_UART_Transmit(&huart2, &pstring[length], 1, HAL_MAX_DELAY);
 8001bc2:	89fb      	ldrh	r3, [r7, #14]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	18d1      	adds	r1, r2, r3
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4808      	ldr	r0, [pc, #32]	@ (8001bf0 <uartSendString+0x3c>)
 8001bd0:	f002 fd76 	bl	80046c0 <HAL_UART_Transmit>
		length++;
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	81fb      	strh	r3, [r7, #14]
	while (pstring[length] != '\0') {
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ed      	bne.n	8001bc2 <uartSendString+0xe>
	}
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000013c 	.word	0x2000013c

08001bf4 <HAL_UART_RxCpltCallback>:
		HAL_UART_Receive(&huart2, &pstring[length], 1, HAL_MAX_DELAY);
		length++;
	}
}
// Callback al recibir datos por UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <HAL_UART_RxCpltCallback+0x60>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d122      	bne.n	8001c4c <HAL_UART_RxCpltCallback+0x58>
        // Almacenar el byte recibido
        if (dataLength < UART_RX_BUFFER_SIZE - 1) {
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_UART_RxCpltCallback+0x64>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2b62      	cmp	r3, #98	@ 0x62
 8001c0c:	d819      	bhi.n	8001c42 <HAL_UART_RxCpltCallback+0x4e>
            if (rxBuffer[0] == '\n' || rxBuffer[0] == '\r') {
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_UART_RxCpltCallback+0x68>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d003      	beq.n	8001c1e <HAL_UART_RxCpltCallback+0x2a>
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_UART_RxCpltCallback+0x68>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b0d      	cmp	r3, #13
 8001c1c:	d106      	bne.n	8001c2c <HAL_UART_RxCpltCallback+0x38>
                receivedData[dataLength] = '\0'; // Agregar fin de cadena
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_UART_RxCpltCallback+0x64>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_UART_RxCpltCallback+0x6c>)
 8001c26:	2100      	movs	r1, #0
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	e00a      	b.n	8001c42 <HAL_UART_RxCpltCallback+0x4e>
            } else {
                receivedData[dataLength++] = rxBuffer[0];
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_UART_RxCpltCallback+0x64>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	b291      	uxth	r1, r2
 8001c34:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <HAL_UART_RxCpltCallback+0x64>)
 8001c36:	8011      	strh	r1, [r2, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_UART_RxCpltCallback+0x68>)
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_UART_RxCpltCallback+0x6c>)
 8001c40:	5499      	strb	r1, [r3, r2]
            }
        }
        // Reinicia la recepción
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	4905      	ldr	r1, [pc, #20]	@ (8001c5c <HAL_UART_RxCpltCallback+0x68>)
 8001c46:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <HAL_UART_RxCpltCallback+0x70>)
 8001c48:	f002 fdc5 	bl	80047d6 <HAL_UART_Receive_IT>
    }
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40004400 	.word	0x40004400
 8001c58:	2000024c 	.word	0x2000024c
 8001c5c:	20000184 	.word	0x20000184
 8001c60:	200001e8 	.word	0x200001e8
 8001c64:	2000013c 	.word	0x2000013c

08001c68 <uartGetReceivedData>:


// Devuelve los datos recibidos
uint8_t *uartGetReceivedData(void) {
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
    receivedData[dataLength] = '\0'; // Agregar fin de cadena
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <uartGetReceivedData+0x24>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <uartGetReceivedData+0x28>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	5499      	strb	r1, [r3, r2]
    dataLength = 0; // Reinicia la longitud
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <uartGetReceivedData+0x24>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
    return receivedData;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <uartGetReceivedData+0x28>)
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2000024c 	.word	0x2000024c
 8001c90:	200001e8 	.word	0x200001e8

08001c94 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f023 030f 	bic.w	r3, r3, #15
 8001ca4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f043 030c 	orr.w	r3, r3, #12
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	f043 030c 	orr.w	r3, r3, #12
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd4:	f107 0208 	add.w	r2, r7, #8
 8001cd8:	2364      	movs	r3, #100	@ 0x64
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2304      	movs	r3, #4
 8001cde:	214e      	movs	r1, #78	@ 0x4e
 8001ce0:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <lcd_send_cmd+0x5c>)
 8001ce2:	f001 fc31 	bl	8003548 <HAL_I2C_Master_Transmit>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200000e8 	.word	0x200000e8

08001cf4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f023 030f 	bic.w	r3, r3, #15
 8001d04:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	f043 030d 	orr.w	r3, r3, #13
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	f043 0309 	orr.w	r3, r3, #9
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	f043 030d 	orr.w	r3, r3, #13
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	f043 0309 	orr.w	r3, r3, #9
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d34:	f107 0208 	add.w	r2, r7, #8
 8001d38:	2364      	movs	r3, #100	@ 0x64
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	214e      	movs	r1, #78	@ 0x4e
 8001d40:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <lcd_send_data+0x5c>)
 8001d42:	f001 fc01 	bl	8003548 <HAL_I2C_Master_Transmit>
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000e8 	.word	0x200000e8

08001d54 <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	68b8      	ldr	r0, [r7, #8]
 8001d64:	f000 f81e 	bl	8001da4 <lcd_put_cur>
	lcd_send_string(string);
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f877 	bl	8001e5c <lcd_send_string>
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <lcd_clear>:

void lcd_clear (void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001d7c:	2080      	movs	r0, #128	@ 0x80
 8001d7e:	f7ff ff89 	bl	8001c94 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	e005      	b.n	8001d94 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001d88:	2020      	movs	r0, #32
 8001d8a:	f7ff ffb3 	bl	8001cf4 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3301      	adds	r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b45      	cmp	r3, #69	@ 0x45
 8001d98:	ddf6      	ble.n	8001d88 <lcd_clear+0x12>
	}
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    switch (row)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <lcd_put_cur+0x18>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <lcd_put_cur+0x22>
 8001dba:	e009      	b.n	8001dd0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc2:	603b      	str	r3, [r7, #0]
            break;
 8001dc4:	e004      	b.n	8001dd0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001dcc:	603b      	str	r3, [r7, #0]
            break;
 8001dce:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5d 	bl	8001c94 <lcd_send_cmd>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <lcd_init>:


void lcd_init (void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001de6:	2032      	movs	r0, #50	@ 0x32
 8001de8:	f000 f8c0 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001dec:	2030      	movs	r0, #48	@ 0x30
 8001dee:	f7ff ff51 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001df2:	2005      	movs	r0, #5
 8001df4:	f000 f8ba 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001df8:	2030      	movs	r0, #48	@ 0x30
 8001dfa:	f7ff ff4b 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 f8b4 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001e04:	2030      	movs	r0, #48	@ 0x30
 8001e06:	f7ff ff45 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f000 f8ae 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001e10:	2020      	movs	r0, #32
 8001e12:	f7ff ff3f 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(10);
 8001e16:	200a      	movs	r0, #10
 8001e18:	f000 f8a8 	bl	8001f6c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001e1c:	2028      	movs	r0, #40	@ 0x28
 8001e1e:	f7ff ff39 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 f8a2 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001e28:	2008      	movs	r0, #8
 8001e2a:	f7ff ff33 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 f89c 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff ff2d 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 f896 	bl	8001f6c <HAL_Delay>
	HAL_Delay(1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 f893 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e46:	2006      	movs	r0, #6
 8001e48:	f7ff ff24 	bl	8001c94 <lcd_send_cmd>
	HAL_Delay(1);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f000 f88d 	bl	8001f6c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7ff ff1e 	bl	8001c94 <lcd_send_cmd>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001e64:	e006      	b.n	8001e74 <lcd_send_string+0x18>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff40 	bl	8001cf4 <lcd_send_data>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f4      	bne.n	8001e66 <lcd_send_string+0xa>
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <HAL_Init+0x40>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <HAL_Init+0x40>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_Init+0x40>)
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f000 ff6b 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 f808 	bl	8001ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebc:	f7ff f98a 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023c00 	.word	0x40023c00

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x54>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_InitTick+0x58>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 ff83 	bl	8002df6 <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00e      	b.n	8001f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d80a      	bhi.n	8001f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f000 ff4b 	bl	8002da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f0c:	4a06      	ldr	r2, [pc, #24]	@ (8001f28 <HAL_InitTick+0x5c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x20>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <HAL_IncTick+0x24>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	20000250 	.word	0x20000250

08001f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000250 	.word	0x20000250

08001f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff ffee 	bl	8001f54 <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d005      	beq.n	8001f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f86:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_Delay+0x44>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f92:	bf00      	nop
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d8f7      	bhi.n	8001f94 <HAL_Delay+0x28>
  {
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e033      	b.n	8002032 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff f926 	bl	8001224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ffa:	f023 0302 	bic.w	r3, r3, #2
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fcea 	bl	80029e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
 8002022:	e001      	b.n	8002028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Start+0x1a>
 8002052:	2302      	movs	r3, #2
 8002054:	e0b2      	b.n	80021bc <HAL_ADC_Start+0x180>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d018      	beq.n	800209e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800207c:	4b52      	ldr	r3, [pc, #328]	@ (80021c8 <HAL_ADC_Start+0x18c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a52      	ldr	r2, [pc, #328]	@ (80021cc <HAL_ADC_Start+0x190>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0c9a      	lsrs	r2, r3, #18
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002090:	e002      	b.n	8002098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3b01      	subs	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d17a      	bne.n	80021a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ea:	d106      	bne.n	80020fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	f023 0206 	bic.w	r2, r3, #6
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002108:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_ADC_Start+0x194>)
 800210a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002114:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2b00      	cmp	r3, #0
 8002120:	d12a      	bne.n	8002178 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_ADC_Start+0x198>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d015      	beq.n	8002158 <HAL_ADC_Start+0x11c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a29      	ldr	r2, [pc, #164]	@ (80021d8 <HAL_ADC_Start+0x19c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d105      	bne.n	8002142 <HAL_ADC_Start+0x106>
 8002136:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <HAL_ADC_Start+0x194>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a25      	ldr	r2, [pc, #148]	@ (80021dc <HAL_ADC_Start+0x1a0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d136      	bne.n	80021ba <HAL_ADC_Start+0x17e>
 800214c:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <HAL_ADC_Start+0x194>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d130      	bne.n	80021ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d129      	bne.n	80021ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e020      	b.n	80021ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a15      	ldr	r2, [pc, #84]	@ (80021d4 <HAL_ADC_Start+0x198>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11b      	bne.n	80021ba <HAL_ADC_Start+0x17e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d114      	bne.n	80021ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e00b      	b.n	80021ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20000000 	.word	0x20000000
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	40012300 	.word	0x40012300
 80021d4:	40012000 	.word	0x40012000
 80021d8:	40012100 	.word	0x40012100
 80021dc:	40012200 	.word	0x40012200

080021e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Stop+0x16>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e021      	b.n	800223a <HAL_ADC_Stop+0x5a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002262:	d113      	bne.n	800228c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800226e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002272:	d10b      	bne.n	800228c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e063      	b.n	8002354 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800228c:	f7ff fe62 	bl	8001f54 <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002292:	e021      	b.n	80022d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d01d      	beq.n	80022d8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_ADC_PollForConversion+0x6c>
 80022a2:	f7ff fe57 	bl	8001f54 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d212      	bcs.n	80022d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d00b      	beq.n	80022d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e03d      	b.n	8002354 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d1d6      	bne.n	8002294 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0212 	mvn.w	r2, #18
 80022ee:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d123      	bne.n	8002352 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11f      	bne.n	8002352 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800232a:	2b00      	cmp	r3, #0
 800232c:	d111      	bne.n	8002352 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Start_IT+0x1a>
 8002372:	2302      	movs	r3, #2
 8002374:	e0bd      	b.n	80024f2 <HAL_ADC_Start_IT+0x196>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d018      	beq.n	80023be <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800239c:	4b58      	ldr	r3, [pc, #352]	@ (8002500 <HAL_ADC_Start_IT+0x1a4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_ADC_Start_IT+0x1a8>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9a      	lsrs	r2, r3, #18
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f9      	bne.n	80023b2 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 8085 	bne.w	80024d8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800240c:	d106      	bne.n	800241c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	f023 0206 	bic.w	r2, r3, #6
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	645a      	str	r2, [r3, #68]	@ 0x44
 800241a:	e002      	b.n	8002422 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_ADC_Start_IT+0x1ac>)
 800242c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002436:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002446:	f043 0320 	orr.w	r3, r3, #32
 800244a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12a      	bne.n	80024ae <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2b      	ldr	r2, [pc, #172]	@ (800250c <HAL_ADC_Start_IT+0x1b0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d015      	beq.n	800248e <HAL_ADC_Start_IT+0x132>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2a      	ldr	r2, [pc, #168]	@ (8002510 <HAL_ADC_Start_IT+0x1b4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d105      	bne.n	8002478 <HAL_ADC_Start_IT+0x11c>
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_ADC_Start_IT+0x1ac>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a25      	ldr	r2, [pc, #148]	@ (8002514 <HAL_ADC_Start_IT+0x1b8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d136      	bne.n	80024f0 <HAL_ADC_Start_IT+0x194>
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <HAL_ADC_Start_IT+0x1ac>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d130      	bne.n	80024f0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d129      	bne.n	80024f0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	e020      	b.n	80024f0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a16      	ldr	r2, [pc, #88]	@ (800250c <HAL_ADC_Start_IT+0x1b0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d11b      	bne.n	80024f0 <HAL_ADC_Start_IT+0x194>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d114      	bne.n	80024f0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	e00b      	b.n	80024f0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f043 0210 	orr.w	r2, r3, #16
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000
 8002504:	431bde83 	.word	0x431bde83
 8002508:	40012300 	.word	0x40012300
 800250c:	40012000 	.word	0x40012000
 8002510:	40012100 	.word	0x40012100
 8002514:	40012200 	.word	0x40012200

08002518 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d049      	beq.n	80025e2 <HAL_ADC_IRQHandler+0xca>
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d046      	beq.n	80025e2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d12b      	bne.n	80025d2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d127      	bne.n	80025d2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800259a:	2b00      	cmp	r3, #0
 800259c:	d119      	bne.n	80025d2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0220 	bic.w	r2, r2, #32
 80025ac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff f984 	bl	80018e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0212 	mvn.w	r2, #18
 80025e0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d057      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x190>
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d054      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d139      	bne.n	8002698 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d12b      	bne.n	8002698 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800264a:	2b00      	cmp	r3, #0
 800264c:	d124      	bne.n	8002698 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d11d      	bne.n	8002698 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002660:	2b00      	cmp	r3, #0
 8002662:	d119      	bne.n	8002698 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002672:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa9d 	bl	8002bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 020c 	mvn.w	r2, #12
 80026a6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d017      	beq.n	80026ee <HAL_ADC_IRQHandler+0x1d6>
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10d      	bne.n	80026ee <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f837 	bl	8002752 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0201 	mvn.w	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026fc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_ADC_IRQHandler+0x218>
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f043 0202 	orr.w	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0220 	mvn.w	r2, #32
 800271e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f820 	bl	8002766 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f06f 0220 	mvn.w	r2, #32
 800272e:	601a      	str	r2, [r3, #0]
  }
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e113      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x244>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d925      	bls.n	80027f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68d9      	ldr	r1, [r3, #12]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	3b1e      	subs	r3, #30
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	4603      	mov	r3, r0
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4403      	add	r3, r0
 80027e6:	3b1e      	subs	r3, #30
 80027e8:	409a      	lsls	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	e022      	b.n	800283a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6919      	ldr	r1, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	2207      	movs	r2, #7
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	4603      	mov	r3, r0
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4403      	add	r3, r0
 8002830:	409a      	lsls	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b06      	cmp	r3, #6
 8002840:	d824      	bhi.n	800288c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b05      	subs	r3, #5
 8002854:	221f      	movs	r2, #31
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b05      	subs	r3, #5
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	635a      	str	r2, [r3, #52]	@ 0x34
 800288a:	e04c      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d824      	bhi.n	80028de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b23      	subs	r3, #35	@ 0x23
 80028a6:	221f      	movs	r2, #31
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43da      	mvns	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	400a      	ands	r2, r1
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b23      	subs	r3, #35	@ 0x23
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
 80028dc:	e023      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b41      	subs	r3, #65	@ 0x41
 80028f0:	221f      	movs	r2, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	400a      	ands	r2, r1
 80028fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	4618      	mov	r0, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b41      	subs	r3, #65	@ 0x41
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_ADC_ConfigChannel+0x250>)
 8002928:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <HAL_ADC_ConfigChannel+0x254>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10f      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1d8>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b12      	cmp	r3, #18
 800293a:	d10b      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_ADC_ConfigChannel+0x254>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12b      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <HAL_ADC_ConfigChannel+0x258>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d003      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x1f4>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b11      	cmp	r3, #17
 800296e:	d122      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <HAL_ADC_ConfigChannel+0x258>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d111      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a11      	ldr	r2, [pc, #68]	@ (80029dc <HAL_ADC_ConfigChannel+0x260>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	0c9a      	lsrs	r2, r3, #18
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029a8:	e002      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f9      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40012300 	.word	0x40012300
 80029d0:	40012000 	.word	0x40012000
 80029d4:	10000012 	.word	0x10000012
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e8:	4b79      	ldr	r3, [pc, #484]	@ (8002bd0 <ADC_Init+0x1f0>)
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	4a58      	ldr	r2, [pc, #352]	@ (8002bd4 <ADC_Init+0x1f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e00f      	b.n	8002ade <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0202 	bic.w	r2, r2, #2
 8002aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7e1b      	ldrb	r3, [r3, #24]
 8002af8:	005a      	lsls	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01b      	beq.n	8002b44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	3b01      	subs	r3, #1
 8002b38:	035a      	lsls	r2, r3, #13
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e007      	b.n	8002b54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	051a      	lsls	r2, r3, #20
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b96:	025a      	lsls	r2, r3, #9
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	029a      	lsls	r2, r3, #10
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40012300 	.word	0x40012300
 8002bd4:	0f000001 	.word	0x0f000001

08002bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4907      	ldr	r1, [pc, #28]	@ (8002c88 <__NVIC_EnableIRQ+0x38>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	@ (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
         );
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff8e 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff29 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff3e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff8e 	bl	8002ce0 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff31 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff f89a 	bl	8001f54 <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d008      	beq.n	8002e40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e052      	b.n	8002ee6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0216 	bic.w	r2, r2, #22
 8002e4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <HAL_DMA_Abort+0x62>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0208 	bic.w	r2, r2, #8
 8002e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e90:	e013      	b.n	8002eba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e92:	f7ff f85f 	bl	8001f54 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d90c      	bls.n	8002eba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e015      	b.n	8002ee6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e4      	bne.n	8002e92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	223f      	movs	r2, #63	@ 0x3f
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d004      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2280      	movs	r2, #128	@ 0x80
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e00c      	b.n	8002f26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	@ 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e177      	b.n	8003240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	f040 8166 	bne.w	800323a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d005      	beq.n	8002f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d130      	bne.n	8002fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	2203      	movs	r2, #3
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 0201 	and.w	r2, r3, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d017      	beq.n	8003024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	2203      	movs	r2, #3
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d123      	bne.n	8003078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	08da      	lsrs	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3208      	adds	r2, #8
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0203 	and.w	r2, r3, #3
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80c0 	beq.w	800323a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_GPIO_Init+0x324>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_GPIO_Init+0x324>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ca:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_GPIO_Init+0x324>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d6:	4a61      	ldr	r2, [pc, #388]	@ (800325c <HAL_GPIO_Init+0x328>)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	3302      	adds	r3, #2
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	@ (8003260 <HAL_GPIO_Init+0x32c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d037      	beq.n	8003172 <HAL_GPIO_Init+0x23e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a57      	ldr	r2, [pc, #348]	@ (8003264 <HAL_GPIO_Init+0x330>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_GPIO_Init+0x23a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a56      	ldr	r2, [pc, #344]	@ (8003268 <HAL_GPIO_Init+0x334>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02b      	beq.n	800316a <HAL_GPIO_Init+0x236>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a55      	ldr	r2, [pc, #340]	@ (800326c <HAL_GPIO_Init+0x338>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d025      	beq.n	8003166 <HAL_GPIO_Init+0x232>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a54      	ldr	r2, [pc, #336]	@ (8003270 <HAL_GPIO_Init+0x33c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01f      	beq.n	8003162 <HAL_GPIO_Init+0x22e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a53      	ldr	r2, [pc, #332]	@ (8003274 <HAL_GPIO_Init+0x340>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x22a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a52      	ldr	r2, [pc, #328]	@ (8003278 <HAL_GPIO_Init+0x344>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x226>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a51      	ldr	r2, [pc, #324]	@ (800327c <HAL_GPIO_Init+0x348>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x222>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a50      	ldr	r2, [pc, #320]	@ (8003280 <HAL_GPIO_Init+0x34c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x21e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4f      	ldr	r2, [pc, #316]	@ (8003284 <HAL_GPIO_Init+0x350>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x21a>
 800314a:	2309      	movs	r3, #9
 800314c:	e012      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800314e:	230a      	movs	r3, #10
 8003150:	e010      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003152:	2308      	movs	r3, #8
 8003154:	e00e      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003156:	2307      	movs	r3, #7
 8003158:	e00c      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800315a:	2306      	movs	r3, #6
 800315c:	e00a      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800315e:	2305      	movs	r3, #5
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003162:	2304      	movs	r3, #4
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x240>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x240>
 8003172:	2300      	movs	r3, #0
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003184:	4935      	ldr	r1, [pc, #212]	@ (800325c <HAL_GPIO_Init+0x328>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <HAL_GPIO_Init+0x354>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a34      	ldr	r2, [pc, #208]	@ (8003288 <HAL_GPIO_Init+0x354>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b32      	ldr	r3, [pc, #200]	@ (8003288 <HAL_GPIO_Init+0x354>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a29      	ldr	r2, [pc, #164]	@ (8003288 <HAL_GPIO_Init+0x354>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e6:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <HAL_GPIO_Init+0x354>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320a:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <HAL_GPIO_Init+0x354>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003210:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <HAL_GPIO_Init+0x354>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003234:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <HAL_GPIO_Init+0x354>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f ae84 	bls.w	8002f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	@ 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40013800 	.word	0x40013800
 8003260:	40020000 	.word	0x40020000
 8003264:	40020400 	.word	0x40020400
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	40021000 	.word	0x40021000
 8003274:	40021400 	.word	0x40021400
 8003278:	40021800 	.word	0x40021800
 800327c:	40021c00 	.word	0x40021c00
 8003280:	40022000 	.word	0x40022000
 8003284:	40022400 	.word	0x40022400
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e12b      	b.n	800352a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd ffe8 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003324:	f001 f954 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a81      	ldr	r2, [pc, #516]	@ (8003534 <HAL_I2C_Init+0x274>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d807      	bhi.n	8003344 <HAL_I2C_Init+0x84>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a80      	ldr	r2, [pc, #512]	@ (8003538 <HAL_I2C_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e006      	b.n	8003352 <HAL_I2C_Init+0x92>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a7d      	ldr	r2, [pc, #500]	@ (800353c <HAL_I2C_Init+0x27c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0e7      	b.n	800352a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a78      	ldr	r2, [pc, #480]	@ (8003540 <HAL_I2C_Init+0x280>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a6a      	ldr	r2, [pc, #424]	@ (8003534 <HAL_I2C_Init+0x274>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d802      	bhi.n	8003394 <HAL_I2C_Init+0xd4>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3301      	adds	r3, #1
 8003392:	e009      	b.n	80033a8 <HAL_I2C_Init+0xe8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	4a69      	ldr	r2, [pc, #420]	@ (8003544 <HAL_I2C_Init+0x284>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	3301      	adds	r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	495c      	ldr	r1, [pc, #368]	@ (8003534 <HAL_I2C_Init+0x274>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d819      	bhi.n	80033fc <HAL_I2C_Init+0x13c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e59      	subs	r1, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033dc:	400b      	ands	r3, r1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_I2C_Init+0x138>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e59      	subs	r1, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	e051      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e04f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <HAL_I2C_Init+0x168>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e012      	b.n	800344e <HAL_I2C_Init+0x18e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e58      	subs	r0, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	0099      	lsls	r1, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x196>
 8003452:	2301      	movs	r3, #1
 8003454:	e022      	b.n	800349c <HAL_I2C_Init+0x1dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_I2C_Init+0x1bc>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e58      	subs	r0, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	440b      	add	r3, r1
 800346c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347a:	e00f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	6809      	ldr	r1, [r1, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6911      	ldr	r1, [r2, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	000186a0 	.word	0x000186a0
 8003538:	001e847f 	.word	0x001e847f
 800353c:	003d08ff 	.word	0x003d08ff
 8003540:	431bde83 	.word	0x431bde83
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	461a      	mov	r2, r3
 8003554:	460b      	mov	r3, r1
 8003556:	817b      	strh	r3, [r7, #10]
 8003558:	4613      	mov	r3, r2
 800355a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7fe fcfa 	bl	8001f54 <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	f040 80e0 	bne.w	8003730 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2319      	movs	r3, #25
 8003576:	2201      	movs	r2, #1
 8003578:	4970      	ldr	r1, [pc, #448]	@ (800373c <HAL_I2C_Master_Transmit+0x1f4>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f964 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
 8003588:	e0d3      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_I2C_Master_Transmit+0x50>
 8003594:	2302      	movs	r3, #2
 8003596:	e0cc      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d007      	beq.n	80035be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2221      	movs	r2, #33	@ 0x21
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2210      	movs	r2, #16
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a50      	ldr	r2, [pc, #320]	@ (8003740 <HAL_I2C_Master_Transmit+0x1f8>)
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003600:	8979      	ldrh	r1, [r7, #10]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f89c 	bl	8003744 <I2C_MasterRequestWrite>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e08d      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800362c:	e066      	b.n	80036fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fa22 	bl	8003a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_I2C_Master_Transmit+0x188>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	6a39      	ldr	r1, [r7, #32]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fa19 	bl	8003b0c <I2C_WaitOnBTFFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d107      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e01a      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	2b00      	cmp	r3, #0
 8003702:	d194      	bne.n	800362e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d006      	beq.n	800376e <I2C_MasterRequestWrite+0x2a>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d003      	beq.n	800376e <I2C_MasterRequestWrite+0x2a>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800376c:	d108      	bne.n	8003780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e00b      	b.n	8003798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	2b12      	cmp	r3, #18
 8003786:	d107      	bne.n	8003798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f84f 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037be:	d103      	bne.n	80037c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e035      	b.n	8003838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037d4:	d108      	bne.n	80037e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037e4:	611a      	str	r2, [r3, #16]
 80037e6:	e01b      	b.n	8003820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	11db      	asrs	r3, r3, #7
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 030f 	orn	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	490e      	ldr	r1, [pc, #56]	@ (8003840 <I2C_MasterRequestWrite+0xfc>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f898 	bl	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e010      	b.n	8003838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4907      	ldr	r1, [pc, #28]	@ (8003844 <I2C_MasterRequestWrite+0x100>)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f888 	bl	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	00010008 	.word	0x00010008
 8003844:	00010002 	.word	0x00010002

08003848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003858:	e048      	b.n	80038ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d044      	beq.n	80038ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fe fb77 	bl	8001f54 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d139      	bne.n	80038ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10d      	bne.n	800389e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	43da      	mvns	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	e00c      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	43da      	mvns	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d116      	bne.n	80038ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e023      	b.n	8003934 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10d      	bne.n	8003912 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	43da      	mvns	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	e00c      	b.n	800392c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	43da      	mvns	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	429a      	cmp	r2, r3
 8003930:	d093      	beq.n	800385a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800394a:	e071      	b.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800395a:	d123      	bne.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e067      	b.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d041      	beq.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ac:	f7fe fad2 	bl	8001f54 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d302      	bcc.n	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d136      	bne.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	e00b      	b.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	43da      	mvns	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e021      	b.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10c      	bne.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e00b      	b.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f af6d 	bne.w	800394c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a88:	e034      	b.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f886 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e034      	b.n	8003b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d028      	beq.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe fa57 	bl	8001f54 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11d      	bne.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac2:	2b80      	cmp	r3, #128	@ 0x80
 8003ac4:	d016      	beq.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b80      	cmp	r3, #128	@ 0x80
 8003b00:	d1c3      	bne.n	8003a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b18:	e034      	b.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f83e 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e034      	b.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d028      	beq.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe fa0f 	bl	8001f54 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11d      	bne.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d016      	beq.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e007      	b.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d1c3      	bne.n	8003b1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb2:	d11b      	bne.n	8003bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d129      	bne.n	8003c64 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	@ 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0210 	bic.w	r2, r2, #16
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e000      	b.n	8003c66 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
  }
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d12a      	bne.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	@ 0x24
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	f023 030f 	bic.w	r3, r3, #15
 8003cb2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	89fa      	ldrh	r2, [r7, #14]
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e267      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d075      	beq.n	8003dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d0e:	4b88      	ldr	r3, [pc, #544]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d00c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1a:	4b85      	ldr	r3, [pc, #532]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d112      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d26:	4b82      	ldr	r3, [pc, #520]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	4b7e      	ldr	r3, [pc, #504]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d157      	bne.n	8003df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e242      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x74>
 8003d56:	4b76      	ldr	r3, [pc, #472]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a75      	ldr	r2, [pc, #468]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b70      	ldr	r3, [pc, #448]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6f      	ldr	r2, [pc, #444]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d88:	4b69      	ldr	r3, [pc, #420]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a65      	ldr	r2, [pc, #404]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe f8d4 	bl	8001f54 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe f8d0 	bl	8001f54 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	@ 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e207      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xc0>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f8c0 	bl	8001f54 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe f8bc 	bl	8001f54 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1f3      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	4b51      	ldr	r3, [pc, #324]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e06:	4b4a      	ldr	r3, [pc, #296]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b47      	ldr	r3, [pc, #284]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b44      	ldr	r3, [pc, #272]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x152>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1c7      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4937      	ldr	r1, [pc, #220]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b34      	ldr	r3, [pc, #208]	@ (8003f34 <HAL_RCC_OscConfig+0x244>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fe f875 	bl	8001f54 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe f871 	bl	8001f54 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1a8      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4925      	ldr	r1, [pc, #148]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b24      	ldr	r3, [pc, #144]	@ (8003f34 <HAL_RCC_OscConfig+0x244>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f854 	bl	8001f54 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f850 	bl	8001f54 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e187      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d036      	beq.n	8003f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_RCC_OscConfig+0x248>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fe f834 	bl	8001f54 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fe f830 	bl	8001f54 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e167      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <HAL_RCC_OscConfig+0x240>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x200>
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <HAL_RCC_OscConfig+0x248>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fe f81d 	bl	8001f54 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	e00e      	b.n	8003f3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe f819 	bl	8001f54 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d907      	bls.n	8003f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e150      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	42470000 	.word	0x42470000
 8003f38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ea      	bne.n	8003f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8097 	beq.w	8004084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5a:	4b81      	ldr	r3, [pc, #516]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	4a7c      	ldr	r2, [pc, #496]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f76:	4b7a      	ldr	r3, [pc, #488]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4b77      	ldr	r3, [pc, #476]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f92:	4b74      	ldr	r3, [pc, #464]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a73      	ldr	r2, [pc, #460]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fd ffd9 	bl	8001f54 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fd ffd5 	bl	8001f54 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e10c      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <HAL_RCC_OscConfig+0x474>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x2ea>
 8003fcc:	4b64      	ldr	r3, [pc, #400]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a63      	ldr	r2, [pc, #396]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	e01c      	b.n	8004014 <HAL_RCC_OscConfig+0x324>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x30c>
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fee:	4b5c      	ldr	r3, [pc, #368]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0x324>
 8003ffc:	4b58      	ldr	r3, [pc, #352]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004000:	4a57      	ldr	r2, [pc, #348]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	@ 0x70
 8004008:	4b55      	ldr	r3, [pc, #340]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a54      	ldr	r2, [pc, #336]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800400e:	f023 0304 	bic.w	r3, r3, #4
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fd ff9a 	bl	8001f54 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fd ff96 	bl	8001f54 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0cb      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	4b49      	ldr	r3, [pc, #292]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <HAL_RCC_OscConfig+0x334>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004048:	f7fd ff84 	bl	8001f54 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd ff80 	bl	8001f54 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0b5      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ee      	bne.n	8004050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b39      	ldr	r3, [pc, #228]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	4a38      	ldr	r2, [pc, #224]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80a1 	beq.w	80041d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408e:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d05c      	beq.n	8004154 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d141      	bne.n	8004126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <HAL_RCC_OscConfig+0x478>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fd ff54 	bl	8001f54 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fd ff50 	bl	8001f54 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e087      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	3b01      	subs	r3, #1
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	491b      	ldr	r1, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_RCC_OscConfig+0x478>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fd ff29 	bl	8001f54 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004106:	f7fd ff25 	bl	8001f54 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e05c      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x416>
 8004124:	e054      	b.n	80041d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_RCC_OscConfig+0x478>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fd ff12 	bl	8001f54 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fd ff0e 	bl	8001f54 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e045      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_OscConfig+0x470>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x444>
 8004152:	e03d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e038      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
 8004160:	40023800 	.word	0x40023800
 8004164:	40007000 	.word	0x40007000
 8004168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800416c:	4b1b      	ldr	r3, [pc, #108]	@ (80041dc <HAL_RCC_OscConfig+0x4ec>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d028      	beq.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d121      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d11a      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d111      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800

080041e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0cc      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b68      	ldr	r3, [pc, #416]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d90c      	bls.n	800421c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b65      	ldr	r3, [pc, #404]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b63      	ldr	r3, [pc, #396]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0b8      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004234:	4b59      	ldr	r3, [pc, #356]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a58      	ldr	r2, [pc, #352]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800423e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800424c:	4b53      	ldr	r3, [pc, #332]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a52      	ldr	r2, [pc, #328]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b50      	ldr	r3, [pc, #320]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	494d      	ldr	r1, [pc, #308]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d044      	beq.n	8004300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b47      	ldr	r3, [pc, #284]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d119      	bne.n	80042be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d003      	beq.n	800429e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	2b03      	cmp	r3, #3
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	4b3f      	ldr	r3, [pc, #252]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b3b      	ldr	r3, [pc, #236]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e067      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042be:	4b37      	ldr	r3, [pc, #220]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4934      	ldr	r1, [pc, #208]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d0:	f7fd fe40 	bl	8001f54 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7fd fe3c 	bl	8001f54 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e04f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	4b2b      	ldr	r3, [pc, #172]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 020c 	and.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1eb      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	4b25      	ldr	r3, [pc, #148]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d20c      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b22      	ldr	r3, [pc, #136]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b20      	ldr	r3, [pc, #128]	@ (8004398 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e032      	b.n	800438e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b19      	ldr	r3, [pc, #100]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4916      	ldr	r1, [pc, #88]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004352:	4b12      	ldr	r3, [pc, #72]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490e      	ldr	r1, [pc, #56]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004366:	f000 f821 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800436a:	4602      	mov	r2, r0
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	490a      	ldr	r1, [pc, #40]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004378:	5ccb      	ldrb	r3, [r1, r3]
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	4a09      	ldr	r2, [pc, #36]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004382:	4b09      	ldr	r3, [pc, #36]	@ (80043a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fda0 	bl	8001ecc <HAL_InitTick>

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40023c00 	.word	0x40023c00
 800439c:	40023800 	.word	0x40023800
 80043a0:	0800637c 	.word	0x0800637c
 80043a4:	20000000 	.word	0x20000000
 80043a8:	20000004 	.word	0x20000004

080043ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b094      	sub	sp, #80	@ 0x50
 80043b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c4:	4b79      	ldr	r3, [pc, #484]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d00d      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x40>
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	f200 80e1 	bhi.w	8004598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x34>
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043de:	e0db      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b73      	ldr	r3, [pc, #460]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e4:	e0db      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e6:	4b73      	ldr	r3, [pc, #460]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80043e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ea:	e0d8      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ec:	4b6f      	ldr	r3, [pc, #444]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f6:	4b6d      	ldr	r3, [pc, #436]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d063      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	2200      	movs	r2, #0
 800440a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800440c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
 800441a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004430:	0150      	lsls	r0, r2, #5
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4621      	mov	r1, r4
 8004438:	1a51      	subs	r1, r2, r1
 800443a:	6139      	str	r1, [r7, #16]
 800443c:	4629      	mov	r1, r5
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004450:	4659      	mov	r1, fp
 8004452:	018b      	lsls	r3, r1, #6
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800445a:	4651      	mov	r1, sl
 800445c:	018a      	lsls	r2, r1, #6
 800445e:	4651      	mov	r1, sl
 8004460:	ebb2 0801 	subs.w	r8, r2, r1
 8004464:	4659      	mov	r1, fp
 8004466:	eb63 0901 	sbc.w	r9, r3, r1
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800447a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447e:	4690      	mov	r8, r2
 8004480:	4699      	mov	r9, r3
 8004482:	4623      	mov	r3, r4
 8004484:	eb18 0303 	adds.w	r3, r8, r3
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	462b      	mov	r3, r5
 800448c:	eb49 0303 	adc.w	r3, r9, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800449e:	4629      	mov	r1, r5
 80044a0:	024b      	lsls	r3, r1, #9
 80044a2:	4621      	mov	r1, r4
 80044a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a8:	4621      	mov	r1, r4
 80044aa:	024a      	lsls	r2, r1, #9
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044bc:	f7fc fae6 	bl	8000a8c <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c8:	e058      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b38      	ldr	r3, [pc, #224]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	2200      	movs	r2, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	4611      	mov	r1, r2
 80044d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	f04f 0000 	mov.w	r0, #0
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	0159      	lsls	r1, r3, #5
 80044f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f6:	0150      	lsls	r0, r2, #5
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4641      	mov	r1, r8
 80044fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb63 0b01 	sbc.w	fp, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800451c:	ebb2 040a 	subs.w	r4, r2, sl
 8004520:	eb63 050b 	sbc.w	r5, r3, fp
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	00eb      	lsls	r3, r5, #3
 800452e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004532:	00e2      	lsls	r2, r4, #3
 8004534:	4614      	mov	r4, r2
 8004536:	461d      	mov	r5, r3
 8004538:	4643      	mov	r3, r8
 800453a:	18e3      	adds	r3, r4, r3
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	464b      	mov	r3, r9
 8004540:	eb45 0303 	adc.w	r3, r5, r3
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004552:	4629      	mov	r1, r5
 8004554:	028b      	lsls	r3, r1, #10
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800455c:	4621      	mov	r1, r4
 800455e:	028a      	lsls	r2, r1, #10
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004566:	2200      	movs	r2, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	61fa      	str	r2, [r7, #28]
 800456c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004570:	f7fc fa8c 	bl	8000a8c <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4613      	mov	r3, r2
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	3301      	adds	r3, #1
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800458c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800458e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004596:	e002      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800459c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3750      	adds	r7, #80	@ 0x50
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	007a1200 	.word	0x007a1200

080045b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045bc:	4b03      	ldr	r3, [pc, #12]	@ (80045cc <HAL_RCC_GetHCLKFreq+0x14>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000000 	.word	0x20000000

080045d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d4:	f7ff fff0 	bl	80045b8 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0a9b      	lsrs	r3, r3, #10
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	@ (80045f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	0800638c 	.word	0x0800638c

080045f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045fc:	f7ff ffdc 	bl	80045b8 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0b5b      	lsrs	r3, r3, #13
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	@ (800461c <HAL_RCC_GetPCLK2Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	0800638c 	.word	0x0800638c

08004620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e042      	b.n	80046b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fe80 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	@ 0x24
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fdbd 	bl	80051e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	@ 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d175      	bne.n	80047cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Transmit+0x2c>
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e06e      	b.n	80047ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2221      	movs	r2, #33	@ 0x21
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fe:	f7fd fc29 	bl	8001f54 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004718:	d108      	bne.n	800472c <HAL_UART_Transmit+0x6c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e003      	b.n	8004734 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004734:	e02e      	b.n	8004794 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	@ 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fb1f 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e03a      	b.n	80047ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e007      	b.n	8004786 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1cb      	bne.n	8004736 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2140      	movs	r1, #64	@ 0x40
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 faeb 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e006      	b.n	80047ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	4613      	mov	r3, r2
 80047e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d112      	bne.n	8004816 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Receive_IT+0x26>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e00b      	b.n	8004818 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	461a      	mov	r2, r3
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fb12 	bl	8004e36 <UART_Start_Receive_IT>
 8004812:	4603      	mov	r3, r0
 8004814:	e000      	b.n	8004818 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004816:	2302      	movs	r3, #2
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b0ba      	sub	sp, #232	@ 0xe8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800484c:	2300      	movs	r3, #0
 800484e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800485e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_UART_IRQHandler+0x66>
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fbf2 	bl	8005068 <UART_Receive_IT>
      return;
 8004884:	e25b      	b.n	8004d3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80de 	beq.w	8004a4c <HAL_UART_IRQHandler+0x22c>
 8004890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80d1 	beq.w	8004a4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0xae>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xd2>
 80048da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_UART_IRQHandler+0xf6>
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	f043 0204 	orr.w	r2, r3, #4
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <HAL_UART_IRQHandler+0x126>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800492e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 81f2 	beq.w	8004d34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_UART_IRQHandler+0x14e>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb7d 	bl	8005068 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_UART_IRQHandler+0x17a>
 8004992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04f      	beq.n	8004a3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa85 	bl	8004eaa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049aa:	2b40      	cmp	r3, #64	@ 0x40
 80049ac:	d141      	bne.n	8004a32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1d9      	bne.n	80049ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d013      	beq.n	8004a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	4a7e      	ldr	r2, [pc, #504]	@ (8004c00 <HAL_UART_IRQHandler+0x3e0>)
 8004a08:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fa6d 	bl	8002eee <HAL_DMA_Abort_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a24:	4610      	mov	r0, r2
 8004a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e00e      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f994 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e00a      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f990 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e006      	b.n	8004a48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f98c 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a46:	e175      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	bf00      	nop
    return;
 8004a4a:	e173      	b.n	8004d34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 814f 	bne.w	8004cf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8148 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8141 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	f040 80b6 	bne.w	8004c04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8145 	beq.w	8004d38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	f080 813e 	bcs.w	8004d38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ac2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ace:	f000 8088 	beq.w	8004be2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004afe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1d9      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e1      	bne.n	8004b1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3314      	adds	r3, #20
 8004b60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3314      	adds	r3, #20
 8004b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e3      	bne.n	8004b5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bc6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e3      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe f916 	bl	8002e0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f8b7 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bfe:	e09b      	b.n	8004d38 <HAL_UART_IRQHandler+0x518>
 8004c00:	08004f71 	.word	0x08004f71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 808e 	beq.w	8004d3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8089 	beq.w	8004d3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e3      	bne.n	8004c2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	623b      	str	r3, [r7, #32]
   return(result);
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e3      	bne.n	8004c62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ccc:	61fa      	str	r2, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e3      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f83d 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cf2:	e023      	b.n	8004d3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <HAL_UART_IRQHandler+0x4f4>
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f943 	bl	8004f98 <UART_Transmit_IT>
    return;
 8004d12:	e014      	b.n	8004d3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00e      	beq.n	8004d3e <HAL_UART_IRQHandler+0x51e>
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f983 	bl	8005038 <UART_EndTransmit_IT>
    return;
 8004d32:	e004      	b.n	8004d3e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d3c:	bf00      	nop
  }
}
 8004d3e:	37e8      	adds	r7, #232	@ 0xe8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	e03b      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d037      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fd f8d9 	bl	8001f54 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e03a      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d023      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b80      	cmp	r3, #128	@ 0x80
 8004dca:	d020      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b40      	cmp	r3, #64	@ 0x40
 8004dd0:	d01d      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d116      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f857 	bl	8004eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2208      	movs	r2, #8
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e00f      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4013      	ands	r3, r2
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	bf0c      	ite	eq
 8004e1e:	2301      	moveq	r3, #1
 8004e20:	2300      	movne	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d0b4      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	88fa      	ldrh	r2, [r7, #6]
 8004e4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2222      	movs	r2, #34	@ 0x22
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e7a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0220 	orr.w	r2, r2, #32
 8004e9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b095      	sub	sp, #84	@ 0x54
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ed8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e5      	bne.n	8004eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e5      	bne.n	8004ee6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d119      	bne.n	8004f56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f42:	61ba      	str	r2, [r7, #24]
 8004f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6979      	ldr	r1, [r7, #20]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e5      	bne.n	8004f22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f64:	bf00      	nop
 8004f66:	3754      	adds	r7, #84	@ 0x54
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff fee4 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b21      	cmp	r3, #33	@ 0x21
 8004faa:	d13e      	bne.n	800502a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb4:	d114      	bne.n	8004fe0 <UART_Transmit_IT+0x48>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]
 8004fde:	e008      	b.n	8004ff2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	1c59      	adds	r1, r3, #1
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6211      	str	r1, [r2, #32]
 8004fea:	781a      	ldrb	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4619      	mov	r1, r3
 8005000:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005014:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005024:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e000      	b.n	800502c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800502a:	2302      	movs	r3, #2
  }
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800504e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fe73 	bl	8004d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08c      	sub	sp, #48	@ 0x30
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b22      	cmp	r3, #34	@ 0x22
 800507a:	f040 80ae 	bne.w	80051da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005086:	d117      	bne.n	80050b8 <UART_Receive_IT+0x50>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d113      	bne.n	80050b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005090:	2300      	movs	r3, #0
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80050b6:	e026      	b.n	8005106 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ca:	d007      	beq.n	80050dc <UART_Receive_IT+0x74>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <UART_Receive_IT+0x82>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e008      	b.n	80050fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29b      	uxth	r3, r3
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4619      	mov	r1, r3
 8005114:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005116:	2b00      	cmp	r3, #0
 8005118:	d15d      	bne.n	80051d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0220 	bic.w	r2, r2, #32
 8005128:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005138:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	2b01      	cmp	r3, #1
 800515e:	d135      	bne.n	80051cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005186:	623a      	str	r2, [r7, #32]
 8005188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	69f9      	ldr	r1, [r7, #28]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	61bb      	str	r3, [r7, #24]
   return(result);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d10a      	bne.n	80051be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fdd1 	bl	8004d6c <HAL_UARTEx_RxEventCallback>
 80051ca:	e002      	b.n	80051d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fc fd11 	bl	8001bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e002      	b.n	80051dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3730      	adds	r7, #48	@ 0x30
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e8:	b0c0      	sub	sp, #256	@ 0x100
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	68d9      	ldr	r1, [r3, #12]
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	ea40 0301 	orr.w	r3, r0, r1
 800520c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	431a      	orrs	r2, r3
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800523c:	f021 010c 	bic.w	r1, r1, #12
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800524a:	430b      	orrs	r3, r1
 800524c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525e:	6999      	ldr	r1, [r3, #24]
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	ea40 0301 	orr.w	r3, r0, r1
 800526a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b8f      	ldr	r3, [pc, #572]	@ (80054b0 <UART_SetConfig+0x2cc>)
 8005274:	429a      	cmp	r2, r3
 8005276:	d005      	beq.n	8005284 <UART_SetConfig+0xa0>
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b8d      	ldr	r3, [pc, #564]	@ (80054b4 <UART_SetConfig+0x2d0>)
 8005280:	429a      	cmp	r2, r3
 8005282:	d104      	bne.n	800528e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7ff f9b8 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 8005288:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800528c:	e003      	b.n	8005296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800528e:	f7ff f99f 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8005292:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052a0:	f040 810c 	bne.w	80054bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052b6:	4622      	mov	r2, r4
 80052b8:	462b      	mov	r3, r5
 80052ba:	1891      	adds	r1, r2, r2
 80052bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052be:	415b      	adcs	r3, r3
 80052c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052c6:	4621      	mov	r1, r4
 80052c8:	eb12 0801 	adds.w	r8, r2, r1
 80052cc:	4629      	mov	r1, r5
 80052ce:	eb43 0901 	adc.w	r9, r3, r1
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052e6:	4690      	mov	r8, r2
 80052e8:	4699      	mov	r9, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	eb18 0303 	adds.w	r3, r8, r3
 80052f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052f4:	462b      	mov	r3, r5
 80052f6:	eb49 0303 	adc.w	r3, r9, r3
 80052fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800530a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800530e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005312:	460b      	mov	r3, r1
 8005314:	18db      	adds	r3, r3, r3
 8005316:	653b      	str	r3, [r7, #80]	@ 0x50
 8005318:	4613      	mov	r3, r2
 800531a:	eb42 0303 	adc.w	r3, r2, r3
 800531e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005328:	f7fb fbb0 	bl	8000a8c <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b61      	ldr	r3, [pc, #388]	@ (80054b8 <UART_SetConfig+0x2d4>)
 8005332:	fba3 2302 	umull	r2, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	011c      	lsls	r4, r3, #4
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005344:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005354:	415b      	adcs	r3, r3
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800535c:	4641      	mov	r1, r8
 800535e:	eb12 0a01 	adds.w	sl, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb43 0b01 	adc.w	fp, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800537c:	4692      	mov	sl, r2
 800537e:	469b      	mov	fp, r3
 8005380:	4643      	mov	r3, r8
 8005382:	eb1a 0303 	adds.w	r3, sl, r3
 8005386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800538a:	464b      	mov	r3, r9
 800538c:	eb4b 0303 	adc.w	r3, fp, r3
 8005390:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053a8:	460b      	mov	r3, r1
 80053aa:	18db      	adds	r3, r3, r3
 80053ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ae:	4613      	mov	r3, r2
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053be:	f7fb fb65 	bl	8000a8c <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	4b3b      	ldr	r3, [pc, #236]	@ (80054b8 <UART_SetConfig+0x2d4>)
 80053ca:	fba3 2301 	umull	r2, r3, r3, r1
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	2264      	movs	r2, #100	@ 0x64
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	1acb      	subs	r3, r1, r3
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053de:	4b36      	ldr	r3, [pc, #216]	@ (80054b8 <UART_SetConfig+0x2d4>)
 80053e0:	fba3 2302 	umull	r2, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053ec:	441c      	add	r4, r3
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005408:	415b      	adcs	r3, r3
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800540c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6339      	str	r1, [r7, #48]	@ 0x30
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005444:	464b      	mov	r3, r9
 8005446:	460a      	mov	r2, r1
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800545c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005464:	460b      	mov	r3, r1
 8005466:	18db      	adds	r3, r3, r3
 8005468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800546a:	4613      	mov	r3, r2
 800546c:	eb42 0303 	adc.w	r3, r2, r3
 8005470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800547a:	f7fb fb07 	bl	8000a8c <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4b0d      	ldr	r3, [pc, #52]	@ (80054b8 <UART_SetConfig+0x2d4>)
 8005484:	fba3 1302 	umull	r1, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	2164      	movs	r1, #100	@ 0x64
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	3332      	adds	r3, #50	@ 0x32
 8005496:	4a08      	ldr	r2, [pc, #32]	@ (80054b8 <UART_SetConfig+0x2d4>)
 8005498:	fba2 2303 	umull	r2, r3, r2, r3
 800549c:	095b      	lsrs	r3, r3, #5
 800549e:	f003 0207 	and.w	r2, r3, #7
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4422      	add	r2, r4
 80054aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054ac:	e106      	b.n	80056bc <UART_SetConfig+0x4d8>
 80054ae:	bf00      	nop
 80054b0:	40011000 	.word	0x40011000
 80054b4:	40011400 	.word	0x40011400
 80054b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054ce:	4642      	mov	r2, r8
 80054d0:	464b      	mov	r3, r9
 80054d2:	1891      	adds	r1, r2, r2
 80054d4:	6239      	str	r1, [r7, #32]
 80054d6:	415b      	adcs	r3, r3
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054de:	4641      	mov	r1, r8
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	4649      	mov	r1, r9
 80054e4:	eb43 0501 	adc.w	r5, r3, r1
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	00eb      	lsls	r3, r5, #3
 80054f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054f6:	00e2      	lsls	r2, r4, #3
 80054f8:	4614      	mov	r4, r2
 80054fa:	461d      	mov	r5, r3
 80054fc:	4643      	mov	r3, r8
 80054fe:	18e3      	adds	r3, r4, r3
 8005500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005504:	464b      	mov	r3, r9
 8005506:	eb45 0303 	adc.w	r3, r5, r3
 800550a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800551a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800552a:	4629      	mov	r1, r5
 800552c:	008b      	lsls	r3, r1, #2
 800552e:	4621      	mov	r1, r4
 8005530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005534:	4621      	mov	r1, r4
 8005536:	008a      	lsls	r2, r1, #2
 8005538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800553c:	f7fb faa6 	bl	8000a8c <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b60      	ldr	r3, [pc, #384]	@ (80056c8 <UART_SetConfig+0x4e4>)
 8005546:	fba3 2302 	umull	r2, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	011c      	lsls	r4, r3, #4
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005558:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800555c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	61b9      	str	r1, [r7, #24]
 8005568:	415b      	adcs	r3, r3
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6139      	str	r1, [r7, #16]
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055a4:	464b      	mov	r3, r9
 80055a6:	460a      	mov	r2, r1
 80055a8:	eb42 0303 	adc.w	r3, r2, r3
 80055ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055c8:	4649      	mov	r1, r9
 80055ca:	008b      	lsls	r3, r1, #2
 80055cc:	4641      	mov	r1, r8
 80055ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d2:	4641      	mov	r1, r8
 80055d4:	008a      	lsls	r2, r1, #2
 80055d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055da:	f7fb fa57 	bl	8000a8c <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <UART_SetConfig+0x4e4>)
 80055e6:	fba3 2301 	umull	r2, r3, r3, r1
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2264      	movs	r2, #100	@ 0x64
 80055ee:	fb02 f303 	mul.w	r3, r2, r3
 80055f2:	1acb      	subs	r3, r1, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	@ 0x32
 80055f8:	4a33      	ldr	r2, [pc, #204]	@ (80056c8 <UART_SetConfig+0x4e4>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005604:	441c      	add	r4, r3
 8005606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560a:	2200      	movs	r2, #0
 800560c:	673b      	str	r3, [r7, #112]	@ 0x70
 800560e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005610:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	1891      	adds	r1, r2, r2
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	415b      	adcs	r3, r3
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005624:	4641      	mov	r1, r8
 8005626:	1851      	adds	r1, r2, r1
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	4649      	mov	r1, r9
 800562c:	414b      	adcs	r3, r1
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800563c:	4659      	mov	r1, fp
 800563e:	00cb      	lsls	r3, r1, #3
 8005640:	4651      	mov	r1, sl
 8005642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005646:	4651      	mov	r1, sl
 8005648:	00ca      	lsls	r2, r1, #3
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	4603      	mov	r3, r0
 8005650:	4642      	mov	r2, r8
 8005652:	189b      	adds	r3, r3, r2
 8005654:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005656:	464b      	mov	r3, r9
 8005658:	460a      	mov	r2, r1
 800565a:	eb42 0303 	adc.w	r3, r2, r3
 800565e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	663b      	str	r3, [r7, #96]	@ 0x60
 800566a:	667a      	str	r2, [r7, #100]	@ 0x64
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005678:	4649      	mov	r1, r9
 800567a:	008b      	lsls	r3, r1, #2
 800567c:	4641      	mov	r1, r8
 800567e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005682:	4641      	mov	r1, r8
 8005684:	008a      	lsls	r2, r1, #2
 8005686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800568a:	f7fb f9ff 	bl	8000a8c <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <UART_SetConfig+0x4e4>)
 8005694:	fba3 1302 	umull	r1, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	2164      	movs	r1, #100	@ 0x64
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	3332      	adds	r3, #50	@ 0x32
 80056a6:	4a08      	ldr	r2, [pc, #32]	@ (80056c8 <UART_SetConfig+0x4e4>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	f003 020f 	and.w	r2, r3, #15
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4422      	add	r2, r4
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056c2:	46bd      	mov	sp, r7
 80056c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c8:	51eb851f 	.word	0x51eb851f

080056cc <sniprintf>:
 80056cc:	b40c      	push	{r2, r3}
 80056ce:	b530      	push	{r4, r5, lr}
 80056d0:	4b17      	ldr	r3, [pc, #92]	@ (8005730 <sniprintf+0x64>)
 80056d2:	1e0c      	subs	r4, r1, #0
 80056d4:	681d      	ldr	r5, [r3, #0]
 80056d6:	b09d      	sub	sp, #116	@ 0x74
 80056d8:	da08      	bge.n	80056ec <sniprintf+0x20>
 80056da:	238b      	movs	r3, #139	@ 0x8b
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	f04f 30ff 	mov.w	r0, #4294967295
 80056e2:	b01d      	add	sp, #116	@ 0x74
 80056e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e8:	b002      	add	sp, #8
 80056ea:	4770      	bx	lr
 80056ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80056f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80056f4:	bf14      	ite	ne
 80056f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80056fa:	4623      	moveq	r3, r4
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005704:	9002      	str	r0, [sp, #8]
 8005706:	9006      	str	r0, [sp, #24]
 8005708:	f8ad 3016 	strh.w	r3, [sp, #22]
 800570c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800570e:	ab21      	add	r3, sp, #132	@ 0x84
 8005710:	a902      	add	r1, sp, #8
 8005712:	4628      	mov	r0, r5
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	f000 f9b5 	bl	8005a84 <_svfiprintf_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	bfbc      	itt	lt
 800571e:	238b      	movlt	r3, #139	@ 0x8b
 8005720:	602b      	strlt	r3, [r5, #0]
 8005722:	2c00      	cmp	r4, #0
 8005724:	d0dd      	beq.n	80056e2 <sniprintf+0x16>
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e7d9      	b.n	80056e2 <sniprintf+0x16>
 800572e:	bf00      	nop
 8005730:	2000000c 	.word	0x2000000c

08005734 <siprintf>:
 8005734:	b40e      	push	{r1, r2, r3}
 8005736:	b500      	push	{lr}
 8005738:	b09c      	sub	sp, #112	@ 0x70
 800573a:	ab1d      	add	r3, sp, #116	@ 0x74
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	9006      	str	r0, [sp, #24]
 8005740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005744:	4809      	ldr	r0, [pc, #36]	@ (800576c <siprintf+0x38>)
 8005746:	9107      	str	r1, [sp, #28]
 8005748:	9104      	str	r1, [sp, #16]
 800574a:	4909      	ldr	r1, [pc, #36]	@ (8005770 <siprintf+0x3c>)
 800574c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005750:	9105      	str	r1, [sp, #20]
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	a902      	add	r1, sp, #8
 8005758:	f000 f994 	bl	8005a84 <_svfiprintf_r>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	b01c      	add	sp, #112	@ 0x70
 8005764:	f85d eb04 	ldr.w	lr, [sp], #4
 8005768:	b003      	add	sp, #12
 800576a:	4770      	bx	lr
 800576c:	2000000c 	.word	0x2000000c
 8005770:	ffff0208 	.word	0xffff0208

08005774 <memset>:
 8005774:	4402      	add	r2, r0
 8005776:	4603      	mov	r3, r0
 8005778:	4293      	cmp	r3, r2
 800577a:	d100      	bne.n	800577e <memset+0xa>
 800577c:	4770      	bx	lr
 800577e:	f803 1b01 	strb.w	r1, [r3], #1
 8005782:	e7f9      	b.n	8005778 <memset+0x4>

08005784 <__errno>:
 8005784:	4b01      	ldr	r3, [pc, #4]	@ (800578c <__errno+0x8>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	2000000c 	.word	0x2000000c

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4d0d      	ldr	r5, [pc, #52]	@ (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	@ (80057cc <__libc_init_array+0x3c>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2600      	movs	r6, #0
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4d0b      	ldr	r5, [pc, #44]	@ (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	@ (80057d4 <__libc_init_array+0x44>)
 80057a4:	f000 fc66 	bl	8006074 <_init>
 80057a8:	1b64      	subs	r4, r4, r5
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2600      	movs	r6, #0
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	080063d0 	.word	0x080063d0
 80057cc:	080063d0 	.word	0x080063d0
 80057d0:	080063d0 	.word	0x080063d0
 80057d4:	080063d4 	.word	0x080063d4

080057d8 <__retarget_lock_acquire_recursive>:
 80057d8:	4770      	bx	lr

080057da <__retarget_lock_release_recursive>:
 80057da:	4770      	bx	lr

080057dc <_free_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4605      	mov	r5, r0
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d041      	beq.n	8005868 <_free_r+0x8c>
 80057e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e8:	1f0c      	subs	r4, r1, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfb8      	it	lt
 80057ee:	18e4      	addlt	r4, r4, r3
 80057f0:	f000 f8e0 	bl	80059b4 <__malloc_lock>
 80057f4:	4a1d      	ldr	r2, [pc, #116]	@ (800586c <_free_r+0x90>)
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	b933      	cbnz	r3, 8005808 <_free_r+0x2c>
 80057fa:	6063      	str	r3, [r4, #4]
 80057fc:	6014      	str	r4, [r2, #0]
 80057fe:	4628      	mov	r0, r5
 8005800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005804:	f000 b8dc 	b.w	80059c0 <__malloc_unlock>
 8005808:	42a3      	cmp	r3, r4
 800580a:	d908      	bls.n	800581e <_free_r+0x42>
 800580c:	6820      	ldr	r0, [r4, #0]
 800580e:	1821      	adds	r1, r4, r0
 8005810:	428b      	cmp	r3, r1
 8005812:	bf01      	itttt	eq
 8005814:	6819      	ldreq	r1, [r3, #0]
 8005816:	685b      	ldreq	r3, [r3, #4]
 8005818:	1809      	addeq	r1, r1, r0
 800581a:	6021      	streq	r1, [r4, #0]
 800581c:	e7ed      	b.n	80057fa <_free_r+0x1e>
 800581e:	461a      	mov	r2, r3
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b10b      	cbz	r3, 8005828 <_free_r+0x4c>
 8005824:	42a3      	cmp	r3, r4
 8005826:	d9fa      	bls.n	800581e <_free_r+0x42>
 8005828:	6811      	ldr	r1, [r2, #0]
 800582a:	1850      	adds	r0, r2, r1
 800582c:	42a0      	cmp	r0, r4
 800582e:	d10b      	bne.n	8005848 <_free_r+0x6c>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	4401      	add	r1, r0
 8005834:	1850      	adds	r0, r2, r1
 8005836:	4283      	cmp	r3, r0
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	d1e0      	bne.n	80057fe <_free_r+0x22>
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	6053      	str	r3, [r2, #4]
 8005842:	4408      	add	r0, r1
 8005844:	6010      	str	r0, [r2, #0]
 8005846:	e7da      	b.n	80057fe <_free_r+0x22>
 8005848:	d902      	bls.n	8005850 <_free_r+0x74>
 800584a:	230c      	movs	r3, #12
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	e7d6      	b.n	80057fe <_free_r+0x22>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	1821      	adds	r1, r4, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	bf04      	itt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	bf04      	itt	eq
 8005860:	1809      	addeq	r1, r1, r0
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	6054      	str	r4, [r2, #4]
 8005866:	e7ca      	b.n	80057fe <_free_r+0x22>
 8005868:	bd38      	pop	{r3, r4, r5, pc}
 800586a:	bf00      	nop
 800586c:	20000398 	.word	0x20000398

08005870 <sbrk_aligned>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4e0f      	ldr	r6, [pc, #60]	@ (80058b0 <sbrk_aligned+0x40>)
 8005874:	460c      	mov	r4, r1
 8005876:	6831      	ldr	r1, [r6, #0]
 8005878:	4605      	mov	r5, r0
 800587a:	b911      	cbnz	r1, 8005882 <sbrk_aligned+0x12>
 800587c:	f000 fba6 	bl	8005fcc <_sbrk_r>
 8005880:	6030      	str	r0, [r6, #0]
 8005882:	4621      	mov	r1, r4
 8005884:	4628      	mov	r0, r5
 8005886:	f000 fba1 	bl	8005fcc <_sbrk_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	d103      	bne.n	8005896 <sbrk_aligned+0x26>
 800588e:	f04f 34ff 	mov.w	r4, #4294967295
 8005892:	4620      	mov	r0, r4
 8005894:	bd70      	pop	{r4, r5, r6, pc}
 8005896:	1cc4      	adds	r4, r0, #3
 8005898:	f024 0403 	bic.w	r4, r4, #3
 800589c:	42a0      	cmp	r0, r4
 800589e:	d0f8      	beq.n	8005892 <sbrk_aligned+0x22>
 80058a0:	1a21      	subs	r1, r4, r0
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 fb92 	bl	8005fcc <_sbrk_r>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d1f2      	bne.n	8005892 <sbrk_aligned+0x22>
 80058ac:	e7ef      	b.n	800588e <sbrk_aligned+0x1e>
 80058ae:	bf00      	nop
 80058b0:	20000394 	.word	0x20000394

080058b4 <_malloc_r>:
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	1ccd      	adds	r5, r1, #3
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	4606      	mov	r6, r0
 80058ca:	db01      	blt.n	80058d0 <_malloc_r+0x1c>
 80058cc:	42a9      	cmp	r1, r5
 80058ce:	d904      	bls.n	80058da <_malloc_r+0x26>
 80058d0:	230c      	movs	r3, #12
 80058d2:	6033      	str	r3, [r6, #0]
 80058d4:	2000      	movs	r0, #0
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059b0 <_malloc_r+0xfc>
 80058de:	f000 f869 	bl	80059b4 <__malloc_lock>
 80058e2:	f8d8 3000 	ldr.w	r3, [r8]
 80058e6:	461c      	mov	r4, r3
 80058e8:	bb44      	cbnz	r4, 800593c <_malloc_r+0x88>
 80058ea:	4629      	mov	r1, r5
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff ffbf 	bl	8005870 <sbrk_aligned>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	4604      	mov	r4, r0
 80058f6:	d158      	bne.n	80059aa <_malloc_r+0xf6>
 80058f8:	f8d8 4000 	ldr.w	r4, [r8]
 80058fc:	4627      	mov	r7, r4
 80058fe:	2f00      	cmp	r7, #0
 8005900:	d143      	bne.n	800598a <_malloc_r+0xd6>
 8005902:	2c00      	cmp	r4, #0
 8005904:	d04b      	beq.n	800599e <_malloc_r+0xea>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	4639      	mov	r1, r7
 800590a:	4630      	mov	r0, r6
 800590c:	eb04 0903 	add.w	r9, r4, r3
 8005910:	f000 fb5c 	bl	8005fcc <_sbrk_r>
 8005914:	4581      	cmp	r9, r0
 8005916:	d142      	bne.n	800599e <_malloc_r+0xea>
 8005918:	6821      	ldr	r1, [r4, #0]
 800591a:	1a6d      	subs	r5, r5, r1
 800591c:	4629      	mov	r1, r5
 800591e:	4630      	mov	r0, r6
 8005920:	f7ff ffa6 	bl	8005870 <sbrk_aligned>
 8005924:	3001      	adds	r0, #1
 8005926:	d03a      	beq.n	800599e <_malloc_r+0xea>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	442b      	add	r3, r5
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	f8d8 3000 	ldr.w	r3, [r8]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	bb62      	cbnz	r2, 8005990 <_malloc_r+0xdc>
 8005936:	f8c8 7000 	str.w	r7, [r8]
 800593a:	e00f      	b.n	800595c <_malloc_r+0xa8>
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	1b52      	subs	r2, r2, r5
 8005940:	d420      	bmi.n	8005984 <_malloc_r+0xd0>
 8005942:	2a0b      	cmp	r2, #11
 8005944:	d917      	bls.n	8005976 <_malloc_r+0xc2>
 8005946:	1961      	adds	r1, r4, r5
 8005948:	42a3      	cmp	r3, r4
 800594a:	6025      	str	r5, [r4, #0]
 800594c:	bf18      	it	ne
 800594e:	6059      	strne	r1, [r3, #4]
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	bf08      	it	eq
 8005954:	f8c8 1000 	streq.w	r1, [r8]
 8005958:	5162      	str	r2, [r4, r5]
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f82f 	bl	80059c0 <__malloc_unlock>
 8005962:	f104 000b 	add.w	r0, r4, #11
 8005966:	1d23      	adds	r3, r4, #4
 8005968:	f020 0007 	bic.w	r0, r0, #7
 800596c:	1ac2      	subs	r2, r0, r3
 800596e:	bf1c      	itt	ne
 8005970:	1a1b      	subne	r3, r3, r0
 8005972:	50a3      	strne	r3, [r4, r2]
 8005974:	e7af      	b.n	80058d6 <_malloc_r+0x22>
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	42a3      	cmp	r3, r4
 800597a:	bf0c      	ite	eq
 800597c:	f8c8 2000 	streq.w	r2, [r8]
 8005980:	605a      	strne	r2, [r3, #4]
 8005982:	e7eb      	b.n	800595c <_malloc_r+0xa8>
 8005984:	4623      	mov	r3, r4
 8005986:	6864      	ldr	r4, [r4, #4]
 8005988:	e7ae      	b.n	80058e8 <_malloc_r+0x34>
 800598a:	463c      	mov	r4, r7
 800598c:	687f      	ldr	r7, [r7, #4]
 800598e:	e7b6      	b.n	80058fe <_malloc_r+0x4a>
 8005990:	461a      	mov	r2, r3
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	42a3      	cmp	r3, r4
 8005996:	d1fb      	bne.n	8005990 <_malloc_r+0xdc>
 8005998:	2300      	movs	r3, #0
 800599a:	6053      	str	r3, [r2, #4]
 800599c:	e7de      	b.n	800595c <_malloc_r+0xa8>
 800599e:	230c      	movs	r3, #12
 80059a0:	6033      	str	r3, [r6, #0]
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 f80c 	bl	80059c0 <__malloc_unlock>
 80059a8:	e794      	b.n	80058d4 <_malloc_r+0x20>
 80059aa:	6005      	str	r5, [r0, #0]
 80059ac:	e7d6      	b.n	800595c <_malloc_r+0xa8>
 80059ae:	bf00      	nop
 80059b0:	20000398 	.word	0x20000398

080059b4 <__malloc_lock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	@ (80059bc <__malloc_lock+0x8>)
 80059b6:	f7ff bf0f 	b.w	80057d8 <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	20000390 	.word	0x20000390

080059c0 <__malloc_unlock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	@ (80059c8 <__malloc_unlock+0x8>)
 80059c2:	f7ff bf0a 	b.w	80057da <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	20000390 	.word	0x20000390

080059cc <__ssputs_r>:
 80059cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	688e      	ldr	r6, [r1, #8]
 80059d2:	461f      	mov	r7, r3
 80059d4:	42be      	cmp	r6, r7
 80059d6:	680b      	ldr	r3, [r1, #0]
 80059d8:	4682      	mov	sl, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	4690      	mov	r8, r2
 80059de:	d82d      	bhi.n	8005a3c <__ssputs_r+0x70>
 80059e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059e8:	d026      	beq.n	8005a38 <__ssputs_r+0x6c>
 80059ea:	6965      	ldr	r5, [r4, #20]
 80059ec:	6909      	ldr	r1, [r1, #16]
 80059ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059f2:	eba3 0901 	sub.w	r9, r3, r1
 80059f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059fa:	1c7b      	adds	r3, r7, #1
 80059fc:	444b      	add	r3, r9
 80059fe:	106d      	asrs	r5, r5, #1
 8005a00:	429d      	cmp	r5, r3
 8005a02:	bf38      	it	cc
 8005a04:	461d      	movcc	r5, r3
 8005a06:	0553      	lsls	r3, r2, #21
 8005a08:	d527      	bpl.n	8005a5a <__ssputs_r+0x8e>
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7ff ff52 	bl	80058b4 <_malloc_r>
 8005a10:	4606      	mov	r6, r0
 8005a12:	b360      	cbz	r0, 8005a6e <__ssputs_r+0xa2>
 8005a14:	6921      	ldr	r1, [r4, #16]
 8005a16:	464a      	mov	r2, r9
 8005a18:	f000 fae8 	bl	8005fec <memcpy>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	6126      	str	r6, [r4, #16]
 8005a2a:	6165      	str	r5, [r4, #20]
 8005a2c:	444e      	add	r6, r9
 8005a2e:	eba5 0509 	sub.w	r5, r5, r9
 8005a32:	6026      	str	r6, [r4, #0]
 8005a34:	60a5      	str	r5, [r4, #8]
 8005a36:	463e      	mov	r6, r7
 8005a38:	42be      	cmp	r6, r7
 8005a3a:	d900      	bls.n	8005a3e <__ssputs_r+0x72>
 8005a3c:	463e      	mov	r6, r7
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	4632      	mov	r2, r6
 8005a42:	4641      	mov	r1, r8
 8005a44:	f000 faa8 	bl	8005f98 <memmove>
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	1b9b      	subs	r3, r3, r6
 8005a4c:	60a3      	str	r3, [r4, #8]
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	4433      	add	r3, r6
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	2000      	movs	r0, #0
 8005a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	f000 fad4 	bl	8006008 <_realloc_r>
 8005a60:	4606      	mov	r6, r0
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d1e0      	bne.n	8005a28 <__ssputs_r+0x5c>
 8005a66:	6921      	ldr	r1, [r4, #16]
 8005a68:	4650      	mov	r0, sl
 8005a6a:	f7ff feb7 	bl	80057dc <_free_r>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	f8ca 3000 	str.w	r3, [sl]
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e7e9      	b.n	8005a56 <__ssputs_r+0x8a>
	...

08005a84 <_svfiprintf_r>:
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	4698      	mov	r8, r3
 8005a8a:	898b      	ldrh	r3, [r1, #12]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	b09d      	sub	sp, #116	@ 0x74
 8005a90:	4607      	mov	r7, r0
 8005a92:	460d      	mov	r5, r1
 8005a94:	4614      	mov	r4, r2
 8005a96:	d510      	bpl.n	8005aba <_svfiprintf_r+0x36>
 8005a98:	690b      	ldr	r3, [r1, #16]
 8005a9a:	b973      	cbnz	r3, 8005aba <_svfiprintf_r+0x36>
 8005a9c:	2140      	movs	r1, #64	@ 0x40
 8005a9e:	f7ff ff09 	bl	80058b4 <_malloc_r>
 8005aa2:	6028      	str	r0, [r5, #0]
 8005aa4:	6128      	str	r0, [r5, #16]
 8005aa6:	b930      	cbnz	r0, 8005ab6 <_svfiprintf_r+0x32>
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	b01d      	add	sp, #116	@ 0x74
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	2340      	movs	r3, #64	@ 0x40
 8005ab8:	616b      	str	r3, [r5, #20]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005abe:	2320      	movs	r3, #32
 8005ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac8:	2330      	movs	r3, #48	@ 0x30
 8005aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c68 <_svfiprintf_r+0x1e4>
 8005ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ad2:	f04f 0901 	mov.w	r9, #1
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	469a      	mov	sl, r3
 8005ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ade:	b10a      	cbz	r2, 8005ae4 <_svfiprintf_r+0x60>
 8005ae0:	2a25      	cmp	r2, #37	@ 0x25
 8005ae2:	d1f9      	bne.n	8005ad8 <_svfiprintf_r+0x54>
 8005ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae8:	d00b      	beq.n	8005b02 <_svfiprintf_r+0x7e>
 8005aea:	465b      	mov	r3, fp
 8005aec:	4622      	mov	r2, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff ff6b 	bl	80059cc <__ssputs_r>
 8005af6:	3001      	adds	r0, #1
 8005af8:	f000 80a7 	beq.w	8005c4a <_svfiprintf_r+0x1c6>
 8005afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005afe:	445a      	add	r2, fp
 8005b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 809f 	beq.w	8005c4a <_svfiprintf_r+0x1c6>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b16:	f10a 0a01 	add.w	sl, sl, #1
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b24:	4654      	mov	r4, sl
 8005b26:	2205      	movs	r2, #5
 8005b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2c:	484e      	ldr	r0, [pc, #312]	@ (8005c68 <_svfiprintf_r+0x1e4>)
 8005b2e:	f7fa fb6f 	bl	8000210 <memchr>
 8005b32:	9a04      	ldr	r2, [sp, #16]
 8005b34:	b9d8      	cbnz	r0, 8005b6e <_svfiprintf_r+0xea>
 8005b36:	06d0      	lsls	r0, r2, #27
 8005b38:	bf44      	itt	mi
 8005b3a:	2320      	movmi	r3, #32
 8005b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b40:	0711      	lsls	r1, r2, #28
 8005b42:	bf44      	itt	mi
 8005b44:	232b      	movmi	r3, #43	@ 0x2b
 8005b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b50:	d015      	beq.n	8005b7e <_svfiprintf_r+0xfa>
 8005b52:	9a07      	ldr	r2, [sp, #28]
 8005b54:	4654      	mov	r4, sl
 8005b56:	2000      	movs	r0, #0
 8005b58:	f04f 0c0a 	mov.w	ip, #10
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b62:	3b30      	subs	r3, #48	@ 0x30
 8005b64:	2b09      	cmp	r3, #9
 8005b66:	d94b      	bls.n	8005c00 <_svfiprintf_r+0x17c>
 8005b68:	b1b0      	cbz	r0, 8005b98 <_svfiprintf_r+0x114>
 8005b6a:	9207      	str	r2, [sp, #28]
 8005b6c:	e014      	b.n	8005b98 <_svfiprintf_r+0x114>
 8005b6e:	eba0 0308 	sub.w	r3, r0, r8
 8005b72:	fa09 f303 	lsl.w	r3, r9, r3
 8005b76:	4313      	orrs	r3, r2
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	46a2      	mov	sl, r4
 8005b7c:	e7d2      	b.n	8005b24 <_svfiprintf_r+0xa0>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	9103      	str	r1, [sp, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfbb      	ittet	lt
 8005b8a:	425b      	neglt	r3, r3
 8005b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b90:	9307      	strge	r3, [sp, #28]
 8005b92:	9307      	strlt	r3, [sp, #28]
 8005b94:	bfb8      	it	lt
 8005b96:	9204      	strlt	r2, [sp, #16]
 8005b98:	7823      	ldrb	r3, [r4, #0]
 8005b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b9c:	d10a      	bne.n	8005bb4 <_svfiprintf_r+0x130>
 8005b9e:	7863      	ldrb	r3, [r4, #1]
 8005ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba2:	d132      	bne.n	8005c0a <_svfiprintf_r+0x186>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	1d1a      	adds	r2, r3, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	9203      	str	r2, [sp, #12]
 8005bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bb0:	3402      	adds	r4, #2
 8005bb2:	9305      	str	r3, [sp, #20]
 8005bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c78 <_svfiprintf_r+0x1f4>
 8005bb8:	7821      	ldrb	r1, [r4, #0]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	f7fa fb27 	bl	8000210 <memchr>
 8005bc2:	b138      	cbz	r0, 8005bd4 <_svfiprintf_r+0x150>
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	eba0 000a 	sub.w	r0, r0, sl
 8005bca:	2240      	movs	r2, #64	@ 0x40
 8005bcc:	4082      	lsls	r2, r0
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	3401      	adds	r4, #1
 8005bd2:	9304      	str	r3, [sp, #16]
 8005bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd8:	4824      	ldr	r0, [pc, #144]	@ (8005c6c <_svfiprintf_r+0x1e8>)
 8005bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bde:	2206      	movs	r2, #6
 8005be0:	f7fa fb16 	bl	8000210 <memchr>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d036      	beq.n	8005c56 <_svfiprintf_r+0x1d2>
 8005be8:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <_svfiprintf_r+0x1ec>)
 8005bea:	bb1b      	cbnz	r3, 8005c34 <_svfiprintf_r+0x1b0>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	3307      	adds	r3, #7
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfa:	4433      	add	r3, r6
 8005bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bfe:	e76a      	b.n	8005ad6 <_svfiprintf_r+0x52>
 8005c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c04:	460c      	mov	r4, r1
 8005c06:	2001      	movs	r0, #1
 8005c08:	e7a8      	b.n	8005b5c <_svfiprintf_r+0xd8>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	3401      	adds	r4, #1
 8005c0e:	9305      	str	r3, [sp, #20]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f04f 0c0a 	mov.w	ip, #10
 8005c16:	4620      	mov	r0, r4
 8005c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1c:	3a30      	subs	r2, #48	@ 0x30
 8005c1e:	2a09      	cmp	r2, #9
 8005c20:	d903      	bls.n	8005c2a <_svfiprintf_r+0x1a6>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0c6      	beq.n	8005bb4 <_svfiprintf_r+0x130>
 8005c26:	9105      	str	r1, [sp, #20]
 8005c28:	e7c4      	b.n	8005bb4 <_svfiprintf_r+0x130>
 8005c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2e:	4604      	mov	r4, r0
 8005c30:	2301      	movs	r3, #1
 8005c32:	e7f0      	b.n	8005c16 <_svfiprintf_r+0x192>
 8005c34:	ab03      	add	r3, sp, #12
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	462a      	mov	r2, r5
 8005c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <_svfiprintf_r+0x1f0>)
 8005c3c:	a904      	add	r1, sp, #16
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f3af 8000 	nop.w
 8005c44:	1c42      	adds	r2, r0, #1
 8005c46:	4606      	mov	r6, r0
 8005c48:	d1d6      	bne.n	8005bf8 <_svfiprintf_r+0x174>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	065b      	lsls	r3, r3, #25
 8005c4e:	f53f af2d 	bmi.w	8005aac <_svfiprintf_r+0x28>
 8005c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c54:	e72c      	b.n	8005ab0 <_svfiprintf_r+0x2c>
 8005c56:	ab03      	add	r3, sp, #12
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <_svfiprintf_r+0x1f0>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	4638      	mov	r0, r7
 8005c62:	f000 f879 	bl	8005d58 <_printf_i>
 8005c66:	e7ed      	b.n	8005c44 <_svfiprintf_r+0x1c0>
 8005c68:	08006394 	.word	0x08006394
 8005c6c:	0800639e 	.word	0x0800639e
 8005c70:	00000000 	.word	0x00000000
 8005c74:	080059cd 	.word	0x080059cd
 8005c78:	0800639a 	.word	0x0800639a

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4698      	mov	r8, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	3b00      	subs	r3, #0
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c8      	blx	r9
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf02      	ittt	eq
 8005cee:	68e5      	ldreq	r5, [r4, #12]
 8005cf0:	6833      	ldreq	r3, [r6, #0]
 8005cf2:	1aed      	subeq	r5, r5, r3
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4641      	mov	r1, r8
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c8      	blx	r9
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	@ 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4641      	mov	r1, r8
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c8      	blx	r9
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d60:	2f78      	cmp	r7, #120	@ 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	@ 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d2 	beq.w	8005f1e <_printf_i+0x1c6>
 8005d7a:	2f58      	cmp	r7, #88	@ 0x58
 8005d7c:	f000 80b9 	beq.w	8005ef2 <_printf_i+0x19a>
 8005d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	@ (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f05 	.word	0x08005f05
 8005dc8:	08005e2f 	.word	0x08005e2f
 8005dcc:	08005ebf 	.word	0x08005ebf
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f27 	.word	0x08005f27
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e2f 	.word	0x08005e2f
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005ec7 	.word	0x08005ec7
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6032      	str	r2, [r6, #0]
 8005df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e09d      	b.n	8005f40 <_printf_i+0x1e8>
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	1d19      	adds	r1, r3, #4
 8005e0a:	6031      	str	r1, [r6, #0]
 8005e0c:	0606      	lsls	r6, r0, #24
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0xbc>
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	e003      	b.n	8005e1c <_printf_i+0xc4>
 8005e14:	0645      	lsls	r5, r0, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0xb8>
 8005e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	da03      	bge.n	8005e28 <_printf_i+0xd0>
 8005e20:	232d      	movs	r3, #45	@ 0x2d
 8005e22:	426d      	negs	r5, r5
 8005e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e28:	4859      	ldr	r0, [pc, #356]	@ (8005f90 <_printf_i+0x238>)
 8005e2a:	230a      	movs	r3, #10
 8005e2c:	e011      	b.n	8005e52 <_printf_i+0xfa>
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	0608      	lsls	r0, r1, #24
 8005e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e38:	d402      	bmi.n	8005e40 <_printf_i+0xe8>
 8005e3a:	0649      	lsls	r1, r1, #25
 8005e3c:	bf48      	it	mi
 8005e3e:	b2ad      	uxthmi	r5, r5
 8005e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e42:	4853      	ldr	r0, [pc, #332]	@ (8005f90 <_printf_i+0x238>)
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	bf14      	ite	ne
 8005e48:	230a      	movne	r3, #10
 8005e4a:	2308      	moveq	r3, #8
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e52:	6866      	ldr	r6, [r4, #4]
 8005e54:	60a6      	str	r6, [r4, #8]
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	bfa2      	ittt	ge
 8005e5a:	6821      	ldrge	r1, [r4, #0]
 8005e5c:	f021 0104 	bicge.w	r1, r1, #4
 8005e60:	6021      	strge	r1, [r4, #0]
 8005e62:	b90d      	cbnz	r5, 8005e68 <_printf_i+0x110>
 8005e64:	2e00      	cmp	r6, #0
 8005e66:	d04b      	beq.n	8005f00 <_printf_i+0x1a8>
 8005e68:	4616      	mov	r6, r2
 8005e6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e72:	5dc7      	ldrb	r7, [r0, r7]
 8005e74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e78:	462f      	mov	r7, r5
 8005e7a:	42bb      	cmp	r3, r7
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	d9f4      	bls.n	8005e6a <_printf_i+0x112>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10b      	bne.n	8005e9c <_printf_i+0x144>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07df      	lsls	r7, r3, #31
 8005e88:	d508      	bpl.n	8005e9c <_printf_i+0x144>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	6861      	ldr	r1, [r4, #4]
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	bfde      	ittt	le
 8005e92:	2330      	movle	r3, #48	@ 0x30
 8005e94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e9c:	1b92      	subs	r2, r2, r6
 8005e9e:	6122      	str	r2, [r4, #16]
 8005ea0:	f8cd a000 	str.w	sl, [sp]
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	aa03      	add	r2, sp, #12
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f7ff fee6 	bl	8005c7c <_printf_common>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d14a      	bne.n	8005f4a <_printf_i+0x1f2>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	b004      	add	sp, #16
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	f043 0320 	orr.w	r3, r3, #32
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	4833      	ldr	r0, [pc, #204]	@ (8005f94 <_printf_i+0x23c>)
 8005ec8:	2778      	movs	r7, #120	@ 0x78
 8005eca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	6831      	ldr	r1, [r6, #0]
 8005ed2:	061f      	lsls	r7, r3, #24
 8005ed4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed8:	d402      	bmi.n	8005ee0 <_printf_i+0x188>
 8005eda:	065f      	lsls	r7, r3, #25
 8005edc:	bf48      	it	mi
 8005ede:	b2ad      	uxthmi	r5, r5
 8005ee0:	6031      	str	r1, [r6, #0]
 8005ee2:	07d9      	lsls	r1, r3, #31
 8005ee4:	bf44      	itt	mi
 8005ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eea:	6023      	strmi	r3, [r4, #0]
 8005eec:	b11d      	cbz	r5, 8005ef6 <_printf_i+0x19e>
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e7ac      	b.n	8005e4c <_printf_i+0xf4>
 8005ef2:	4827      	ldr	r0, [pc, #156]	@ (8005f90 <_printf_i+0x238>)
 8005ef4:	e7e9      	b.n	8005eca <_printf_i+0x172>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	f023 0320 	bic.w	r3, r3, #32
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	e7f6      	b.n	8005eee <_printf_i+0x196>
 8005f00:	4616      	mov	r6, r2
 8005f02:	e7bd      	b.n	8005e80 <_printf_i+0x128>
 8005f04:	6833      	ldr	r3, [r6, #0]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	6961      	ldr	r1, [r4, #20]
 8005f0a:	1d18      	adds	r0, r3, #4
 8005f0c:	6030      	str	r0, [r6, #0]
 8005f0e:	062e      	lsls	r6, r5, #24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	d501      	bpl.n	8005f18 <_printf_i+0x1c0>
 8005f14:	6019      	str	r1, [r3, #0]
 8005f16:	e002      	b.n	8005f1e <_printf_i+0x1c6>
 8005f18:	0668      	lsls	r0, r5, #25
 8005f1a:	d5fb      	bpl.n	8005f14 <_printf_i+0x1bc>
 8005f1c:	8019      	strh	r1, [r3, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	4616      	mov	r6, r2
 8005f24:	e7bc      	b.n	8005ea0 <_printf_i+0x148>
 8005f26:	6833      	ldr	r3, [r6, #0]
 8005f28:	1d1a      	adds	r2, r3, #4
 8005f2a:	6032      	str	r2, [r6, #0]
 8005f2c:	681e      	ldr	r6, [r3, #0]
 8005f2e:	6862      	ldr	r2, [r4, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7fa f96c 	bl	8000210 <memchr>
 8005f38:	b108      	cbz	r0, 8005f3e <_printf_i+0x1e6>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	6060      	str	r0, [r4, #4]
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f48:	e7aa      	b.n	8005ea0 <_printf_i+0x148>
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d0ad      	beq.n	8005eb4 <_printf_i+0x15c>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	079b      	lsls	r3, r3, #30
 8005f5c:	d413      	bmi.n	8005f86 <_printf_i+0x22e>
 8005f5e:	68e0      	ldr	r0, [r4, #12]
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	4298      	cmp	r0, r3
 8005f64:	bfb8      	it	lt
 8005f66:	4618      	movlt	r0, r3
 8005f68:	e7a6      	b.n	8005eb8 <_printf_i+0x160>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	47d0      	blx	sl
 8005f74:	3001      	adds	r0, #1
 8005f76:	d09d      	beq.n	8005eb4 <_printf_i+0x15c>
 8005f78:	3501      	adds	r5, #1
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	9903      	ldr	r1, [sp, #12]
 8005f7e:	1a5b      	subs	r3, r3, r1
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dcf2      	bgt.n	8005f6a <_printf_i+0x212>
 8005f84:	e7eb      	b.n	8005f5e <_printf_i+0x206>
 8005f86:	2500      	movs	r5, #0
 8005f88:	f104 0619 	add.w	r6, r4, #25
 8005f8c:	e7f5      	b.n	8005f7a <_printf_i+0x222>
 8005f8e:	bf00      	nop
 8005f90:	080063a5 	.word	0x080063a5
 8005f94:	080063b6 	.word	0x080063b6

08005f98 <memmove>:
 8005f98:	4288      	cmp	r0, r1
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	eb01 0402 	add.w	r4, r1, r2
 8005fa0:	d902      	bls.n	8005fa8 <memmove+0x10>
 8005fa2:	4284      	cmp	r4, r0
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	d807      	bhi.n	8005fb8 <memmove+0x20>
 8005fa8:	1e43      	subs	r3, r0, #1
 8005faa:	42a1      	cmp	r1, r4
 8005fac:	d008      	beq.n	8005fc0 <memmove+0x28>
 8005fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fb6:	e7f8      	b.n	8005faa <memmove+0x12>
 8005fb8:	4402      	add	r2, r0
 8005fba:	4601      	mov	r1, r0
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	d100      	bne.n	8005fc2 <memmove+0x2a>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fca:	e7f7      	b.n	8005fbc <memmove+0x24>

08005fcc <_sbrk_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	@ (8005fe8 <_sbrk_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fb fa4c 	bl	8001474 <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_sbrk_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_sbrk_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	2000038c 	.word	0x2000038c

08005fec <memcpy>:
 8005fec:	440a      	add	r2, r1
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff4:	d100      	bne.n	8005ff8 <memcpy+0xc>
 8005ff6:	4770      	bx	lr
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006002:	4291      	cmp	r1, r2
 8006004:	d1f9      	bne.n	8005ffa <memcpy+0xe>
 8006006:	bd10      	pop	{r4, pc}

08006008 <_realloc_r>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	4680      	mov	r8, r0
 800600e:	4615      	mov	r5, r2
 8006010:	460c      	mov	r4, r1
 8006012:	b921      	cbnz	r1, 800601e <_realloc_r+0x16>
 8006014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	4611      	mov	r1, r2
 800601a:	f7ff bc4b 	b.w	80058b4 <_malloc_r>
 800601e:	b92a      	cbnz	r2, 800602c <_realloc_r+0x24>
 8006020:	f7ff fbdc 	bl	80057dc <_free_r>
 8006024:	2400      	movs	r4, #0
 8006026:	4620      	mov	r0, r4
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	f000 f81a 	bl	8006064 <_malloc_usable_size_r>
 8006030:	4285      	cmp	r5, r0
 8006032:	4606      	mov	r6, r0
 8006034:	d802      	bhi.n	800603c <_realloc_r+0x34>
 8006036:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800603a:	d8f4      	bhi.n	8006026 <_realloc_r+0x1e>
 800603c:	4629      	mov	r1, r5
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fc38 	bl	80058b4 <_malloc_r>
 8006044:	4607      	mov	r7, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d0ec      	beq.n	8006024 <_realloc_r+0x1c>
 800604a:	42b5      	cmp	r5, r6
 800604c:	462a      	mov	r2, r5
 800604e:	4621      	mov	r1, r4
 8006050:	bf28      	it	cs
 8006052:	4632      	movcs	r2, r6
 8006054:	f7ff ffca 	bl	8005fec <memcpy>
 8006058:	4621      	mov	r1, r4
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff fbbe 	bl	80057dc <_free_r>
 8006060:	463c      	mov	r4, r7
 8006062:	e7e0      	b.n	8006026 <_realloc_r+0x1e>

08006064 <_malloc_usable_size_r>:
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f18      	subs	r0, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfbc      	itt	lt
 800606e:	580b      	ldrlt	r3, [r1, r0]
 8006070:	18c0      	addlt	r0, r0, r3
 8006072:	4770      	bx	lr

08006074 <_init>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr

08006080 <_fini>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr
